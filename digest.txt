Directory structure:
└── Angular-L/
    ├── commitlint.config.js
    ├── package.json
    ├── .eslintignore
    ├── .prettierignore
    ├── recipe-app/
    │   ├── README.md
    │   ├── angular.json
    │   ├── package.json
    │   ├── postcss.config.ts
    │   ├── tsconfig.app.json
    │   ├── tsconfig.json
    │   ├── tsconfig.spec.json
    │   ├── .editorconfig
    │   ├── .eslintrc.json
    │   ├── .postcssrc.json
    │   ├── .prettierignore
    │   ├── .prettierrc.json
    │   ├── public/
    │   │   └── ratatouili
    │   └── src/
    │       ├── index.html
    │       ├── main.ts
    │       ├── styles.css
    │       ├── test.ts
    │       └── app/
    │           ├── app.config.ts
    │           ├── app.css
    │           ├── app.html
    │           ├── app.routes.ts
    │           ├── app.spec.ts
    │           ├── app.ts
    │           ├── components/
    │           │   ├── create-recipe-modal/
    │           │   │   ├── create-recipe-modal.css
    │           │   │   ├── create-recipe-modal.html
    │           │   │   ├── create-recipe-modal.spec.ts
    │           │   │   └── create-recipe-modal.ts
    │           │   ├── edit-recipe-modal/
    │           │   │   ├── edit-recipe-modal.css
    │           │   │   ├── edit-recipe-modal.html
    │           │   │   ├── edit-recipe-modal.spec.ts
    │           │   │   └── edit-recipe-modal.ts
    │           │   └── navbar/
    │           │       ├── navbar.css
    │           │       ├── navbar.html
    │           │       ├── navbar.spec.ts
    │           │       └── navbar.ts
    │           ├── guards/
    │           │   ├── auth-guard-guard.spec.ts
    │           │   └── auth-guard-guard.ts
    │           ├── models/
    │           │   └── interface/
    │           │       ├── recipe.interface.ts
    │           │       └── user.interface.ts
    │           ├── page/
    │           │   ├── create-recipe/
    │           │   │   ├── create-recipe.css
    │           │   │   ├── create-recipe.html
    │           │   │   ├── create-recipe.spec.ts
    │           │   │   └── create-recipe.ts
    │           │   ├── home/
    │           │   │   ├── home.css
    │           │   │   ├── home.html
    │           │   │   ├── home.spec.ts
    │           │   │   └── home.ts
    │           │   ├── login/
    │           │   │   ├── login.css
    │           │   │   ├── login.html
    │           │   │   ├── login.spec.ts
    │           │   │   └── login.ts
    │           │   ├── my-recipes/
    │           │   │   ├── my-recipes.css
    │           │   │   ├── my-recipes.html
    │           │   │   ├── my-recipes.spec.ts
    │           │   │   └── my-recipes.ts
    │           │   ├── recipe-detail/
    │           │   │   ├── recipe-detail.css
    │           │   │   ├── recipe-detail.html
    │           │   │   ├── recipe-detail.spec.ts
    │           │   │   └── recipe-detail.ts
    │           │   ├── recipe-list/
    │           │   │   ├── recipe-list.css
    │           │   │   ├── recipe-list.html
    │           │   │   ├── recipe-list.spec.ts
    │           │   │   └── recipe-list.ts
    │           │   └── signup/
    │           │       ├── signup.css
    │           │       ├── signup.html
    │           │       ├── signup.spec.ts
    │           │       └── signup.ts
    │           └── service/
    │               ├── auth-service.spec.ts
    │               ├── auth-service.ts
    │               ├── cloudinary.service.spec.ts
    │               ├── cloudinary.service.ts
    │               ├── recipe-events.service.ts
    │               ├── recipe-service.spec.ts
    │               └── recipe-service.ts
    ├── server/
    │   ├── package.json
    │   ├── tsconfig.json
    │   ├── .eslintrc.json
    │   ├── .prettierignore
    │   ├── .prettierrc.json
    │   └── src/
    │       ├── index.ts
    │       ├── swagger.ts
    │       ├── config/
    │       │   └── database.ts
    │       ├── controllers/
    │       │   ├── commentController.ts
    │       │   ├── favoriteController.ts
    │       │   ├── ratingController.ts
    │       │   ├── recipeController.ts
    │       │   └── userController.ts
    │       ├── middleware/
    │       │   ├── authMiddleware.ts
    │       │   └── errorHandler.ts
    │       ├── models/
    │       │   ├── comment.ts
    │       │   ├── favorite.ts
    │       │   ├── rating.ts
    │       │   ├── recipe.ts
    │       │   ├── recipetag.ts
    │       │   ├── syncmodel.ts
    │       │   ├── tag.ts
    │       │   └── user.ts
    │       ├── repositories/
    │       │   ├── commentRepository.ts
    │       │   ├── ratingRepository.ts
    │       │   ├── recipeRepository.ts
    │       │   └── userRepository.ts
    │       └── routes/
    │           ├── commentRoutes.ts
    │           ├── ratingRoutes.ts
    │           ├── recipeRoutes.ts
    │           └── userRoutes.ts
    └── .husky/
        ├── commit-msg
        └── pre-commit

================================================
FILE: commitlint.config.js
================================================
module.exports = {
  extends: ['@commitlint/config-conventional'],
};


================================================
FILE: package.json
================================================
{
  "name": "angular-l",
  "version": "1.0.0",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1",
    "prepare": "husky"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/sanghamitradash021/Angular-L.git"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "bugs": {
    "url": "https://github.com/sanghamitradash021/Angular-L/issues"
  },
  "homepage": "https://github.com/sanghamitradash021/Angular-L#readme",
  "description": "",
  "devDependencies": {
    "@commitlint/config-conventional": "^19.8.1",
    "commitlint": "^19.8.1",
    "husky": "^9.1.7",
    "lint-staged": "^16.1.6"
  },
  "lint-staged": {
    "recipe-app/**/*.{ts,html,css}": [
      "npm --prefix recipe-app run format",
      "npm --prefix recipe-app run lint"
    ],
    "server/**/*.ts": [
      "npm --prefix server run format",
      "npm --prefix server run lint"
    ]
  }
}



================================================
FILE: .eslintignore
================================================
/node_modules
/dist
/recipe-app/node_modules
/recipe-app/dist
/server/node_modules
/server/dist


================================================
FILE: .prettierignore
================================================
/node_modules
/dist
/recipe-app/node_modules
/recipe-app/dist
/server/node_modules
/server/dist


================================================
FILE: recipe-app/README.md
================================================
# RecipeApp (Angular Version)

This project is an Angular frontend for the recipe-sharing platform, generated with [Angular CLI](https://github.com/angular/angular-cli).

## Prerequisites

- Ensure the Node.js backend server from the `Project-1/server` directory is running on `http://localhost:3000`.
- You have Node.js and the Angular CLI installed.

## Development server

To start the local development server, run:

```bash
ng serve


================================================
FILE: recipe-app/angular.json
================================================
{
  "$schema": "./node_modules/@angular/cli/lib/config/schema.json",
  "version": 1,
  "newProjectRoot": "projects",
  "projects": {
    "recipe-app": {
      "projectType": "application",
      "schematics": {},
      "root": "",
      "sourceRoot": "src",
      "prefix": "app",
      "architect": {
        "lint": {
          "builder": "@angular-eslint/builder:lint",
          "options": {
            "lintFilePatterns": ["src/**/*.ts", "src/**/*.html"]
          }
        },
        "build": {
          "builder": "@angular/build:application",
          "options": {
            "browser": "src/main.ts",
            "polyfills": [
              "zone.js"
            ],
            "tsConfig": "tsconfig.app.json",
            "assets": [
              {
                "glob": "**/*",
                "input": "public"
              }
            ],
            "styles": [
              "src/styles.css"
            ],
            "stylePreprocessorOptions": {
              "includePaths": [
                "node_modules"
              ]
            }
          },
          "configurations": {
            "production": {
              "budgets": [
                {
                  "type": "initial",
                  "maximumWarning": "500kB",
                  "maximumError": "1MB"
                },
                {
                  "type": "anyComponentStyle",
                  "maximumWarning": "4kB",
                  "maximumError": "8kB"
                }
              ],
              "outputHashing": "all"
            },
            "development": {
              "optimization": false,
              "extractLicenses": false,
              "sourceMap": true
            }
          },
          "defaultConfiguration": "production"
        },
        "serve": {
          "builder": "@angular/build:dev-server",
          "configurations": {
            "production": {
              "buildTarget": "recipe-app:build:production"
            },
            "development": {
              "buildTarget": "recipe-app:build:development"
            }
          },
          "defaultConfiguration": "development"
        },
        "extract-i18n": {
          "builder": "@angular/build:extract-i18n"
        },
        "test": {
          "builder": "@angular/build:karma",
          "options": {
            "polyfills": [
              "zone.js",
              "zone.js/testing"
            ],
            "tsConfig": "tsconfig.spec.json",
            "assets": [
              {
                "glob": "**/*",
                "input": "public"
              }
            ],
            "styles": [
              "src/styles.css"
            ]
          }
        }
      }
    }
  }
}



================================================
FILE: recipe-app/package.json
================================================
{
  "name": "recipe-app",
  "version": "0.0.0",
  "scripts": {
    "ng": "ng",
    "start": "ng serve",
    "build": "ng build",
    "watch": "ng build --watch --configuration development",
    "test": "ng test",
    "lint": "ng lint",
    "format": "prettier --write \"src/**/*.{ts,html,css}\""
  },
  "prettier": {
    "printWidth": 100,
    "singleQuote": true,
    "overrides": [
      {
        "files": "*.html",
        "options": {
          "parser": "angular"
        }
      }
    ]
  },
  "private": true,
  "dependencies": {
    "@angular/common": "^20.2.0",
    "@angular/compiler": "^20.2.0",
    "@angular/core": "^20.2.0",
    "@angular/forms": "^20.2.0",
    "@angular/platform-browser": "^20.2.0",
    "@angular/router": "^20.2.0",
    "jwt-decode": "^4.0.0",
    "rxjs": "~7.8.0",
    "tslib": "^2.3.0",
    "zone.js": "~0.15.0"
  },
  "devDependencies": {
    "@angular-eslint/builder": "^20.2.0",
    "@angular-eslint/eslint-plugin": "^20.2.0",
    "@angular-eslint/eslint-plugin-template": "^20.2.0",
    "@angular-eslint/template-parser": "^20.2.0",
    "@angular/build": "^20.2.0",
    "@angular/cli": "^20.2.0",
    "@angular/compiler-cli": "^20.2.0",
    "@tailwindcss/postcss": "^4.1.12",
    "@types/jasmine": "~5.1.0",
    "@types/jwt-decode": "^2.2.1",
    "@typescript-eslint/eslint-plugin": "^8.42.0",
    "@typescript-eslint/parser": "^8.42.0",
    "autoprefixer": "^10.4.21",
    "eslint": "^9.35.0",
    "eslint-config-prettier": "^10.1.8",
    "eslint-plugin-prettier": "^5.5.4",
    "jasmine-core": "~5.9.0",
    "karma": "~6.4.0",
    "karma-chrome-launcher": "~3.2.0",
    "karma-coverage": "~2.2.0",
    "karma-jasmine": "~5.1.0",
    "karma-jasmine-html-reporter": "~2.1.0",
    "postcss": "^8.5.6",
    "prettier": "^3.6.2",
    "tailwindcss": "^4.1.12",
    "typescript": "~5.9.2"
  }
}



================================================
FILE: recipe-app/postcss.config.ts
================================================
import { type PluginCreator } from "postcss";

const config = {
  plugins: {
    "@tailwindcss/postcss": {} ,
    autoprefixer: {},
  },
};

export default config;



================================================
FILE: recipe-app/tsconfig.app.json
================================================
/* To learn more about Typescript configuration file: https://www.typescriptlang.org/docs/handbook/tsconfig-json.html. */
/* To learn more about Angular compiler options: https://angular.dev/reference/configs/angular-compiler-options. */
{
  "extends": "./tsconfig.json",
  "compilerOptions": {
    "outDir": "./out-tsc/app",
    "types": []
  },
  "include": [
    "src/**/*.ts"
, "src/test.ts"  ],
  "exclude": [
    "src/**/*.spec.ts"
  ]
}



================================================
FILE: recipe-app/tsconfig.json
================================================
/* To learn more about Typescript configuration file: https://www.typescriptlang.org/docs/handbook/tsconfig-json.html. */
/* To learn more about Angular compiler options: https://angular.dev/reference/configs/angular-compiler-options. */
{
  "compileOnSave": false,
  "compilerOptions": {
    "strict": true,
    "noImplicitOverride": true,
    "noPropertyAccessFromIndexSignature": true,
    "noImplicitReturns": true,
    "noFallthroughCasesInSwitch": true,
    "skipLibCheck": true,
    "isolatedModules": true,
    "experimentalDecorators": true,
    "importHelpers": true,
    "target": "ES2022",
    "module": "preserve"
  },
  "angularCompilerOptions": {
    "enableI18nLegacyMessageIdFormat": false,
    "strictInjectionParameters": true,
    "strictInputAccessModifiers": true,
    "typeCheckHostBindings": true,
    "strictTemplates": true
  },
  "files": [],
  "references": [
    {
      "path": "./tsconfig.app.json"
    },
    {
      "path": "./tsconfig.spec.json"
    }
  ]
}



================================================
FILE: recipe-app/tsconfig.spec.json
================================================
/* To learn more about Typescript configuration file: https://www.typescriptlang.org/docs/handbook/tsconfig-json.html. */
/* To learn more about Angular compiler options: https://angular.dev/reference/configs/angular-compiler-options. */
{
  "extends": "./tsconfig.json",
  "compilerOptions": {
    "outDir": "./out-tsc/spec",
    "types": [
      "jasmine"
    ]
  },
  "include": [
    "src/**/*.ts"
, "src/test.ts"  ]
}



================================================
FILE: recipe-app/.editorconfig
================================================
# Editor configuration, see https://editorconfig.org
root = true

[*]
charset = utf-8
indent_style = space
indent_size = 2
insert_final_newline = true
trim_trailing_whitespace = true

[*.ts]
quote_type = single
ij_typescript_use_double_quotes = false

[*.md]
max_line_length = off
trim_trailing_whitespace = false



================================================
FILE: recipe-app/.eslintrc.json
================================================
{
  "root": true,
  "ignorePatterns": ["projects/**/*"],
  "overrides": [
    {
      "files": ["*.ts"],
      "parserOptions": {
        "project": ["tsconfig.app.json", "tsconfig.spec.json"],
        "createDefaultProgram": true
      },
      "extends": [
        "plugin:@angular-eslint/recommended",
        "plugin:@angular-eslint/template/process-inline-templates",
        "plugin:@typescript-eslint/recommended",
        "prettier"
      ],
      "rules": {
        "@angular-eslint/directive-selector": [
          "error",
          {
            "type": "attribute",
            "prefix": "app",
            "style": "camelCase"
          }
        ],
        "@angular-eslint/component-selector": [
          "error",
          {
            "type": "element",
            "prefix": "app",
            "style": "kebab-case"
          }
        ],
        "prettier/prettier": "error",
        "@typescript-eslint/explicit-module-boundary-types": "off",
        "@typescript-eslint/no-explicit-any": "off"
      }
    },
    {
      "files": ["*.html"],
      "extends": [
        "plugin:@angular-eslint/template/recommended",
        "prettier"
      ],
      "rules": {
        "prettier/prettier": [
          "error",
          {
            "parser": "angular"
          }
        ]
      }
    }
  ]
}


================================================
FILE: recipe-app/.postcssrc.json
================================================
{
  "plugins": {
    "@tailwindcss/postcss": {}
  }
}


================================================
FILE: recipe-app/.prettierignore
================================================
/dist
/node_modules


================================================
FILE: recipe-app/.prettierrc.json
================================================
{
  "singleQuote": true,
  "semi": true,
  "tabWidth": 2,
  "trailingComma": "all",
  "printWidth": 120
}


================================================
FILE: recipe-app/public/ratatouili
================================================
[Non-text file]


================================================
FILE: recipe-app/src/index.html
================================================
<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <title>RecipeApp</title>
  <base href="/">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="icon" type="image/x-icon" href="favicon.ico">
</head>
<body>
  <app-root></app-root>
</body>
</html>



================================================
FILE: recipe-app/src/main.ts
================================================
import { bootstrapApplication } from '@angular/platform-browser';
import { appConfig } from './app/app.config';
import { AppComponent } from './app/app';
import './styles.css';

bootstrapApplication(AppComponent, appConfig)
  .catch((err) => console.error(err));



================================================
FILE: recipe-app/src/styles.css
================================================
@import "tailwindcss";

html, body { 
  height: 100%; 
  margin: 0;
  font-family: Roboto, "Helvetica Neue", sans-serif;
}




================================================
FILE: recipe-app/src/test.ts
================================================
// const Jasmine = require('jasmine');
// const jasmine = new Jasmine();

// jasmine.loadConfigFile('jasmine.json');

// jasmine.execute();

// test('hello world!', () => {
//     expect(true).toBe(true);
// });


================================================
FILE: recipe-app/src/app/app.config.ts
================================================
// import { ApplicationConfig, provideBrowserGlobalErrorListeners, provideZoneChangeDetection } from '@angular/core';
// import { provideRouter } from '@angular/router';

// import { routes } from './app.routes';

// export const appConfig: ApplicationConfig = {
//   providers: [
//     provideBrowserGlobalErrorListeners(),
//     provideZoneChangeDetection({ eventCoalescing: true }),
//     provideRouter(routes)
//   ]
// };

import { ApplicationConfig } from '@angular/core';
import { provideRouter } from '@angular/router';
import { provideHttpClient, withInterceptorsFromDi } from '@angular/common/http';

import { routes } from './app.routes';

export const appConfig: ApplicationConfig = {
  providers: [
    provideRouter(routes),
    provideHttpClient(withInterceptorsFromDi()),
  ],
};




================================================
FILE: recipe-app/src/app/app.css
================================================



================================================
FILE: recipe-app/src/app/app.html
================================================
<head>
  <title>Recipe App</title>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <link rel="icon" type="image/x-icon" href="favicon.ico" />
</head>

<div class="min-h-screen bg-gray-100">
  <app-navbar></app-navbar>
  <main class="min-h-screen w-full bg-white relative pt-16">
    <!-- <div
    className="absolute inset-0 z-0"
    style="background-image: radial-gradient(125% 125% at 50% 10%, #ffffff 40%, #f59e0b 100%);background-size: 100% 100%;"
  ></div> -->

    <!-- The router outlet is where the content for the current route is displayed -->
    <router-outlet></router-outlet>
  </main>
</div>



================================================
FILE: recipe-app/src/app/app.routes.ts
================================================
import { Routes } from '@angular/router';

// export const routes: Routes = [];

import { HomeComponent } from './page/home/home';
import { LoginComponent } from './page/login/login';
import { SignUpComponent } from './page/signup/signup';
import { MyRecipesComponent } from './page/my-recipes/my-recipes';
import { RecipeDetailComponent } from './page/recipe-detail/recipe-detail';
import { authGuard } from './guards/auth-guard-guard';
import { CreateRecipeComponent } from './page/create-recipe/create-recipe';
import { RecipeListComponent } from './page/recipe-list/recipe-list';

export const routes: Routes = [
  { path: '', component: HomeComponent },
  { path: 'login', component: LoginComponent },
  { path: 'signup', component: SignUpComponent },
  { 
    path: 'my-recipes', 
    component: MyRecipesComponent,
    canActivate: [authGuard] 
  },
  {
    path: 'create-recipe',
    component: CreateRecipeComponent,
    canActivate: [authGuard],
  },
  { path: 'recipes', component: RecipeListComponent },
  { path: 'recipes/:id', component: RecipeDetailComponent },
  // This handles the '/recipe/:id' route from your React app
  { path: 'recipe/:id', component: RecipeDetailComponent }, 
  { path: '**', redirectTo: '' }
];


================================================
FILE: recipe-app/src/app/app.spec.ts
================================================
import { TestBed } from '@angular/core/testing';
import { AppComponent } from './app';

describe('App', () => {
  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [AppComponent],
    }).compileComponents();
  });

  it('should create the app', () => {
    const fixture = TestBed.createComponent(AppComponent);
    const app = fixture.componentInstance;
    expect(app).toBeTruthy();
  });

  it('should render title', () => {
    const fixture = TestBed.createComponent(AppComponent);
    fixture.detectChanges();
    const compiled = fixture.nativeElement as HTMLElement;
    expect(compiled.querySelector('h1')?.textContent).toContain('Hello, recipe-app');
  });
});



================================================
FILE: recipe-app/src/app/app.ts
================================================
// import { Component, signal } from '@angular/core';
// import { RouterOutlet } from '@angular/router';

// @Component({
//   selector: 'app-root',
//   imports: [RouterOutlet],
//   templateUrl: './app.html',
//   styleUrl: './app.css'
// })
// export class App {
//   protected readonly title = signal('recipe-app');
// }


import { Component } from '@angular/core';
import { RouterOutlet } from '@angular/router';
import { NavbarComponent } from './components/navbar/navbar';

@Component({
  selector: 'app-root',
  standalone: true,
  imports: [RouterOutlet, NavbarComponent],
  templateUrl: './app.html',
  styleUrls: ['./app.css']
})
export class AppComponent {
  title = 'recipe-app';
}



================================================
FILE: recipe-app/src/app/components/create-recipe-modal/create-recipe-modal.css
================================================
/* .modal-overlay {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background-color: rgba(0, 0, 0, 0.75);
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 9999;
  padding: 1rem;
}

.modal-content {
  background: white;
  border-radius: 0.75rem;
  box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.25);
  padding: 2rem;
  width: 100%;
  max-width: 48rem;
  max-height: 90vh;
  overflow-y: auto;
  position: relative;
  margin: auto;
} */


================================================
FILE: recipe-app/src/app/components/create-recipe-modal/create-recipe-modal.html
================================================
@if (isOpen) {
<div
  class="fixed inset-0 backdrop-blur-sm bg-black/50 z-[9999] overflow-y-auto animate-in fade-in duration-300"
  (click)="onBackdropClick($event)"
>
  <div class="min-h-full flex items-center justify-center p-4">
    <div
      class="bg-white rounded-2xl shadow-2xl p-8 w-full max-w-4xl my-8 relative transform transition-all duration-300 animate-in slide-in-from-bottom-4 zoom-in-95"
      (click)="$event.stopPropagation()"
    >
      <!-- Enhanced header with better gradient and close button styling -->
      <div class="flex justify-between items-center mb-8 pb-4 border-b border-gray-100">
        <div class="space-y-1">
          <h2 class="text-4xl font-bold bg-gradient-to-r from-orange-500 via-red-500 to-pink-500 bg-clip-text text-transparent">
            Create Your Culinary Masterpiece
          </h2>
          <p class="text-gray-600 text-sm">Share your delicious recipe with the world</p>
        </div>
        <button
          (click)="onClose()"
          class="group relative p-3 text-gray-400 hover:text-gray-600 transition-all duration-200 hover:bg-gray-50 rounded-full hover:scale-110"
        >
          <svg class="w-6 h-6 transition-transform group-hover:rotate-90" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
          </svg>
          <div class="absolute inset-0 rounded-full bg-red-500/10 scale-0 group-hover:scale-100 transition-transform duration-200"></div>
        </button>
      </div>

      @if (error) {
      <!-- Enhanced error styling with animation -->
      <div class="mb-6 p-4 bg-gradient-to-r from-red-50 to-pink-50 border-l-4 border-red-500 text-red-700 rounded-lg animate-in slide-in-from-left duration-300">
        <div class="flex items-center space-x-2">
          <svg class="w-5 h-5 text-red-500" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd"></path>
          </svg>
          <p class="font-semibold">Oops! Something went wrong:</p>
        </div>
        <p class="mt-1 ml-7">{{ error }}</p>
      </div>
      }

      <!-- Enhanced scrollable form container with custom scrollbar -->
      <div class="max-h-[70vh] overflow-y-auto pr-2 custom-scrollbar">
        <form [formGroup]="recipeForm" (ngSubmit)="onSubmit()" class="space-y-8">
          <!-- Enhanced Recipe Title with floating label effect -->
          <div class="group relative">
            <input
              formControlName="title"
              type="text"
              class="peer w-full px-4 py-4 rounded-xl border-2 border-gray-200 focus:border-orange-500 focus:ring-4 focus:ring-orange-100 transition-all duration-300 placeholder-transparent bg-gray-50/50 hover:bg-white focus:bg-white"
              [class.border-red-400]="recipeForm.get('title')?.invalid && recipeForm.get('title')?.touched"
              placeholder="Recipe Title"
              id="title"
            />
            <label for="title" class="absolute left-4 -top-2.5 bg-white px-2 text-sm font-medium text-gray-600 transition-all peer-placeholder-shown:text-base peer-placeholder-shown:text-gray-400 peer-placeholder-shown:top-4 peer-focus:-top-2.5 peer-focus:text-sm peer-focus:text-orange-600">
              Recipe Title
            </label>
            <div class="absolute inset-0 rounded-xl bg-gradient-to-r from-orange-500/10 to-pink-500/10 opacity-0 group-hover:opacity-100 transition-opacity duration-300 pointer-events-none"></div>
            @if (getFieldError('title')) {
            <p class="text-red-500 text-sm mt-2 animate-in slide-in-from-left duration-200">
              {{ getFieldError('title') }}
            </p>
            }
          </div>

          <!-- Enhanced Description with floating label -->
          <div class="group relative">
            <textarea
              formControlName="description"
              rows="3"
              class="peer w-full px-4 py-4 rounded-xl border-2 border-gray-200 focus:border-orange-500 focus:ring-4 focus:ring-orange-100 transition-all duration-300 placeholder-transparent bg-gray-50/50 hover:bg-white focus:bg-white resize-none"
              [class.border-red-400]="recipeForm.get('description')?.invalid && recipeForm.get('description')?.touched"
              placeholder="Description"
              id="description"
            ></textarea>
            <label for="description" class="absolute left-4 -top-2.5 bg-white px-2 text-sm font-medium text-gray-600 transition-all peer-placeholder-shown:text-base peer-placeholder-shown:text-gray-400 peer-placeholder-shown:top-4 peer-focus:-top-2.5 peer-focus:text-sm peer-focus:text-orange-600">
              Description
            </label>
            <div class="absolute inset-0 rounded-xl bg-gradient-to-r from-orange-500/10 to-pink-500/10 opacity-0 group-hover:opacity-100 transition-opacity duration-300 pointer-events-none"></div>
            @if (getFieldError('description')) {
            <p class="text-red-500 text-sm mt-2 animate-in slide-in-from-left duration-200">
              {{ getFieldError('description') }}
            </p>
            }
          </div>

          <!-- Enhanced grid layout with better spacing and styling -->
          <div class="grid grid-cols-1 md:grid-cols-2 gap-8">
            <div class="group relative">
              <select
                formControlName="cuisine"
                class="peer w-full px-4 py-4 rounded-xl border-2 border-gray-200 focus:border-orange-500 focus:ring-4 focus:ring-orange-100 transition-all duration-300 bg-gray-50/50 hover:bg-white focus:bg-white appearance-none cursor-pointer"
                [class.border-red-400]="recipeForm.get('cuisine')?.invalid && recipeForm.get('cuisine')?.touched"
                id="cuisine"
              >
                <option value="">Select cuisine</option>
                <option value="Italian">🇮🇹 Italian</option>
                <option value="Chinese">🇨🇳 Chinese</option>
                <option value="Mexican">🇲🇽 Mexican</option>
                <option value="Indian">🇮🇳 Indian</option>
                <option value="French">🇫🇷 French</option>
                <option value="American">🇺🇸 American</option>
                <option value="Japanese">🇯🇵 Japanese</option>
                <option value="Mediterranean">🌊 Mediterranean</option>
              </select>
              <label for="cuisine" class="absolute left-4 -top-2.5 bg-white px-2 text-sm font-medium text-gray-600 peer-focus:text-orange-600">
                Cuisine
              </label>
              <div class="absolute right-4 top-1/2 transform -translate-y-1/2 pointer-events-none">
                <svg class="w-5 h-5 text-gray-400 group-hover:text-orange-500 transition-colors" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                </svg>
              </div>
              @if (getFieldError('cuisine')) {
              <p class="text-red-500 text-sm mt-2 animate-in slide-in-from-left duration-200">
                {{ getFieldError('cuisine') }}
              </p>
              }
            </div>

            <div class="group relative">
              <select
                formControlName="mealType"
                class="peer w-full px-4 py-4 rounded-xl border-2 border-gray-200 focus:border-orange-500 focus:ring-4 focus:ring-orange-100 transition-all duration-300 bg-gray-50/50 hover:bg-white focus:bg-white appearance-none cursor-pointer"
                [class.border-red-400]="recipeForm.get('mealType')?.invalid && recipeForm.get('mealType')?.touched"
                id="mealType"
              >
                <option value="">Select meal type</option>
                <option value="Breakfast">🌅 Breakfast</option>
                <option value="Lunch">🌞 Lunch</option>
                <option value="Dinner">🌙 Dinner</option>
                <option value="Dessert">🍰 Dessert</option>
                <option value="Snack">🍿 Snack</option>
                <option value="Appetizer">🥗 Appetizer</option>
              </select>
              <label for="mealType" class="absolute left-4 -top-2.5 bg-white px-2 text-sm font-medium text-gray-600 peer-focus:text-orange-600">
                Meal Type
              </label>
              <div class="absolute right-4 top-1/2 transform -translate-y-1/2 pointer-events-none">
                <svg class="w-5 h-5 text-gray-400 group-hover:text-orange-500 transition-colors" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                </svg>
              </div>
              @if (getFieldError('mealType')) {
              <p class="text-red-500 text-sm mt-2 animate-in slide-in-from-left duration-200">
                {{ getFieldError('mealType') }}
              </p>
              }
            </div>
          </div>

          <!-- Enhanced time and difficulty inputs -->
          <div class="grid grid-cols-1 md:grid-cols-2 gap-8">
            <div class="group relative">
              <input
                formControlName="preparationTime"
                type="number"
                min="1"
                class="peer w-full px-4 py-4 rounded-xl border-2 border-gray-200 focus:border-orange-500 focus:ring-4 focus:ring-orange-100 transition-all duration-300 placeholder-transparent bg-gray-50/50 hover:bg-white focus:bg-white"
                [class.border-red-400]="recipeForm.get('preparationTime')?.invalid && recipeForm.get('preparationTime')?.touched"
                placeholder="Preparation Time"
                id="preparationTime"
              />
              <label for="preparationTime" class="absolute left-4 -top-2.5 bg-white px-2 text-sm font-medium text-gray-600 peer-focus:text-orange-600">
                ⏱️ Preparation Time (minutes)
              </label>
              @if (getFieldError('preparationTime')) {
              <p class="text-red-500 text-sm mt-2 animate-in slide-in-from-left duration-200">
                {{ getFieldError('preparationTime') }}
              </p>
              }
            </div>

            <div class="group relative">
              <select
                formControlName="difficulty"
                class="peer w-full px-4 py-4 rounded-xl border-2 border-gray-200 focus:border-orange-500 focus:ring-4 focus:ring-orange-100 transition-all duration-300 bg-gray-50/50 hover:bg-white focus:bg-white appearance-none cursor-pointer"
                [class.border-red-400]="recipeForm.get('difficulty')?.invalid && recipeForm.get('difficulty')?.touched"
                id="difficulty"
              >
                <option value="Easy">🟢 Easy</option>
                <option value="Medium">🟡 Medium</option>
                <option value="Hard">🔴 Hard</option>
              </select>
              <label for="difficulty" class="absolute left-4 -top-2.5 bg-white px-2 text-sm font-medium text-gray-600 peer-focus:text-orange-600">
                Difficulty Level
              </label>
              <div class="absolute right-4 top-1/2 transform -translate-y-1/2 pointer-events-none">
                <svg class="w-5 h-5 text-gray-400 group-hover:text-orange-500 transition-colors" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                </svg>
              </div>
              @if (getFieldError('difficulty')) {
              <p class="text-red-500 text-sm mt-2 animate-in slide-in-from-left duration-200">
                {{ getFieldError('difficulty') }}
              </p>
              }
            </div>
          </div>

          <!-- Enhanced ingredients textarea -->
          <div class="group relative">
            <textarea
              formControlName="ingredients"
              rows="4"
              class="peer w-full px-4 py-4 rounded-xl border-2 border-gray-200 focus:border-orange-500 focus:ring-4 focus:ring-orange-100 transition-all duration-300 placeholder-transparent bg-gray-50/50 hover:bg-white focus:bg-white resize-none"
              [class.border-red-400]="recipeForm.get('ingredients')?.invalid && recipeForm.get('ingredients')?.touched"
              placeholder="Ingredients"
              id="ingredients"
            ></textarea>
            <label for="ingredients" class="absolute left-4 -top-2.5 bg-white px-2 text-sm font-medium text-gray-600 peer-focus:text-orange-600">
              🥕 Ingredients (one per line)
            </label>
            <div class="absolute inset-0 rounded-xl bg-gradient-to-r from-orange-500/10 to-pink-500/10 opacity-0 group-hover:opacity-100 transition-opacity duration-300 pointer-events-none"></div>
            @if (getFieldError('ingredients')) {
            <p class="text-red-500 text-sm mt-2 animate-in slide-in-from-left duration-200">
              {{ getFieldError('ingredients') }}
            </p>
            }
          </div>

          <!-- Enhanced instructions textarea -->
          <div class="group relative">
            <textarea
              formControlName="instructions"
              rows="6"
              class="peer w-full px-4 py-4 rounded-xl border-2 border-gray-200 focus:border-orange-500 focus:ring-4 focus:ring-orange-100 transition-all duration-300 placeholder-transparent bg-gray-50/50 hover:bg-white focus:bg-white resize-none"
              [class.border-red-400]="recipeForm.get('instructions')?.invalid && recipeForm.get('instructions')?.touched"
              placeholder="Instructions"
              id="instructions"
            ></textarea>
            <label for="instructions" class="absolute left-4 -top-2.5 bg-white px-2 text-sm font-medium text-gray-600 peer-focus:text-orange-600">
              📝 Step-by-step Instructions
            </label>
            <div class="absolute inset-0 rounded-xl bg-gradient-to-r from-orange-500/10 to-pink-500/10 opacity-0 group-hover:opacity-100 transition-opacity duration-300 pointer-events-none"></div>
            @if (getFieldError('instructions')) {
            <p class="text-red-500 text-sm mt-2 animate-in slide-in-from-left duration-200">
              {{ getFieldError('instructions') }}
            </p>
            }
          </div>

          <!-- Enhanced image upload with drag and drop styling -->
          <div class="group relative">
            <div class="relative border-2 border-dashed border-gray-300 rounded-xl p-8 text-center hover:border-orange-400 transition-all duration-300 bg-gray-50/50 hover:bg-orange-50/50">
              <input
                type="file"
                accept="image/*"
                (change)="onImageChange($event)"
                class="absolute inset-0 w-full h-full opacity-0 cursor-pointer"
              />
              <div class="space-y-3">
                <div class="mx-auto w-16 h-16 bg-gradient-to-br from-orange-400 to-pink-500 rounded-full flex items-center justify-center group-hover:scale-110 transition-transform duration-300">
                  <svg class="w-8 h-8 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                  </svg>
                </div>
                <div>
                  <p class="text-lg font-medium text-gray-700 group-hover:text-orange-600 transition-colors">
                    📸 Upload Recipe Image
                  </p>
                  <p class="text-sm text-gray-500 mt-1">
                    Drag and drop or click to select
                  </p>
                </div>
              </div>
            </div>
          </div>

          <!-- Enhanced action buttons with better animations -->
          <div class="flex justify-end space-x-4 pt-8 border-t border-gray-100">
            <button
              type="button"
              (click)="onClose()"
              class="group relative px-8 py-4 text-sm font-medium text-gray-700 bg-gray-100 rounded-full border border-transparent shadow-sm hover:bg-gray-200 hover:scale-105 focus:outline-none focus:ring-4 focus:ring-gray-200 transition-all duration-200 overflow-hidden"
            >
              <span class="relative z-10">Cancel</span>
              <div class="absolute inset-0 bg-gradient-to-r from-gray-200 to-gray-300 opacity-0 group-hover:opacity-100 transition-opacity duration-200"></div>
            </button>
            <button
              type="submit"
              [disabled]="recipeForm.invalid || loading"
              class="group relative px-8 py-4 text-sm font-medium text-white bg-gradient-to-r from-orange-500 to-pink-500 rounded-full border border-transparent shadow-lg hover:shadow-xl hover:scale-105 focus:outline-none focus:ring-4 focus:ring-orange-200 transition-all duration-200 disabled:opacity-50 disabled:cursor-not-allowed disabled:hover:scale-100 overflow-hidden"
            >
              @if (loading) {
              <span class="flex items-center relative z-10">
                <svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                  <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                  <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                </svg>
                Creating Magic...
              </span>
              } @else { 
              <span class="relative z-10">✨ Create Recipe</span>
              }
              <div class="absolute inset-0 bg-gradient-to-r from-orange-600 to-pink-600 opacity-0 group-hover:opacity-100 transition-opacity duration-200"></div>
            </button>
          </div>
        </form>
      </div>
    </div>
  </div>
</div>
}

<!-- Added custom scrollbar styles -->
<style>
.custom-scrollbar::-webkit-scrollbar {
  width: 6px;
}

.custom-scrollbar::-webkit-scrollbar-track {
  background: #f1f5f9;
  border-radius: 10px;
}

.custom-scrollbar::-webkit-scrollbar-thumb {
  background: linear-gradient(to bottom, #f97316, #ec4899);
  border-radius: 10px;
}

.custom-scrollbar::-webkit-scrollbar-thumb:hover {
  background: linear-gradient(to bottom, #ea580c, #db2777);
}
</style>



================================================
FILE: recipe-app/src/app/components/create-recipe-modal/create-recipe-modal.spec.ts
================================================
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { CreateRecipeModalComponent } from './create-recipe-modal';

describe('CreateRecipeModal', () => {
  let component: CreateRecipeModalComponent;
  let fixture: ComponentFixture<CreateRecipeModalComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [CreateRecipeModalComponent]
    })
    .compileComponents();

    fixture = TestBed.createComponent(CreateRecipeModalComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});



================================================
FILE: recipe-app/src/app/components/create-recipe-modal/create-recipe-modal.ts
================================================
// // import { Component } from '@angular/core';

// // @Component({
// //   selector: 'app-create-recipe-modal',
// //   imports: [],
// //   templateUrl: './create-recipe-modal.html',
// //   styleUrl: './create-recipe-modal.css'
// // })
// // export class CreateRecipeModal {

// // }


// import { Component, EventEmitter, Input, Output } from '@angular/core';
// import { CommonModule } from '@angular/common';
// import {
//   FormBuilder,
//   FormGroup,
//   ReactiveFormsModule,
//   Validators,
// } from '@angular/forms';
// import { RecipeService } from '../../service/recipe-service';
// import { AuthService } from '../../service/auth-service';

// @Component({
//   selector: 'app-create-recipe-modal',
//   standalone: true,
//   imports: [CommonModule, ReactiveFormsModule],
//   templateUrl: './create-recipe-modal.html',
// })
// export class CreateRecipeModalComponent {
//   @Input() isOpen = false;
//   @Output() close = new EventEmitter<void>();
//   @Output() success = new EventEmitter<void>();

//   recipeForm: FormGroup;
//   error: string = '';
//   loading = false;

//   constructor(
//     private fb: FormBuilder,
//     private recipeService: RecipeService,
//     private authService: AuthService
//   ) {
//     this.recipeForm = this.fb.group({
//       title: ['', Validators.required],
//       description: ['', Validators.required],
//       ingredients: ['', Validators.required],
//       instructions: ['', Validators.required],
//       preparationTime: ['', Validators.required],
//       difficulty: ['Medium', Validators.required],
//       cuisine: ['', Validators.required],
//       mealType: ['', Validators.required],
//       image: [null],
//     });
//   }

//   onClose() {
//     this.close.emit();
//   }

//     onBackdropClick(event: Event) {
//     // Close modal when clicking on backdrop (not the modal content)
//     if (event.target === event.currentTarget) {
//       this.onClose();
//     }
//   }

//   onImageChange(event: any) {
//   const file = event.target.files[0];
//   if (file) {
//     this.recipeForm.patchValue({
//       image: file
//     });
//   }
// }

//   onSubmit() {
//     if (this.recipeForm.invalid) {
//       return;
//     }
//     this.loading = true;
//     this.error = '';

//     const userId = this.authService.getUserId();
//     if (!userId) {
//       this.error = 'User not authenticated.';
//       this.loading = false;
//       return;
//     }

//     const formData = { ...this.recipeForm.value, user_id: userId };

    

//     // In a real app, you would handle file uploads properly,
//     // likely with a service that uploads to a backend or cloud storage.
//     // For this migration, we'll just pass the form data.
//     // this.recipeService.createRecipe(formData).subscribe({
//     //   next: () => {
//     //     this.loading = false;
//     //     this.success.emit();
//     //     this.onClose();
//     //   },
//     //   error: (err) => {
//     //     this.loading = false;
//     //     this.error = 'Failed to create recipe. Please try again.';
//     //   },
//     // });
//   }
// }


import { Component, EventEmitter, Input, Output } from '@angular/core';
import { CommonModule } from '@angular/common';
import {
  FormBuilder,
  FormGroup,
  ReactiveFormsModule,
  Validators,
} from '@angular/forms';
import { RecipeService } from '../../service/recipe-service';
import { AuthService } from '../../service/auth-service';
import { CloudinaryService } from '../../service/cloudinary.service';
import { Recipe } from '../../models/interface/recipe.interface';

@Component({
  selector: 'app-create-recipe-modal',
  standalone: true,
  imports: [CommonModule, ReactiveFormsModule],
  templateUrl: './create-recipe-modal.html',
})
export class CreateRecipeModalComponent {
  @Input() isOpen = false;
  @Output() close = new EventEmitter<void>();
  @Output() success = new EventEmitter<Recipe>();

  recipeForm: FormGroup;
  error: string = '';
  loading = false;

  constructor(
    private fb: FormBuilder,
    private recipeService: RecipeService,
    private authService: AuthService,
     private cloudinaryService: CloudinaryService
  ) {
    this.recipeForm = this.fb.group({
      title: ['', [Validators.required, Validators.minLength(3)]],
      description: ['', [Validators.required, Validators.minLength(10)]],
      ingredients: ['', [Validators.required, Validators.minLength(5)]],
      instructions: ['', [Validators.required, Validators.minLength(10)]],
      preparationTime: ['', [Validators.required, Validators.min(1), Validators.max(480)]],
      difficulty: ['Medium', Validators.required],
      cuisine: ['', Validators.required],
      mealType: ['', Validators.required],
      image: [null], // This is optional
    });
  }

  // Add this method to check specific field errors
  getFieldError(fieldName: string): string {
    const field = this.recipeForm.get(fieldName);
    if (field && field.invalid && field.touched) {
      if (field.errors?.['required']) {
        return `${fieldName} is required`;
      }
      if (field.errors?.['minlength']) {
        return `${fieldName} is too short`;
      }
      if (field.errors?.['min']) {
        return `${fieldName} must be at least 1`;
      }
    }
    return '';
  }

  // Add this method to see form status
  logFormStatus() {
    console.log('Form valid:', this.recipeForm.valid);
    console.log('Form errors:', this.recipeForm.errors);
    console.log('Form values:', this.recipeForm.value);
    
    // Check each field
    Object.keys(this.recipeForm.controls).forEach(key => {
      const field = this.recipeForm.get(key);
      if (field && field.invalid) {
        console.log(`${key} errors:`, field.errors);
      }
    });
  }

  onClose() {
    this.close.emit();
    this.resetForm();
  }

  onBackdropClick(event: Event) {
    if (event.target === event.currentTarget) {
      this.onClose();
    }
  }

  onImageChange(event: any) {
    const file = event.target.files[0];
    console.log('Selected file:', file);
    if (file) {
      console.log('File details:', {
      name: file.name,
      size: file.size,
      type: file.type
    });
      this.recipeForm.patchValue({
        image: file
      });
    }
    console.log('Form value after image:', this.recipeForm.get('image')?.value);
  }

  private resetForm() {
    this.recipeForm.reset({
      difficulty: 'Medium'
    });
    this.error = '';
    this.loading = false;
  }

  onSubmit() {
  // Debug: Check form status
  this.logFormStatus();

  if (this.recipeForm.invalid) {
    // Mark all fields as touched to show validation errors
    Object.keys(this.recipeForm.controls).forEach(key => {
      this.recipeForm.get(key)?.markAsTouched();
    });
    this.error = 'Please fill in all required fields correctly.';
    return;
  }

  this.loading = true;
  this.error = '';

  const userId = this.authService.getUserId();
  if (!userId) {
    this.error = 'User not authenticated.';
    this.loading = false;
    return;
  }

  const formData = { ...this.recipeForm.value, user_id: userId };

  if (formData.image && formData.image instanceof File) {
    console.log('Uploading image to Cloudinary...');
    this.cloudinaryService.uploadImage(formData.image).subscribe({
      next: (imageUrl) => {
        console.log('Image uploaded to Cloudinary:', imageUrl);
        formData.image = imageUrl; // Replace file with Cloudinary URL
        this.createRecipeWithData(formData);
      },
      error: (err) => {
        console.error('Cloudinary upload failed:', err);
        this.error = 'Failed to upload image. Please try again.';
        this.loading = false;
      }
    });
  } else {
    this.createRecipeWithData(formData);
  }
}

private createRecipeWithData(formData: any) {
  this.recipeService.createRecipe(formData).subscribe({
    next: (response) => {
      console.log('Recipe created successfully:', response);
      this.loading = false;
      // Emit the actual recipe object from the response
      if (response && response.recipe) {
        this.success.emit(response.recipe);
      } else {
        // If response doesn't have recipe property, create a basic recipe object
        const newRecipe: Recipe = {
          recipe_id: response.recipeId || 0,
          user_id: formData.user_id,
          title: formData.title,
          description: formData.description,
          ingredients: formData.ingredients,
          instructions: formData.instructions,
          preparationTime: formData.preparationTime,
          difficulty: formData.difficulty,
          cuisine: formData.cuisine,
          mealType: formData.mealType,
          image: formData.image || '/placeholder.svg',
          createdAt: new Date().toISOString(),
          updatedAt: new Date().toISOString(),
          Comment: ''
        };
        this.success.emit(newRecipe);
      }
      this.onClose();
    },
    error: (err) => {
      console.error('Recipe creation error:', err);
      this.loading = false;
      this.error = 'Failed to create recipe. Please try again.';
    },
  });
}
  // console.log('Submitting recipe:', formData);

  // Use the actual service call instead of setTimeout
  // this.recipeService.createRecipe(formData).subscribe({
  //   next: (response) => {
  //     console.log('Recipe created successfully:', response);
  //     this.loading = false;
  //     this.success.emit();
  //     this.onClose();
  //   },
  //   error: (err) => {
  //     console.error('Recipe creation error:', err);
  //     this.loading = false;
  //     this.error = 'Failed to create recipe. Please try again.';
  //   },
  // });
// }
}


================================================
FILE: recipe-app/src/app/components/edit-recipe-modal/edit-recipe-modal.css
================================================



================================================
FILE: recipe-app/src/app/components/edit-recipe-modal/edit-recipe-modal.html
================================================
@if (isOpen && recipe) {
<!-- Enhanced modal backdrop with better blur and animation -->
<div
  class="fixed inset-0 bg-black/60 backdrop-blur-sm flex items-center justify-center z-[9999] p-4 animate-fade-in"
  (click)="onBackdropClick($event)"
>
  <div
    class="bg-white/95 backdrop-blur-md rounded-3xl shadow-2xl p-8 w-full max-w-3xl max-h-[90vh] overflow-y-auto relative border border-white/20 animate-scale-in"
    (click)="$event.stopPropagation()"
  >
    <!-- Enhanced header with gradient text -->
    <div class="flex justify-between items-center mb-8">
      <div>
        <h2 class="text-3xl font-bold bg-gradient-to-r from-orange-600 via-pink-600 to-rose-600 bg-clip-text text-transparent">
          Edit Recipe
        </h2>
        <div class="w-16 h-1 bg-gradient-to-r from-orange-500 to-pink-500 rounded-full mt-2"></div>
      </div>
      <button
        (click)="onClose()"
        class="text-gray-400 hover:text-gray-600 transition-colors duration-200 p-3 hover:bg-gray-100 rounded-full group"
      >
        <svg class="w-6 h-6 group-hover:scale-110 transition-transform duration-200" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
        </svg>
      </button>
    </div>

    @if (error) {
    <!-- Enhanced error styling -->
    <div class="mb-6 p-4 bg-red-50 border-l-4 border-red-400 text-red-700 rounded-xl shadow-md animate-fade-in">
      <div class="flex items-center">
        <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
        </svg>
        <div>
          <p class="font-semibold">Error:</p>
          <p>{{ error }}</p>
        </div>
      </div>
    </div>
    }

    <!-- Enhanced form with better styling and floating labels -->
    <form [formGroup]="editForm" (ngSubmit)="onSubmit()" class="space-y-6">
      <!-- Recipe Title -->
      <div class="relative">
        <input
          formControlName="title"
          id="title"
          type="text"
          class="peer w-full px-4 py-4 bg-white/80 border-2 border-gray-200 rounded-2xl focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-transparent transition-all duration-300 placeholder-transparent shadow-lg hover:shadow-xl"
          placeholder="Recipe Title"
          [class.border-red-400]="editForm.get('title')?.invalid && editForm.get('title')?.touched"
        />
        <label for="title" class="absolute left-4 -top-2.5 bg-white px-2 text-sm font-medium text-gray-600 transition-all peer-placeholder-shown:text-base peer-placeholder-shown:text-gray-400 peer-placeholder-shown:top-4 peer-focus:-top-2.5 peer-focus:text-sm peer-focus:text-orange-600">
          Recipe Title
        </label>
      </div>

      <!-- Description -->
      <div class="relative">
        <textarea
          formControlName="description"
          id="description"
          rows="3"
          class="peer w-full px-4 py-4 bg-white/80 border-2 border-gray-200 rounded-2xl focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-transparent transition-all duration-300 placeholder-transparent resize-none shadow-lg hover:shadow-xl"
          placeholder="Description"
          [class.border-red-400]="editForm.get('description')?.invalid && editForm.get('description')?.touched"
        ></textarea>
        <label for="description" class="absolute left-4 -top-2.5 bg-white px-2 text-sm font-medium text-gray-600 transition-all peer-placeholder-shown:text-base peer-placeholder-shown:text-gray-400 peer-placeholder-shown:top-4 peer-focus:-top-2.5 peer-focus:text-sm peer-focus:text-orange-600">
          Description
        </label>
      </div>

      <!-- Ingredients -->
      <div class="relative">
        <textarea
          formControlName="ingredients"
          id="ingredients"
          rows="4"
          class="peer w-full px-4 py-4 bg-white/80 border-2 border-gray-200 rounded-2xl focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-transparent transition-all duration-300 placeholder-transparent resize-none shadow-lg hover:shadow-xl"
          placeholder="List ingredients (one per line)"
          [class.border-red-400]="editForm.get('ingredients')?.invalid && editForm.get('ingredients')?.touched"
        ></textarea>
        <label for="ingredients" class="absolute left-4 -top-2.5 bg-white px-2 text-sm font-medium text-gray-600 transition-all peer-placeholder-shown:text-base peer-placeholder-shown:text-gray-400 peer-placeholder-shown:top-4 peer-focus:-top-2.5 peer-focus:text-sm peer-focus:text-orange-600">
          Ingredients (one per line)
        </label>
      </div>

      <!-- Instructions -->
      <div class="relative">
        <textarea
          formControlName="instructions"
          id="instructions"
          rows="5"
          class="peer w-full px-4 py-4 bg-white/80 border-2 border-gray-200 rounded-2xl focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-transparent transition-all duration-300 placeholder-transparent resize-none shadow-lg hover:shadow-xl"
          placeholder="Instructions"
          [class.border-red-400]="editForm.get('instructions')?.invalid && editForm.get('instructions')?.touched"
        ></textarea>
        <label for="instructions" class="absolute left-4 -top-2.5 bg-white px-2 text-sm font-medium text-gray-600 transition-all peer-placeholder-shown:text-base peer-placeholder-shown:text-gray-400 peer-placeholder-shown:top-4 peer-focus:-top-2.5 peer-focus:text-sm peer-focus:text-orange-600">
          Instructions
        </label>
      </div>

      <!-- Enhanced grid for smaller fields with better styling -->
      <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
        <!-- Cuisine -->
        <div class="relative">
          <select
            formControlName="cuisine"
            id="cuisine"
            class="w-full px-4 py-4 bg-white/80 border-2 border-gray-200 rounded-2xl focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-transparent transition-all duration-300 shadow-lg hover:shadow-xl cursor-pointer"
          >
            <option value="">Select cuisine</option>
            <option value="Italian">Italian</option>
            <option value="Chinese">Chinese</option>
            <option value="Mexican">Mexican</option>
            <option value="Indian">Indian</option>
            <option value="French">French</option>
            <option value="American">American</option>
            <option value="Japanese">Japanese</option>
            <option value="Mediterranean">Mediterranean</option>
          </select>
          <label for="cuisine" class="absolute left-4 -top-2.5 bg-white px-2 text-sm font-medium text-orange-600">
            Cuisine
          </label>
        </div>

        <!-- Meal Type -->
        <div class="relative">
          <select
            formControlName="mealType"
            id="mealType"
            class="w-full px-4 py-4 bg-white/80 border-2 border-gray-200 rounded-2xl focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-transparent transition-all duration-300 shadow-lg hover:shadow-xl cursor-pointer"
          >
            <option value="">Select meal type</option>
            <option value="Breakfast">Breakfast</option>
            <option value="Lunch">Lunch</option>
            <option value="Dinner">Dinner</option>
            <option value="Dessert">Dessert</option>
            <option value="Snack">Snack</option>
            <option value="Appetizer">Appetizer</option>
          </select>
          <label for="mealType" class="absolute left-4 -top-2.5 bg-white px-2 text-sm font-medium text-orange-600">
            Meal Type
          </label>
        </div>

        <!-- Preparation Time -->
        <div class="relative">
          <input
            formControlName="preparationTime"
            id="preparationTime"
            type="number"
            min="1"
            class="peer w-full px-4 py-4 bg-white/80 border-2 border-gray-200 rounded-2xl focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-transparent transition-all duration-300 placeholder-transparent shadow-lg hover:shadow-xl"
            placeholder="Preparation Time"
          />
          <label for="preparationTime" class="absolute left-4 -top-2.5 bg-white px-2 text-sm font-medium text-gray-600 transition-all peer-placeholder-shown:text-base peer-placeholder-shown:text-gray-400 peer-placeholder-shown:top-4 peer-focus:-top-2.5 peer-focus:text-sm peer-focus:text-orange-600">
            Preparation Time (minutes)
          </label>
        </div>

        <!-- Difficulty -->
        <div class="relative">
          <select
            formControlName="difficulty"
            id="difficulty"
            class="w-full px-4 py-4 bg-white/80 border-2 border-gray-200 rounded-2xl focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-transparent transition-all duration-300 shadow-lg hover:shadow-xl cursor-pointer"
          >
            <option value="Easy">Easy</option>
            <option value="Medium">Medium</option>
            <option value="Hard">Hard</option>
          </select>
          <label for="difficulty" class="absolute left-4 -top-2.5 bg-white px-2 text-sm font-medium text-orange-600">
            Difficulty
          </label>
        </div>
      </div>

      <!-- Image URL -->
      <div class="relative">
        <input
          formControlName="image"
          id="image"
          type="text"
          class="peer w-full px-4 py-4 bg-white/80 border-2 border-gray-200 rounded-2xl focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-transparent transition-all duration-300 placeholder-transparent shadow-lg hover:shadow-xl"
          placeholder="Image URL"
        />
        <label for="image" class="absolute left-4 -top-2.5 bg-white px-2 text-sm font-medium text-gray-600 transition-all peer-placeholder-shown:text-base peer-placeholder-shown:text-gray-400 peer-placeholder-shown:top-4 peer-focus:-top-2.5 peer-focus:text-sm peer-focus:text-orange-600">
          Image URL (optional)
        </label>
      </div>

      <!-- Enhanced action buttons -->
      <div class="flex justify-end space-x-4 pt-8 border-t border-gray-200">
        <button
          type="button"
          (click)="onClose()"
          class="px-8 py-3 text-sm font-medium text-gray-700 bg-gray-100 rounded-2xl hover:bg-gray-200 transition-all duration-300 shadow-lg hover:shadow-xl transform hover:-translate-y-0.5"
        >
          Cancel
        </button>
        <button
          type="submit"
          [disabled]="editForm.invalid || loading"
          class="px-8 py-3 text-sm font-medium text-white bg-gradient-to-r from-orange-600 to-pink-600 rounded-2xl hover:from-orange-700 hover:to-pink-700 transition-all duration-300 disabled:opacity-50 disabled:cursor-not-allowed shadow-xl hover:shadow-2xl transform hover:-translate-y-0.5"
        >
          @if (loading) {
            <span class="flex items-center">
              <svg class="animate-spin -ml-1 mr-2 h-4 w-4 text-white" fill="none" viewBox="0 0 24 24">
                <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
              </svg>
              Updating...
            </span>
          } @else {
            Update Recipe
          }
        </button>
      </div>
    </form>
  </div>
</div>
}

<style>
@keyframes fade-in {
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}

@keyframes scale-in {
  from {
    opacity: 0;
    transform: scale(0.9);
  }
  to {
    opacity: 1;
    transform: scale(1);
  }
}

.animate-fade-in {
  animation: fade-in 0.3s ease-out forwards;
}

.animate-scale-in {
  animation: scale-in 0.3s ease-out forwards;
}
</style>



================================================
FILE: recipe-app/src/app/components/edit-recipe-modal/edit-recipe-modal.spec.ts
================================================
import { ComponentFixture, TestBed } from '@angular/core/testing';

import {EditRecipeModalComponent } from './edit-recipe-modal';

describe('EditRecipeModal', () => {
  let component: EditRecipeModalComponent;
  let fixture: ComponentFixture<EditRecipeModalComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [EditRecipeModalComponent]
    })
    .compileComponents();

    fixture = TestBed.createComponent(EditRecipeModalComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});



================================================
FILE: recipe-app/src/app/components/edit-recipe-modal/edit-recipe-modal.ts
================================================
// import { Component } from '@angular/core';

// @Component({
//   selector: 'app-edit-recipe-modal',
//   imports: [],
//   templateUrl: './edit-recipe-modal.html',
//   styleUrl: './edit-recipe-modal.css'
// })
// export class EditRecipeModal {

// }


// import { Component, EventEmitter, Input, Output, OnChanges, SimpleChanges } from '@angular/core';
// import { CommonModule } from '@angular/common';
// import { FormBuilder, FormGroup, ReactiveFormsModule, Validators } from '@angular/forms';
// import { RecipeService } from '../../service/recipe-service';
// import { Recipe } from '../../models/interface/recipe.interface';

// @Component({
//   selector: 'app-edit-recipe-modal',
//   standalone: true,
//   imports: [CommonModule, ReactiveFormsModule],
//   templateUrl: './edit-recipe-modal.html',
// })
// export class EditRecipeModalComponent implements OnChanges {
//   @Input() recipe: Recipe | null = null;
//   @Output() close = new EventEmitter<void>();
//   @Output() success = new EventEmitter<Recipe>();

//   editForm: FormGroup;
//   error: string = '';
//   loading = false;

//   constructor(private fb: FormBuilder, private recipeService: RecipeService) {
//     this.editForm = this.fb.group({
//       title: ['', Validators.required],
//       description: ['', Validators.required],
//       // ... other fields
//     });
//   }

//   ngOnChanges(changes: SimpleChanges) {
//     if (changes['recipe'] && this.recipe) {
//       this.editForm.patchValue(this.recipe);
//     }
//   }
  
//   onClose() {
//     this.close.emit();
//   }

//   onSubmit() {
//     // Similar submission logic as the create modal, but calling an update method
//   }
// }


import { Component, EventEmitter, Input, Output, OnChanges } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormBuilder, FormGroup, ReactiveFormsModule, Validators } from '@angular/forms';
import { RecipeService } from '../../service/recipe-service';
import { AuthService } from '../../service/auth-service'; // Fix import path
import { Recipe } from '../../models/interface/recipe.interface';

@Component({
  selector: 'app-edit-recipe-modal',
  standalone: true,
  imports: [CommonModule, ReactiveFormsModule],
  templateUrl: './edit-recipe-modal.html',
})
export class EditRecipeModalComponent implements OnChanges {
  @Input() isOpen = false;
  @Input() recipe: Recipe | null = null;
  @Output() close = new EventEmitter<void>();
  @Output() success = new EventEmitter<Recipe>();

  editForm: FormGroup;
  loading = false;
  error = '';

  constructor(
    private fb: FormBuilder,
    private recipeService: RecipeService,
    private authService: AuthService
  ) {
    this.editForm = this.fb.group({
      title: ['', [Validators.required, Validators.minLength(3)]],
      description: ['', [Validators.required, Validators.minLength(10)]],
      ingredients: ['', Validators.required],
      instructions: ['', [Validators.required, Validators.minLength(10)]],
      preparationTime: ['', [Validators.required, Validators.min(1)]],
      difficulty: ['Medium', Validators.required],
      cuisine: ['', Validators.required],
      mealType: ['', Validators.required],
      image: ['']
    });
  }

  ngOnChanges() {
    if (this.recipe && this.isOpen) {
      // Parse ingredients if they're stored as JSON
      let ingredients: string = this.recipe.ingredients;
      if (typeof ingredients === 'string') {
        try {
          const parsed = JSON.parse(ingredients);
          if (Array.isArray(parsed)) {
            ingredients = (parsed as string[]).join('\n');
          }
          // If not array, keep as string
        } catch {
          // If parsing fails, keep as string
        }
      }
      // No need for else if since ingredients is always string from Recipe interface

      this.editForm.patchValue({
        title: this.recipe.title,
        description: this.recipe.description,
        ingredients: ingredients,
        instructions: this.recipe.instructions,
        preparationTime: this.recipe.preparationTime,
        difficulty: this.recipe.difficulty,
        cuisine: this.recipe.cuisine,
        mealType: this.recipe.mealType,
        image: this.recipe.image || ''
      });
    }
  }

  onClose() {
    this.close.emit();
    this.error = '';
  }

  onBackdropClick(event: Event) {
    if (event.target === event.currentTarget) {
      this.onClose();
    }
  }

  onSubmit() {
    if (this.editForm.invalid || !this.recipe) {
      Object.keys(this.editForm.controls).forEach(key => {
        this.editForm.get(key)?.markAsTouched();
      });
      return;
    }

    this.loading = true;
    this.error = '';

    const formData = { ...this.editForm.value };
    
    // Convert ingredients back to array format
    if (typeof formData.ingredients === 'string') {
      formData.ingredients = formData.ingredients
        .split('\n')
        .map((ingredient: string) => ingredient.trim())
        .filter((ingredient: string) => ingredient.length > 0);
    }

    this.recipeService.updateRecipe(this.recipe.recipe_id, formData).subscribe({
      next: (updatedRecipe) => {
        this.loading = false;
        this.success.emit(updatedRecipe);
        this.onClose();
      },
      error: (err) => {
        this.loading = false;
        this.error = 'Failed to update recipe. Please try again.';
        console.error('Update error:', err);
      }
    });
  }
}


================================================
FILE: recipe-app/src/app/components/navbar/navbar.css
================================================
/* Mobile menu animations */
.mobile-menu {
  transition: all 0.3s ease-in-out;
}

.mobile-menu.hidden {
  opacity: 0;
  transform: translateY(-10px);
}

.mobile-menu:not(.hidden) {
  opacity: 1;
  transform: translateY(0);
}

/* Ensure proper z-index for mobile menu */
.mobile-menu {
  z-index: 40;
}

/* Smooth transitions for mobile menu button */
.mobile-menu-button {
  transition: all 0.2s ease-in-out;
}

.mobile-menu-button:hover {
  background-color: rgba(0, 0, 0, 0.05);
}

/* Mobile search input focus styles */
@media (max-width: 768px) {
  .mobile-search input:focus {
    box-shadow: 0 0 0 2px rgba(99, 102, 241, 0.2);
  }

  /* Mobile search dropdown positioning */
  .mobile-search .absolute {
    position: absolute;
    top: 100%;
    left: 0;
    right: 0;
    z-index: 1000; /* Much higher z-index for mobile dropdown to appear above page content */
  }

  /* Ensure mobile search dropdown appears above other mobile menu items */
  .mobile-menu .mobile-search {
    position: relative;
    z-index: 50;
  }
}

/* Search dropdown z-index fix for both desktop and mobile */
.search-dropdown-overlay {
  z-index: 1000; /* High z-index to appear above all page content */
}



================================================
FILE: recipe-app/src/app/components/navbar/navbar.html
================================================
<nav class="bg-white/90 shadow-xl w-full fixed top-0 left-0 z-50 backdrop-blur-md border-b border-white/20 transition-all duration-300">
  <div class="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8">
    <div class="flex h-16 items-center justify-between">
      <!-- Enhanced logo with animation and gradient text -->
      <a routerLink="/" class="flex items-center space-x-2 sm:space-x-3 group">
        <div class="relative">
          <img src="chef-hat-svgrepo-com.svg" alt="Logo" class="h-8 w-8 transition-transform duration-300 group-hover:scale-110 group-hover:rotate-12"/>
          <div class="absolute inset-0 bg-gradient-to-r from-indigo-500 to-purple-500 rounded-full opacity-0 group-hover:opacity-20 transition-opacity duration-300"></div>
        </div>
        <span class="text-xl sm:text-2xl font-bold bg-gradient-to-r from-indigo-600 to-purple-600 bg-clip-text text-transparent group-hover:from-purple-600 group-hover:to-indigo-600 transition-all duration-300">Recipe Hub</span>
      </a>

      <!-- Enhanced desktop search bar with glass effect -->
      <div class="hidden md:flex flex-1 px-8">
        <div class="relative max-w-lg w-full">
          <div class="absolute inset-y-0 left-0 flex items-center pl-4 pointer-events-none">
            <svg class="w-5 h-5 text-gray-400 transition-colors duration-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
            </svg>
          </div>
          <input
            type="text"
            placeholder="Search recipes..."
            class="w-full rounded-2xl border-0 bg-white/80 backdrop-blur-sm pl-12 pr-4 py-3 focus:bg-white focus:ring-2 focus:ring-indigo-500 focus:outline-none transition-all duration-300 shadow-lg hover:shadow-xl text-gray-700 placeholder-gray-500"
            [(ngModel)]="searchQuery"
            (input)="onSearchInput()"
            (focus)="showDropdown = true"
            (blur)="onSearchBlur()"
          />

          @if (showDropdown && searchResults.length > 0) {
            <!-- Enhanced dropdown with glass effect and animations -->
            <div class="absolute left-0 right-0 mt-3 overflow-hidden rounded-2xl border-0 bg-white/95 backdrop-blur-md shadow-2xl search-dropdown-overlay animate-fade-in-up">
              @for (result of searchResults; track result.recipe_id) {
                <a
                  [routerLink]="['/recipe', result.recipe_id]"
                  class="flex items-center space-x-4 p-4 hover:bg-gradient-to-r hover:from-indigo-50 hover:to-purple-50 cursor-pointer transition-all duration-300 border-b border-gray-100 last:border-b-0 group"
                  (click)="closeDropdown()"
                >
                  <img
                    [src]="result.image || 'placeholder.svg'"
                    [alt]="result.title"
                    class="h-12 w-12 sm:h-16 sm:w-16 rounded-xl object-cover shadow-md group-hover:shadow-lg transition-shadow duration-300"
                  />
                  <div class="flex-1 min-w-0">
                    <h3 class="font-semibold text-gray-900 truncate group-hover:text-indigo-600 transition-colors duration-300">{{ result.title }}</h3>
                    <p class="text-sm text-gray-500 truncate">{{ result.description }}</p>
                    <p class="text-xs text-indigo-600 font-medium">{{ result.cuisine }} • {{ result.preparationTime }} mins</p>
                  </div>
                </a>
              }
            </div>
          }
        </div>
      </div>

      <!-- Enhanced desktop actions with improved buttons -->
      <div class="hidden md:flex items-center space-x-4">
        @if (currentUser()) {
          <!-- Enhanced Create Recipe Button -->
          <button
            (click)="openCreateRecipeModal()"
            class="inline-flex items-center justify-center space-x-2 rounded-2xl bg-gradient-to-r from-green-500 to-emerald-600 px-4 sm:px-6 py-3 text-sm font-semibold text-white transition-all duration-300 hover:from-green-600 hover:to-emerald-700 hover:scale-105 hover:shadow-xl shadow-lg group"
          >
            <svg class="w-4 h-4 group-hover:rotate-90 transition-transform duration-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
            </svg>
            <span class="hidden sm:inline">Create Recipe</span>
          </button>

          <!-- Enhanced User Dropdown -->
          <div class="relative">
            <button (click)="toggleDropdown()" class="flex items-center space-x-2 rounded-2xl bg-white/80 backdrop-blur-sm px-4 sm:px-6 py-3 text-sm font-semibold text-gray-700 hover:bg-white hover:shadow-lg transition-all duration-300 border border-gray-200 group">
              <span class="hidden sm:inline group-hover:text-indigo-600 transition-colors duration-300">{{ username() }}</span>
              <svg class="w-4 h-4 group-hover:text-indigo-600 transition-all duration-300" [class.rotate-180]="isDropdownOpen" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
              </svg>
            </button>

            @if (isDropdownOpen) {
              <!-- Enhanced user dropdown with glass effect -->
              <div class="absolute right-0 mt-3 w-56 overflow-hidden rounded-2xl border-0 bg-white/95 backdrop-blur-md shadow-2xl z-50 animate-fade-in-up">
                <a (click)="navigateToMyRecipes()" class="cursor-pointer flex items-center space-x-3 px-6 py-4 text-sm text-gray-700 hover:bg-gradient-to-r hover:from-indigo-50 hover:to-purple-50 hover:text-indigo-600 transition-all duration-300 group">
                  <svg class="w-5 h-5 group-hover:scale-110 transition-transform duration-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                  </svg>
                  <span class="font-medium">My Recipes</span>
                </a>
                <button (click)="logout()" class="flex w-full items-center space-x-3 px-6 py-4 text-sm text-red-600 hover:bg-red-50 hover:text-red-700 transition-all duration-300 group">
                  <svg class="w-5 h-5 group-hover:scale-110 transition-transform duration-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1"></path>
                  </svg>
                  <span class="font-medium">Logout</span>
                </button>
              </div>
            }
          </div>
        } @else {
          <!-- Enhanced login button -->
          <a routerLink="/login" class="inline-flex items-center justify-center rounded-2xl bg-gradient-to-r from-indigo-600 to-purple-600 px-6 py-3 text-sm font-semibold text-white transition-all duration-300 hover:from-indigo-700 hover:to-purple-700 hover:scale-105 hover:shadow-xl shadow-lg">
            Login
          </a>
        }
      </div>

      <!-- Enhanced mobile menu button -->
      <div class="md:hidden">
        <button
          (click)="toggleMobileMenu()"
          class="mobile-menu-button inline-flex items-center justify-center p-3 rounded-2xl text-gray-700 hover:text-indigo-600 hover:bg-white/80 focus:outline-none focus:ring-2 focus:ring-inset focus:ring-indigo-500 transition-all duration-300 backdrop-blur-sm"
        >
          <svg class="block h-6 w-6 transition-transform duration-300" [class.rotate-90]="isMobileMenuOpen" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path *ngIf="!isMobileMenuOpen" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path>
            <path *ngIf="isMobileMenuOpen" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
          </svg>
        </button>
      </div>
    </div>

    <!-- Enhanced Mobile Menu with glass effect -->
    <div class="md:hidden mobile-menu" [class.hidden]="!isMobileMenuOpen">
      <div class="px-4 pt-4 pb-6 space-y-3 bg-white/95 backdrop-blur-md border-t border-gray-200 shadow-xl rounded-b-2xl mx-4">
        <!-- Enhanced Mobile Search -->
        <div class="px-2 py-3 mobile-search">
          <div class="relative">
            <div class="absolute inset-y-0 left-0 flex items-center pl-4 pointer-events-none">
              <svg class="w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
              </svg>
            </div>
            <input
              type="text"
              placeholder="Search recipes..."
              class="w-full rounded-2xl border-0 bg-gray-50 pl-12 pr-4 py-3 focus:bg-white focus:ring-2 focus:ring-indigo-500 focus:outline-none transition-all duration-300 shadow-md"
              [(ngModel)]="searchQuery"
              (input)="onSearchInput()"
              (focus)="showDropdown = true"
              (blur)="onSearchBlur()"
            />

            @if (showDropdown && searchResults.length > 0) {
              <div class="absolute left-0 right-0 mt-2 overflow-hidden rounded-2xl border-0 bg-white shadow-2xl search-dropdown-overlay max-h-60 overflow-y-auto">
                @for (result of searchResults; track result.recipe_id) {
                  <a
                    [routerLink]="['/recipe', result.recipe_id]"
                    class="flex items-center space-x-3 p-4 hover:bg-gradient-to-r hover:from-indigo-50 hover:to-purple-50 cursor-pointer border-b border-gray-100 last:border-b-0 transition-all duration-300"
                    (click)="closeDropdown(); closeMobileMenu()"
                  >
                    <img
                      [src]="result.image || 'placeholder.svg'"
                      [alt]="result.title"
                      class="h-12 w-12 rounded-xl object-cover flex-shrink-0 shadow-md"
                    />
                    <div class="flex-1 min-w-0">
                      <h3 class="font-semibold text-gray-900 text-sm truncate">{{ result.title }}</h3>
                      <p class="text-xs text-gray-500 truncate">{{ result.description }}</p>
                      <p class="text-xs text-indigo-600 font-medium">{{ result.cuisine }} • {{ result.preparationTime }} mins</p>
                    </div>
                  </a>
                }
              </div>
            }
          </div>
        </div>

        @if (currentUser()) {
          <!-- Enhanced Mobile Create Recipe Button -->
          <button
            (click)="openCreateRecipeModal(); closeMobileMenu()"
            class="flex items-center space-x-3 w-full px-4 py-3 text-base font-semibold text-gray-700 hover:text-indigo-600 hover:bg-gradient-to-r hover:from-indigo-50 hover:to-purple-50 rounded-2xl transition-all duration-300"
          >
            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
            </svg>
            <span>Create Recipe</span>
          </button>

          <!-- Enhanced Mobile User Menu -->
          <div class="border-t border-gray-200 pt-3 mt-3">
            <div class="px-4 py-2 text-sm font-semibold text-indigo-600 bg-gradient-to-r from-indigo-50 to-purple-50 rounded-2xl">
              {{ username() }}
            </div>
            <a
              (click)="navigateToMyRecipes(); closeMobileMenu()"
              class="flex items-center space-x-3 px-4 py-3 text-base font-medium text-gray-700 hover:text-indigo-600 hover:bg-gradient-to-r hover:from-indigo-50 hover:to-purple-50 rounded-2xl cursor-pointer transition-all duration-300 mt-2"
            >
              <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
              </svg>
              <span>My Recipes</span>
            </a>
            <button
              (click)="logout(); closeMobileMenu()"
              class="flex items-center space-x-3 w-full px-4 py-3 text-base font-medium text-red-600 hover:text-red-700 hover:bg-red-50 rounded-2xl transition-all duration-300 mt-2"
            >
              <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013 3v1"></path>
              </svg>
              <span>Logout</span>
            </button>
          </div>
        } @else {
          <a
            routerLink="/login"
            (click)="closeMobileMenu()"
            class="flex items-center space-x-3 px-4 py-3 text-base font-semibold text-indigo-600 hover:text-indigo-700 hover:bg-gradient-to-r hover:from-indigo-50 hover:to-purple-50 rounded-2xl transition-all duration-300"
          >
            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 16l-4-4m0 0l4-4m-4 4h14m-5 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1"></path>
            </svg>
            <span>Login</span>
          </a>
        }
      </div>
    </div>
  </div>

  
</nav>

<!-- Create Recipe Modal -->
  <app-create-recipe-modal
    [isOpen]="isCreateRecipeModalOpen"
    (close)="closeCreateRecipeModal()"
    (success)="onRecipeCreated($event)"
  ></app-create-recipe-modal>



================================================
FILE: recipe-app/src/app/components/navbar/navbar.spec.ts
================================================
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { NavbarComponent } from './navbar';

describe('Navbar', () => {
  let component: NavbarComponent;
  let fixture: ComponentFixture<NavbarComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [NavbarComponent]
    })
    .compileComponents();

    fixture = TestBed.createComponent(NavbarComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});



================================================
FILE: recipe-app/src/app/components/navbar/navbar.ts
================================================
// import { Component } from '@angular/core';

// @Component({
//   selector: 'app-navbar',
//   imports: [],
//   templateUrl: './navbar.html',
//   styleUrl: './navbar.css'
// })
// export class Navbar {

// }


// import { Component, computed } from '@angular/core';
// import { CommonModule } from '@angular/common';
// import { Router, RouterModule } from '@angular/router';
// import { AuthService } from '../../service/auth-service';

// @Component({
//   selector: 'app-navbar',
//   standalone: true,
//   imports: [CommonModule, RouterModule],
//    templateUrl: './navbar.html',
//   styleUrls: ['./navbar.css']
// })
// export class NavbarComponent {
//   currentUser;
//   username;
//   isDropdownOpen = false;

//   constructor(private authService: AuthService, private router: Router) {
//     this.currentUser = this.authService.currentUser;
//     this.username = computed(() => this.currentUser()?.username);
//   }

//   toggleDropdown() {
//     this.isDropdownOpen = !this.isDropdownOpen;
//   }

//   logout() {
//     this.authService.logout();
//     this.isDropdownOpen = false;
//   }

//   navigateToMyRecipes() {
//     this.router.navigate(['/my-recipes']);
//     this.isDropdownOpen = false;
//   }
// }


// import { Component, inject, signal } from '@angular/core';
// import { CommonModule } from '@angular/common';
// import { RouterModule, Router } from '@angular/router';
// import { FormsModule } from '@angular/forms'; // Add this import
// import { CreateRecipeModalComponent } from '../create-recipe-modal/create-recipe-modal';

// interface Recipe {
//   recipe_id: number;
//   title: string;
//   description: string;
//   image?: string;
//   cuisine: string;
//   preparationTime: number;
//   difficulty: string;
// }

// @Component({
//   selector: 'app-navbar',
//   standalone: true,
//   imports: [CommonModule, RouterModule, FormsModule, CreateRecipeModalComponent], // Add FormsModule
//   templateUrl: './navbar.html',
//   styleUrls: ['./navbar.css']
// })
// export class NavbarComponent {
//   private router = inject(Router);
  
//   // Existing properties
//   currentUser = signal(null); // Replace with your actual user service
//   username = signal('User'); // Replace with actual username
//   isDropdownOpen = false;
  
//   // Search properties
//   searchQuery = '';
//   showDropdown = false;
//   searchResults: Recipe[] = [];
//   private searchTimeout: any;

//   isCreateRecipeModalOpen = false;

//   // Mock data - replace with your actual recipe service
//   private allRecipes: Recipe[] = [
//     {
//       recipe_id: 1,
//       title: 'Classic Margherita Pizza',
//       description: 'A traditional Italian pizza with fresh tomatoes, mozzarella, and basil',
//       cuisine: 'Italian',
//       preparationTime: 25,
//       difficulty: 'Medium',
//       image: 'pizza.jpg'
//     },
//     {
//       recipe_id: 2,
//       title: 'Chicken Teriyaki Bowl',
//       description: 'Tender glazed chicken served over steamed rice with vegetables',
//       cuisine: 'Japanese',
//       preparationTime: 30,
//       difficulty: 'Easy',
//       image: 'teriyaki.jpg'
//     }
//     // Add more recipes as needed
//   ];

//   toggleDropdown() {
//     this.isDropdownOpen = !this.isDropdownOpen;
//   }

//   navigateToMyRecipes() {
//     this.router.navigate(['/my-recipes']);
//     this.isDropdownOpen = false;
//   }

//   logout() {
//     // Add your logout logic here
//     this.isDropdownOpen = false;
//   }

//    openCreateRecipeModal() {
//     this.isCreateRecipeModalOpen = true;
//     // Close user dropdown if it's open
//     this.isDropdownOpen = false;
//   }

//   closeCreateRecipeModal() {
//     this.isCreateRecipeModalOpen = false;
//   }

//   onRecipeCreated() {
//     // Handle successful recipe creation
//     console.log('Recipe created successfully!');
//     // You might want to:
//     // 1. Show a success message
//     // 2. Refresh the recipes list
//     // 3. Navigate to the new recipe
//     // 4. Update the search results
//     this.closeCreateRecipeModal();
//   }

//   // Search functionality
//   onSearchInput() {
//     // Clear previous timeout
//     if (this.searchTimeout) {
//       clearTimeout(this.searchTimeout);
//     }

//     // Debounce search for better performance
//     this.searchTimeout = setTimeout(() => {
//       this.performSearch();
//     }, 300);
//   }

//   performSearch() {
//     if (this.searchQuery.trim().length === 0) {
//       this.searchResults = [];
//       this.showDropdown = false;
//       return;
//     }

//     // Filter recipes based on search query
//     const query = this.searchQuery.toLowerCase();
//     this.searchResults = this.allRecipes.filter(recipe =>
//       recipe.title.toLowerCase().includes(query) ||
//       recipe.description.toLowerCase().includes(query) ||
//       recipe.cuisine.toLowerCase().includes(query)
//     ).slice(0, 5); // Limit to 5 results

//     this.showDropdown = this.searchResults.length > 0;
//   }

//   onSearchBlur() {
//     // Delay hiding dropdown to allow click events on results
//     setTimeout(() => {
//       this.showDropdown = false;
//     }, 200);
//   }

//   closeDropdown() {
//     this.showDropdown = false;
//     this.searchQuery = '';
//     this.searchResults = [];
//   }
// }

import { Component, inject, OnInit, OnDestroy, computed } from '@angular/core';
import { CommonModule } from '@angular/common';
import { RouterModule, Router } from '@angular/router';
import { FormsModule } from '@angular/forms';
import { CreateRecipeModalComponent } from '../create-recipe-modal/create-recipe-modal';
import { AuthService } from '../../service/auth-service'; // Import your existing AuthService
import { RecipeEventsService } from '../../service/recipe-events.service';
import { RecipeService } from '../../service/recipe-service'; // Import RecipeService
import { Recipe } from '../../models/interface/recipe.interface';

@Component({
  selector: 'app-navbar',
  standalone: true,
  imports: [CommonModule, RouterModule, FormsModule, CreateRecipeModalComponent],
  templateUrl: './navbar.html',
  styleUrls: ['./navbar.css']
})
export class NavbarComponent implements OnInit {
  private router = inject(Router);
  private authService = inject(AuthService); // Inject your existing AuthService
  private recipeEventsService = inject(RecipeEventsService);
  private recipeService = inject(RecipeService); // Inject RecipeService
  
  // Use computed signals to reactively get auth state
  currentUser = computed(() => this.authService.currentUser());
  username = computed(() => {
    const user = this.authService.currentUser();
    return user ? (user.username || user.fullname || user.email || 'User') : '';
  });
  
  isDropdownOpen = false;
  
  // Search properties
  searchQuery = '';
  showDropdown = false;
  searchResults: Recipe[] = [];
  private searchTimeout: any;

  // Create Recipe Modal properties
  isCreateRecipeModalOpen = false;

  // Mobile menu properties
  isMobileMenuOpen = false;



  ngOnInit() {
    // No need for manual subscription since we're using computed signals
    // The navbar will automatically update when authService.currentUser() changes
  }

  toggleDropdown() {
    this.isDropdownOpen = !this.isDropdownOpen;
  }

  navigateToMyRecipes() {
    this.router.navigate(['/my-recipes']);
    this.isDropdownOpen = false;
  }

  logout() {
    this.authService.logout(); // This will automatically update the signals
    this.isDropdownOpen = false;
  }

  // Create Recipe Modal methods
  openCreateRecipeModal() {
    this.isCreateRecipeModalOpen = true;
    this.isDropdownOpen = false;
  }

  closeCreateRecipeModal() {
    this.isCreateRecipeModalOpen = false;
  }

  onRecipeCreated(newRecipe: Recipe) {
    console.log('Recipe created successfully:', newRecipe);
    this.closeCreateRecipeModal();
    // Emit event to notify other components about the new recipe
    this.recipeEventsService.emitRecipeCreated(newRecipe);
  }

  // Search functionality
  onSearchInput() {
    if (this.searchTimeout) {
      clearTimeout(this.searchTimeout);
    }

    this.searchTimeout = setTimeout(() => {
      this.performSearch();
    }, 300);
  }

  performSearch() {
    if (this.searchQuery.trim().length === 0) {
      this.searchResults = [];
      this.showDropdown = false;
      return;
    }

    // Use the actual recipe service to search
    this.recipeService.searchRecipes(this.searchQuery.trim()).subscribe({
      next: (results: Recipe[]) => {
        this.searchResults = results.slice(0, 5); // Limit to 5 results
        this.showDropdown = this.searchResults.length > 0;
      },
      error: (error) => {
        console.error('Search error:', error);
        this.searchResults = [];
        this.showDropdown = false;
      }
    });
  }

  onSearchBlur() {
    setTimeout(() => {
      this.showDropdown = false;
    }, 200);
  }

  closeDropdown() {
    this.showDropdown = false;
    this.searchQuery = '';
    this.searchResults = [];
  }

  // Enhanced mobile menu close that also closes search dropdown
  closeMobileMenu() {
    this.isMobileMenuOpen = false;
    // Also close search dropdown when closing mobile menu
    this.showDropdown = false;
    this.searchQuery = '';
    this.searchResults = [];
  }

  // Mobile menu methods
  toggleMobileMenu() {
    this.isMobileMenuOpen = !this.isMobileMenuOpen;
  }
}



================================================
FILE: recipe-app/src/app/guards/auth-guard-guard.spec.ts
================================================
import { TestBed } from '@angular/core/testing';
import { CanActivateFn } from '@angular/router';

import { authGuard } from './auth-guard-guard';

describe('authGuardGuard', () => {
  const executeGuard: CanActivateFn = (...guardParameters) => 
      TestBed.runInInjectionContext(() => authGuard(...guardParameters));

  beforeEach(() => {
    TestBed.configureTestingModule({});
  });

  it('should be created', () => {
    expect(executeGuard).toBeTruthy();
  });
});



================================================
FILE: recipe-app/src/app/guards/auth-guard-guard.ts
================================================
// import { CanActivateFn } from '@angular/router';

// export const authGuardGuard: CanActivateFn = (route, state) => {
//   return true;
// };


import { inject } from '@angular/core';
import { CanActivateFn, Router } from '@angular/router';
import { AuthService } from '../service/auth-service';

export const authGuard: CanActivateFn = (route, state) => {
  const authService = inject(AuthService);
  const router = inject(Router);

  if (authService.isAuthenticated()) {
    return true;
  }

  // Redirect to the login page
  return router.createUrlTree(['/login']);
};


================================================
FILE: recipe-app/src/app/models/interface/recipe.interface.ts
================================================
export interface Comment {
  comment_id: number;
  recipe_id: number;
  user_id: number;
  content: string;
  username?: string; // Username of the user who made the comment (optional)
  createdAt: string;
  updatedAt: string;
}

export interface Recipe {
  recipe_id: number;
  user_id: number;
  title: string;
  description: string;
  ingredients: string; // Or string[] depending on backend
  instructions: string;
  preparationTime: number;
  Comment: string;
  difficulty: 'Easy' | 'Medium' | 'Hard';
  image: string;
  cuisine: string;
  mealType: string;
  createdAt: string;
  updatedAt: string;
  userRating?: number; // Optional property for user's rating
}



================================================
FILE: recipe-app/src/app/models/interface/user.interface.ts
================================================
export interface User {
  id: number;
  username: string;
  email: string;
  fullname: string;
}

export interface AuthResponse {
  user: User;
  token: string;
}

export interface DecodedToken {
  id: number;
  exp: number;
  iat: number;
}


================================================
FILE: recipe-app/src/app/page/create-recipe/create-recipe.css
================================================



================================================
FILE: recipe-app/src/app/page/create-recipe/create-recipe.html
================================================
<p>create-recipe works!</p>



================================================
FILE: recipe-app/src/app/page/create-recipe/create-recipe.spec.ts
================================================
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { CreateRecipeComponent } from './create-recipe';

describe('CreateRecipe', () => {
  let component: CreateRecipeComponent;
  let fixture: ComponentFixture<CreateRecipeComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [CreateRecipeComponent]
    })
    .compileComponents();

    fixture = TestBed.createComponent(CreateRecipeComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});



================================================
FILE: recipe-app/src/app/page/create-recipe/create-recipe.ts
================================================
// import { Component } from '@angular/core';

// @Component({
//   selector: 'app-create-recipe',
//   imports: [],
//   templateUrl: './create-recipe.html',
//   styleUrl: './create-recipe.css'
// })
// export class CreateRecipe {

// }

import { Component } from '@angular/core';
import { CommonModule } from '@angular/common';
import { CreateRecipeModalComponent } from '../../components/create-recipe-modal/create-recipe-modal';

@Component({
  selector: 'app-create-recipe',
  standalone: true,
  imports: [CommonModule, CreateRecipeModalComponent],
  template: `
    <app-create-recipe-modal 
      [isOpen]="true" 
      (close)="onModalClose()" 
      (success)="onSuccess()">
    </app-create-recipe-modal>
  `
})
export class CreateRecipeComponent {
  // In a real app, you might have a dedicated page for this
  // or a button that opens the modal.
  // This is a simple wrapper to show the modal via routing.
  
  onModalClose() {
    // Navigate back or to another page
    window.history.back();
  }

  onSuccess() {
    // Handle success, e.g., navigate to 'my-recipes'
    window.history.back();
  }
}


================================================
FILE: recipe-app/src/app/page/home/home.css
================================================



================================================
FILE: recipe-app/src/app/page/home/home.html
================================================
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Infinite Moving Recipe Cards</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
      @keyframes scroll {
        0% {
          transform: translateX(0);
        }
        100% {
          transform: translateX(-100%);
        }
      }

      @keyframes fadeInUp {
        0% {
          opacity: 0;
          transform: translateY(30px);
        }
        100% {
          opacity: 1;
          transform: translateY(0);
        }
      }

      @keyframes slideInLeft {
        0% {
          opacity: 0;
          transform: translateX(-50px);
        }
        100% {
          opacity: 1;
          transform: translateX(0);
        }
      }

      @keyframes float {
        0%, 100% {
          transform: translateY(0px);
        }
        50% {
          transform: translateY(-10px);
        }
      }

      @keyframes shimmer {
        0% {
          background-position: -200% 0;
        }
        100% {
          background-position: 200% 0;
        }
      }

      @keyframes pulse-glow {
        0%, 100% {
          box-shadow: 0 0 20px rgba(99, 102, 241, 0.3);
        }
        50% {
          box-shadow: 0 0 30px rgba(99, 102, 241, 0.6);
        }
      }

      .animate-scroll {
        animation: scroll 30s linear infinite;
      }

      .animate-scroll:hover {
        animation-play-state: paused;
      }

      .scrolling-container:hover .animate-scroll {
        animation-play-state: paused;
      }

      .animate-fade-in-up {
        animation: fadeInUp 0.8s ease-out forwards;
      }

      .animate-slide-in-left {
        animation: slideInLeft 0.6s ease-out forwards;
      }

      .animate-float {
        animation: float 3s ease-in-out infinite;
      }

      .shimmer-effect {
        background: linear-gradient(90deg, transparent, rgba(255,255,255,0.4), transparent);
        background-size: 200% 100%;
        animation: shimmer 2s infinite;
      }

      .pulse-glow {
        animation: pulse-glow 2s ease-in-out infinite;
      }

      .card-hover-effect {
        transition: all 0.4s cubic-bezier(0.175, 0.885, 0.32, 1.275);
      }

      .card-hover-effect:hover {
        transform: translateY(-8px) scale(1.02);
        box-shadow: 0 20px 40px rgba(0, 0, 0, 0.15);
      }

      .gradient-text {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
      }

      .glass-effect {
        background: rgba(255, 255, 255, 0.95);
        backdrop-filter: blur(10px);
        border: 1px solid rgba(255, 255, 255, 0.2);
      }

      .stagger-animation {
        opacity: 0;
        animation: fadeInUp 0.8s ease-out forwards;
      }

      .stagger-animation:nth-child(1) { animation-delay: 0.1s; }
      .stagger-animation:nth-child(2) { animation-delay: 0.2s; }
      .stagger-animation:nth-child(3) { animation-delay: 0.3s; }
      .stagger-animation:nth-child(4) { animation-delay: 0.4s; }
      .stagger-animation:nth-child(5) { animation-delay: 0.5s; }
      .stagger-animation:nth-child(6) { animation-delay: 0.6s; }
      .stagger-animation:nth-child(7) { animation-delay: 0.7s; }
      .stagger-animation:nth-child(8) { animation-delay: 0.8s; }

      .hero-gradient {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 50%, #f093fb 100%);
      }
    </style>
  </head>
  <body class="min-h-screen w-full relative overflow-hidden hero-gradient">
    <!-- Enhanced background with animated gradient and floating elements -->
    <div class="absolute inset-0 overflow-hidden">
      <div class="absolute -top-40 -right-40 w-80 h-80 bg-white/10 rounded-full animate-float"></div>
      <div class="absolute -bottom-40 -left-40 w-96 h-96 bg-white/5 rounded-full animate-float" style="animation-delay: -1s;"></div>
      <div class="absolute top-1/2 left-1/4 w-32 h-32 bg-white/5 rounded-full animate-float" style="animation-delay: -2s;"></div>
    </div>

    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12 relative z-10">
      <!-- Enhanced title with gradient text and slide-in animation -->
      <h2 class="text-4xl md:text-5xl font-bold gradient-text mt-8 mb-12 text-center animate-slide-in-left">
        Featured Recipes
        <div class="w-24 h-1 bg-gradient-to-r from-indigo-500 to-purple-600 mx-auto mt-4 rounded-full"></div>
      </h2>

      <!-- Infinite Moving Cards Container -->
      <div class="relative overflow-hidden scrolling-container mb-16">
        <!-- Enhanced arrow buttons with glass effect and better hover states -->
        <button
          (click)="scrollLeft()"
          class="absolute left-4 top-1/2 transform -translate-y-1/2 z-20 glass-effect hover:bg-white/100 rounded-full p-4 shadow-xl transition-all duration-300 hover:scale-110 pulse-glow"
        >
          <svg class="w-6 h-6 text-gray-700" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
          </svg>
        </button>

        <button
          (click)="scrollRight()"
          class="absolute right-4 top-1/2 transform -translate-y-1/2 z-20 glass-effect hover:bg-white/100 rounded-full p-4 shadow-xl transition-all duration-300 hover:scale-110 pulse-glow"
        >
          <svg class="w-6 h-6 text-gray-700" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
          </svg>
        </button>

        <!-- Enhanced gradient overlays -->
        <div class="absolute left-0 top-0 w-32 h-full bg-gradient-to-r from-indigo-500/20 to-transparent z-10 pointer-events-none"></div>
        <div class="absolute right-0 top-0 w-32 h-full bg-gradient-to-l from-purple-500/20 to-transparent z-10 pointer-events-none"></div>

        <!-- Moving cards wrapper -->
        <div class="flex animate-scroll">
          <!-- First set of cards -->
          <div class="flex space-x-8">
            <!-- Enhanced Breakfast Card with glass effect and improved styling -->
            <div
              class="flex-shrink-0 w-80 glass-effect rounded-2xl shadow-2xl overflow-hidden cursor-pointer card-hover-effect group"
              (click)="navigateToMealType('Breakfast')"
            >
              <div class="relative h-48 overflow-hidden">
                <img src="breakfast.jpeg" alt="Breakfast" class="w-full h-full object-cover transition-transform duration-500 group-hover:scale-110" />
                <div class="absolute inset-0 bg-gradient-to-t from-black/20 to-transparent"></div>
                <div class="absolute top-4 right-4 bg-gradient-to-r from-orange-500 to-red-500 text-white px-4 py-2 rounded-full text-sm font-semibold shadow-lg">
                  Meal Type
                </div>
                <div class="absolute inset-0 shimmer-effect opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
              </div>
              <div class="p-6">
                <h3 class="text-xl font-bold text-gray-800 mb-3 group-hover:text-orange-600 transition-colors duration-300">Breakfast</h3>
                <p class="text-gray-600 line-clamp-2 mb-4 leading-relaxed">
                  Start your day right with energizing and delicious breakfast ideas.
                </p>
                <div class="flex justify-between items-center">
                  <span class="text-sm text-gray-500 font-medium">Varied Options</span>
                  <span class="px-3 py-1 bg-gradient-to-r from-orange-400 to-red-400 text-white rounded-full text-sm font-semibold shadow-md">Morning</span>
                </div>
              </div>
            </div>

            <!-- Enhanced Lunch Card -->
            <div
              class="flex-shrink-0 w-80 glass-effect rounded-2xl shadow-2xl overflow-hidden cursor-pointer card-hover-effect group"
              (click)="navigateToMealType('Lunch')"
            >
              <div class="relative h-48 overflow-hidden">
                <img src="lunch.jpeg" alt="Lunch" class="w-full h-full object-cover transition-transform duration-500 group-hover:scale-110" />
                <div class="absolute inset-0 bg-gradient-to-t from-black/20 to-transparent"></div>
                <div class="absolute top-4 right-4 bg-gradient-to-r from-green-500 to-teal-500 text-white px-4 py-2 rounded-full text-sm font-semibold shadow-lg">
                  Meal Type
                </div>
                <div class="absolute inset-0 shimmer-effect opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
              </div>
              <div class="p-6">
                <h3 class="text-xl font-bold text-gray-800 mb-3 group-hover:text-green-600 transition-colors duration-300">Lunch</h3>
                <p class="text-gray-600 line-clamp-2 mb-4 leading-relaxed">
                  Quick and satisfying meals perfect for your midday break.
                </p>
                <div class="flex justify-between items-center">
                  <span class="text-sm text-gray-500 font-medium">Varied Options</span>
                  <span class="px-3 py-1 bg-gradient-to-r from-green-400 to-teal-400 text-white rounded-full text-sm font-semibold shadow-md">Noon</span>
                </div>
              </div>
            </div>

            <!-- Enhanced Dinner Card -->
            <div
              class="flex-shrink-0 w-80 glass-effect rounded-2xl shadow-2xl overflow-hidden cursor-pointer card-hover-effect group"
              (click)="navigateToMealType('Dinner')"
            >
              <div class="relative h-48 overflow-hidden">
                <img src="dinner.jpeg" alt="Dinner" class="w-full h-full object-cover transition-transform duration-500 group-hover:scale-110" />
                <div class="absolute inset-0 bg-gradient-to-t from-black/20 to-transparent"></div>
                <div class="absolute top-4 right-4 bg-gradient-to-r from-purple-500 to-indigo-500 text-white px-4 py-2 rounded-full text-sm font-semibold shadow-lg">
                  Meal Type
                </div>
                <div class="absolute inset-0 shimmer-effect opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
              </div>
              <div class="p-6">
                <h3 class="text-xl font-bold text-gray-800 mb-3 group-hover:text-purple-600 transition-colors duration-300">Dinner</h3>
                <p class="text-gray-600 line-clamp-2 mb-4 leading-relaxed">
                  Hearty and delightful recipes to end your day on a high note.
                </p>
                <div class="flex justify-between items-center">
                  <span class="text-sm text-gray-500 font-medium">Varied Options</span>
                  <span class="px-3 py-1 bg-gradient-to-r from-purple-400 to-indigo-400 text-white rounded-full text-sm font-semibold shadow-md">Evening</span>
                </div>
              </div>
            </div>

            <!-- Enhanced Snacks Card -->
            <div
              class="flex-shrink-0 w-80 glass-effect rounded-2xl shadow-2xl overflow-hidden cursor-pointer card-hover-effect group"
              (click)="navigateToMealType('Snacks')"
            >
              <div class="relative h-48 overflow-hidden">
                <img src="snacks.jpeg" alt="Snacks" class="w-full h-full object-cover transition-transform duration-500 group-hover:scale-110" />
                <div class="absolute inset-0 bg-gradient-to-t from-black/20 to-transparent"></div>
                <div class="absolute top-4 right-4 bg-gradient-to-r from-yellow-500 to-orange-500 text-white px-4 py-2 rounded-full text-sm font-semibold shadow-lg">
                  Meal Type
                </div>
                <div class="absolute inset-0 shimmer-effect opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
              </div>
              <div class="p-6">
                <h3 class="text-xl font-bold text-gray-800 mb-3 group-hover:text-yellow-600 transition-colors duration-300">Snacks</h3>
                <p class="text-gray-600 line-clamp-2 mb-4 leading-relaxed">
                  Quick bites and treats for those moments between meals.
                </p>
                <div class="flex justify-between items-center">
                  <span class="text-sm text-gray-500 font-medium">Varied Options</span>
                  <span class="px-3 py-1 bg-gradient-to-r from-yellow-400 to-orange-400 text-white rounded-full text-sm font-semibold shadow-md">Anytime</span>
                </div>
              </div>
            </div>

            <!-- Enhanced Dessert Card -->
            <div
              class="flex-shrink-0 w-80 glass-effect rounded-2xl shadow-2xl overflow-hidden cursor-pointer card-hover-effect group"
              (click)="navigateToMealType('Dessert')"
            >
              <div class="relative h-48 overflow-hidden">
                <img src="dessert.jpeg" alt="Dessert" class="w-full h-full object-cover transition-transform duration-500 group-hover:scale-110" />
                <div class="absolute inset-0 bg-gradient-to-t from-black/20 to-transparent"></div>
                <div class="absolute top-4 right-4 bg-gradient-to-r from-pink-500 to-rose-500 text-white px-4 py-2 rounded-full text-sm font-semibold shadow-lg">
                  Meal Type
                </div>
                <div class="absolute inset-0 shimmer-effect opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
              </div>
              <div class="p-6">
                <h3 class="text-xl font-bold text-gray-800 mb-3 group-hover:text-pink-600 transition-colors duration-300">Dessert</h3>
                <p class="text-gray-600 line-clamp-2 mb-4 leading-relaxed">
                  Indulgent sweets and treats to satisfy your cravings.
                </p>
                <div class="flex justify-between items-center">
                  <span class="text-sm text-gray-500 font-medium">Varied Options</span>
                  <span class="px-3 py-1 bg-gradient-to-r from-pink-400 to-rose-400 text-white rounded-full text-sm font-semibold shadow-md">Sweet</span>
                </div>
              </div>
            </div>

            <!-- Breakfast Card -->
            <div
              class="flex-shrink-0 w-80 glass-effect rounded-2xl shadow-2xl overflow-hidden cursor-pointer card-hover-effect group"
              (click)="navigateToMealType('Breakfast')"
            >
              <div class="relative h-48 overflow-hidden">
                <img src="breakfast.jpeg" alt="Breakfast" class="w-full h-full object-cover transition-transform duration-500 group-hover:scale-110" />
                <div class="absolute inset-0 bg-gradient-to-t from-black/20 to-transparent"></div>
                <div class="absolute top-4 right-4 bg-gradient-to-r from-orange-500 to-red-500 text-white px-4 py-2 rounded-full text-sm font-semibold shadow-lg">
                  Meal Type
                </div>
                <div class="absolute inset-0 shimmer-effect opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
              </div>
              <div class="p-6">
                <h3 class="text-xl font-bold text-gray-800 mb-3 group-hover:text-orange-600 transition-colors duration-300">Breakfast</h3>
                <p class="text-gray-600 line-clamp-2 mb-4 leading-relaxed">
                  Start your day right with energizing and delicious breakfast ideas.
                </p>
                <div class="flex justify-between items-center">
                  <span class="text-sm text-gray-500 font-medium">Varied Options</span>
                  <span class="px-3 py-1 bg-gradient-to-r from-orange-400 to-red-400 text-white rounded-full text-sm font-semibold shadow-md">Morning</span>
                </div>
              </div>
            </div>

            <!-- Lunch Card -->
            <div
              class="flex-shrink-0 w-80 glass-effect rounded-2xl shadow-2xl overflow-hidden cursor-pointer card-hover-effect group"
              (click)="navigateToMealType('Lunch')"
            >
              <div class="relative h-48 overflow-hidden">
                <img src="lunch.jpeg" alt="Lunch" class="w-full h-full object-cover transition-transform duration-500 group-hover:scale-110" />
                <div class="absolute inset-0 bg-gradient-to-t from-black/20 to-transparent"></div>
                <div class="absolute top-4 right-4 bg-gradient-to-r from-green-500 to-teal-500 text-white px-4 py-2 rounded-full text-sm font-semibold shadow-lg">
                  Meal Type
                </div>
                <div class="absolute inset-0 shimmer-effect opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
              </div>
              <div class="p-6">
                <h3 class="text-xl font-bold text-gray-800 mb-3 group-hover:text-green-600 transition-colors duration-300">Lunch</h3>
                <p class="text-gray-600 line-clamp-2 mb-4 leading-relaxed">
                  Quick and satisfying meals perfect for your midday break.
                </p>
                <div class="flex justify-between items-center">
                  <span class="text-sm text-gray-500 font-medium">Varied Options</span>
                  <span class="px-3 py-1 bg-gradient-to-r from-green-400 to-teal-400 text-white rounded-full text-sm font-semibold shadow-md">Noon</span>
                </div>
              </div>
            </div>

            <!-- Dinner Card -->
            <div
              class="flex-shrink-0 w-80 glass-effect rounded-2xl shadow-2xl overflow-hidden cursor-pointer card-hover-effect group"
              (click)="navigateToMealType('Dinner')"
            >
              <div class="relative h-48 overflow-hidden">
                <img src="dinner.jpeg" alt="Dinner" class="w-full h-full object-cover transition-transform duration-500 group-hover:scale-110" />
                <div class="absolute inset-0 bg-gradient-to-t from-black/20 to-transparent"></div>
                <div class="absolute top-4 right-4 bg-gradient-to-r from-purple-500 to-indigo-500 text-white px-4 py-2 rounded-full text-sm font-semibold shadow-lg">
                  Meal Type
                </div>
                <div class="absolute inset-0 shimmer-effect opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
              </div>
              <div class="p-6">
                <h3 class="text-xl font-bold text-gray-800 mb-3 group-hover:text-purple-600 transition-colors duration-300">Dinner</h3>
                <p class="text-gray-600 line-clamp-2 mb-4 leading-relaxed">
                  Hearty and delightful recipes to end your day on a high note.
                </p>
                <div class="flex justify-between items-center">
                  <span class="text-sm text-gray-500 font-medium">Varied Options</span>
                  <span class="px-3 py-1 bg-gradient-to-r from-purple-400 to-indigo-400 text-white rounded-full text-sm font-semibold shadow-md">Evening</span>
                </div>
              </div>
            </div>

            <!-- Snacks Card -->
            <div
              class="flex-shrink-0 w-80 glass-effect rounded-2xl shadow-2xl overflow-hidden cursor-pointer card-hover-effect group"
              (click)="navigateToMealType('Snacks')"
            >
              <div class="relative h-48 overflow-hidden">
                <img src="snacks.jpeg" alt="Snacks" class="w-full h-full object-cover transition-transform duration-500 group-hover:scale-110" />
                <div class="absolute inset-0 bg-gradient-to-t from-black/20 to-transparent"></div>
                <div class="absolute top-4 right-4 bg-gradient-to-r from-yellow-500 to-orange-500 text-white px-4 py-2 rounded-full text-sm font-semibold shadow-lg">
                  Meal Type
                </div>
                <div class="absolute inset-0 shimmer-effect opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
              </div>
              <div class="p-6">
                <h3 class="text-xl font-bold text-gray-800 mb-3 group-hover:text-yellow-600 transition-colors duration-300">Snacks</h3>
                <p class="text-gray-600 line-clamp-2 mb-4 leading-relaxed">
                  Quick bites and treats for those moments between meals.
                </p>
                <div class="flex justify-between items-center">
                  <span class="text-sm text-gray-500 font-medium">Varied Options</span>
                  <span class="px-3 py-1 bg-gradient-to-r from-yellow-400 to-orange-400 text-white rounded-full text-sm font-semibold shadow-md">Anytime</span>
                </div>
              </div>
            </div>

            <!-- Dessert Card -->
            <div
              class="flex-shrink-0 w-80 glass-effect rounded-2xl shadow-2xl overflow-hidden cursor-pointer card-hover-effect group"
              (click)="navigateToMealType('Dessert')"
            >
              <div class="relative h-48 overflow-hidden">
                <img src="dessert.jpeg" alt="Dessert" class="w-full h-full object-cover transition-transform duration-500 group-hover:scale-110" />
                <div class="absolute inset-0 bg-gradient-to-t from-black/20 to-transparent"></div>
                <div class="absolute top-4 right-4 bg-gradient-to-r from-pink-500 to-rose-500 text-white px-4 py-2 rounded-full text-sm font-semibold shadow-lg">
                  Meal Type
                </div>
                <div class="absolute inset-0 shimmer-effect opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
              </div>
              <div class="p-6">
                <h3 class="text-xl font-bold text-gray-800 mb-3 group-hover:text-pink-600 transition-colors duration-300">Dessert</h3>
                <p class="text-gray-600 line-clamp-2 mb-4 leading-relaxed">
                  Indulgent sweets and treats to satisfy your cravings.
                </p>
                <div class="flex justify-between items-center">
                  <span class="text-sm text-gray-500 font-medium">Varied Options</span>
                  <span class="px-3 py-1 bg-gradient-to-r from-pink-400 to-rose-400 text-white rounded-full text-sm font-semibold shadow-md">Sweet</span>
                </div>
              </div>
            </div>


          </div>
        </div>
      </div>

      <!-- Enhanced static grid section with glass effect background -->
      <div class="glass-effect rounded-3xl p-8 shadow-2xl animate-fade-in-up">
        <h2 class="text-4xl font-bold gradient-text mb-8 text-center">
          All Recipes
          <div class="w-16 h-1 bg-gradient-to-r from-indigo-500 to-purple-600 mx-auto mt-3 rounded-full"></div>
        </h2>

        @if (allRecipes.length > 0) {
        <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-8">
          @for (recipe of allRecipes; track recipe.recipe_id) {
          <a
            [routerLink]="['/recipes', recipe.recipe_id]"
            class="glass-effect rounded-2xl shadow-xl overflow-hidden card-hover-effect group stagger-animation"
          >
            <div class="relative h-48 overflow-hidden">
              <img
                [src]="recipe.image || '/placeholder.svg'"
                [alt]="recipe.title"
                class="w-full h-full object-cover transition-transform duration-500 group-hover:scale-110"
              />
              <div class="absolute inset-0 bg-gradient-to-t from-black/20 to-transparent"></div>
              <div class="absolute top-4 right-4 bg-gradient-to-r from-indigo-500 to-purple-500 text-white px-3 py-1 rounded-full text-sm font-semibold shadow-lg">
                {{ recipe.cuisine }}
              </div>
              <div class="absolute inset-0 shimmer-effect opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
            </div>
            <div class="p-6">
              <h3 class="text-lg font-bold text-gray-800 mb-2 truncate group-hover:text-indigo-600 transition-colors duration-300">
                {{ recipe.title }}
              </h3>
              <p class="text-sm text-gray-600 line-clamp-2 mb-4 leading-relaxed">{{ recipe.description }}</p>
              <div class="flex justify-between items-center text-sm">
                <span class="text-gray-500 font-medium">{{ recipe.preparationTime }} mins</span>
                <span class="px-3 py-1 bg-gradient-to-r from-gray-200 to-gray-300 text-gray-700 rounded-full font-semibold">{{ recipe.difficulty }}</span>
              </div>
            </div>
          </a>
          }
        </div>
        } @else {
        <div class="text-center py-16">
          <div class="w-24 h-24 mx-auto mb-6 bg-gradient-to-r from-indigo-100 to-purple-100 rounded-full flex items-center justify-center">
            <svg class="w-12 h-12 text-indigo-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"></path>
            </svg>
          </div>
          <p class="text-xl text-gray-600 font-medium">No recipes available at the moment.</p>
          <p class="text-gray-500 mt-2">Check back soon for delicious new recipes!</p>
        </div>
        }
      </div>
    </div>
  </body>
</html>
     


================================================
FILE: recipe-app/src/app/page/home/home.spec.ts
================================================
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { HomeComponent } from './home';

describe('Home', () => {
  let component: HomeComponent;
  let fixture: ComponentFixture<HomeComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [HomeComponent ]
    })
    .compileComponents();

    fixture = TestBed.createComponent( HomeComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});



================================================
FILE: recipe-app/src/app/page/home/home.ts
================================================
// import { Component } from '@angular/core';

// @Component({
//   selector: 'app-home',
//   imports: [],
//   templateUrl: './home.html',
//   styleUrl: './home.css'
// })
// export class Home {

// }


import { Component, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { RecipeService } from '../../service/recipe-service';
import { Recipe } from '../../models/interface/recipe.interface';
import { RouterModule, Router } from '@angular/router';

@Component({
  selector: 'app-home',
  standalone: true,
  imports: [CommonModule, RouterModule],
  templateUrl: './home.html',
})
export class HomeComponent implements OnInit {
  allRecipes: Recipe[] = [];
  isScrollingPaused = false;

  constructor(private recipeService: RecipeService, private router: Router) {}

  ngOnInit() {
    this.recipeService.getAllRecipes().subscribe(recipes => {
      this.allRecipes = recipes;
    });
  }

  // Navigate to recipes filtered by meal type
  navigateToMealType(mealType: string) {
    // Navigate to a recipe list page with meal type filter
    // You might need to create a recipe-list component or modify existing one
    this.router.navigate(['/recipes'], {
      queryParams: { mealType: mealType.toLowerCase() }
    });
  }

  // Manual scroll controls
  scrollLeft() {
    const container = document.querySelector('.scrolling-container .flex') as HTMLElement;
    if (container) {
      container.scrollBy({ left: -320, behavior: 'smooth' }); // Scroll by one card width
    }
  }

  scrollRight() {
    const container = document.querySelector('.scrolling-container .flex') as HTMLElement;
    if (container) {
      container.scrollBy({ left: 320, behavior: 'smooth' }); // Scroll by one card width
    }
  }

  // Toggle auto-scroll pause
  toggleScroll() {
    this.isScrollingPaused = !this.isScrollingPaused;
    const scrollElement = document.querySelector('.animate-scroll') as HTMLElement;
    if (scrollElement) {
      scrollElement.style.animationPlayState = this.isScrollingPaused ? 'paused' : 'running';
    }
  }
}



================================================
FILE: recipe-app/src/app/page/login/login.css
================================================



================================================
FILE: recipe-app/src/app/page/login/login.html
================================================
<div class="min-h-screen flex items-center justify-center bg-gradient-to-br from-orange-50 via-pink-50 to-rose-100 py-12 px-4 sm:px-6 lg:px-8 relative overflow-hidden">
  <!-- Added animated background elements for consistency -->
  <div class="absolute inset-0 overflow-hidden pointer-events-none">
    <div class="absolute -top-40 -right-40 w-80 h-80 bg-gradient-to-br from-orange-200/30 to-pink-200/30 rounded-full blur-3xl animate-pulse"></div>
    <div class="absolute -bottom-40 -left-40 w-80 h-80 bg-gradient-to-br from-rose-200/30 to-orange-200/30 rounded-full blur-3xl animate-pulse" style="animation-delay: 2s;"></div>
  </div>

  <div class="max-w-md w-full space-y-8 bg-white/90 backdrop-blur-sm p-10 rounded-3xl shadow-2xl border border-white/20 relative z-10 animate-fade-in-up">
    <div class="text-center">
      <!-- Enhanced title with gradient text and animation -->
      <h2 class="mt-6 text-4xl font-bold bg-gradient-to-r from-orange-600 via-pink-600 to-rose-600 bg-clip-text text-transparent mb-4">
        Welcome Back
      </h2>
      <div class="w-16 h-1 bg-gradient-to-r from-orange-500 to-pink-500 mx-auto rounded-full mb-4"></div>
      <p class="text-gray-600 font-medium">
        Sign in to your culinary account
      </p>
    </div>

    @if (error) {
      <!-- Enhanced error styling -->
      <div class="bg-red-50 border-l-4 border-red-400 text-red-700 p-4 rounded-xl shadow-md animate-fade-in" role="alert">
        <div class="flex items-center">
          <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
          </svg>
          <div>
            <p class="font-semibold">Error</p>
            <p>{{ error }}</p>
          </div>
        </div>
      </div>
    }

    <form class="mt-8 space-y-6" [formGroup]="loginForm" (ngSubmit)="onLogin()">
      <div class="space-y-4">
        <!-- Enhanced input fields with floating labels and better styling -->
        <div class="relative">
          <input formControlName="email" id="email" name="email" type="email" required
            class="peer w-full px-4 py-4 bg-white/80 border-2 border-gray-200 rounded-2xl focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-transparent transition-all duration-300 placeholder-transparent shadow-lg hover:shadow-xl"
            placeholder="Email address">
          <label for="email" class="absolute left-4 -top-2.5 bg-white px-2 text-sm font-medium text-gray-600 transition-all peer-placeholder-shown:text-base peer-placeholder-shown:text-gray-400 peer-placeholder-shown:top-4 peer-focus:-top-2.5 peer-focus:text-sm peer-focus:text-orange-600">
            Email address
          </label>
        </div>
        <div class="relative">
          <input formControlName="password" id="password" name="password" type="password" required
            class="peer w-full px-4 py-4 bg-white/80 border-2 border-gray-200 rounded-2xl focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-transparent transition-all duration-300 placeholder-transparent shadow-lg hover:shadow-xl"
            placeholder="Password">
          <label for="password" class="absolute left-4 -top-2.5 bg-white px-2 text-sm font-medium text-gray-600 transition-all peer-placeholder-shown:text-base peer-placeholder-shown:text-gray-400 peer-placeholder-shown:top-4 peer-focus:-top-2.5 peer-focus:text-sm peer-focus:text-orange-600">
            Password
          </label>
        </div>
      </div>

      <div>
        <!-- Enhanced button with gradient and animations -->
        <button type="submit" [disabled]="loginForm.invalid"
          class="group relative w-full flex justify-center items-center py-4 px-6 border border-transparent text-sm font-semibold rounded-2xl text-white bg-gradient-to-r from-orange-600 to-pink-600 hover:from-orange-700 hover:to-pink-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-orange-500 transition-all duration-300 disabled:opacity-50 disabled:cursor-not-allowed shadow-xl hover:shadow-2xl transform hover:-translate-y-0.5">
          <svg class="w-5 h-5 mr-2 group-hover:scale-110 transition-transform duration-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 16l-4-4m0 0l4-4m-4 4h14m-5 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1"></path>
          </svg>
          Sign in
        </button>
      </div>
    </form>

    <div class="text-center">
      <!-- Enhanced link styling -->
      <a routerLink="/signup" class="font-medium text-orange-600 hover:text-pink-600 transition-colors duration-300 hover:underline">
        Don't have an account? <span class="font-semibold">Sign up</span>
      </a>
    </div>
  </div>
</div>

<style>
@keyframes fade-in-up {
  from {
    opacity: 0;
    transform: translateY(30px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes fade-in {
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}

.animate-fade-in-up {
  animation: fade-in-up 0.6s ease-out forwards;
}

.animate-fade-in {
  animation: fade-in 0.6s ease-out forwards;
}
</style>



================================================
FILE: recipe-app/src/app/page/login/login.spec.ts
================================================
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { LoginComponent } from './login';

describe('Login', () => {
  let component: LoginComponent;
  let fixture: ComponentFixture<LoginComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [LoginComponent]
    })
    .compileComponents();

    fixture = TestBed.createComponent(LoginComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});



================================================
FILE: recipe-app/src/app/page/login/login.ts
================================================
// import { Component } from '@angular/core';

// @Component({
//   selector: 'app-login',
//   imports: [],
//   templateUrl: './login.html',
//   styleUrl: './login.css'
// })
// export class Login {

// }


import { Component } from '@angular/core';
import { CommonModule } from '@angular/common';
import { Router, RouterModule } from '@angular/router';
import { FormBuilder, FormGroup, ReactiveFormsModule, Validators } from '@angular/forms';
import { AuthService } from '../../service/auth-service';

@Component({
  selector: 'app-login',
  standalone: true,
  imports: [CommonModule, RouterModule, ReactiveFormsModule],
  templateUrl: './login.html',
})
export class LoginComponent {
  loginForm: FormGroup;
  error: string = '';
  loading: boolean | undefined;

  constructor(
    private fb: FormBuilder,
    private authService: AuthService,
    private router: Router
  ) {
    this.loginForm = this.fb.group({
      email: ['', [Validators.required, Validators.email]],
      password: ['', Validators.required]
    });
  }

  // onSubmit() {
  //   if (this.loginForm.invalid) {
  //     return;
  //   }
  //   this.error = '';
  //   this.authService.login(this.loginForm.value).subscribe({
  //     next: () => {
  //       // toast.success('Logged in successfully!'); can be replaced with a snackbar service
  //       this.router.navigate(['/']);
  //     },
  //     error: (err) => {
  //       this.error = err.error.message || 'Login failed. Please try again.';
  //     }
  //   });
  // }

  onLogin() {
  this.loading = true;
  this.authService.login(this.loginForm.value).subscribe({
    next: (response) => {
      console.log('Login successful:', response);
      this.loading = false;
      // The AuthService will automatically update the currentUser signal
      // This will trigger the navbar to show the username and Create Recipe button
      this.router.navigate(['/']);
    },
    error: (error) => {
      console.error('Login failed:', error);
      this.loading = false;
      this.error = 'Login failed. Please check your credentials.';
    }
  });
}

}


================================================
FILE: recipe-app/src/app/page/my-recipes/my-recipes.css
================================================



================================================
FILE: recipe-app/src/app/page/my-recipes/my-recipes.html
================================================
<div class="min-h-screen w-full bg-gradient-to-br from-orange-50 via-pink-50 to-rose-100 relative overflow-hidden px-4 sm:px-6 lg:px-8 py-12 pt-20">
  <!-- Animated background elements -->
  <div class="absolute inset-0 overflow-hidden pointer-events-none">
    <div class="absolute -top-40 -right-40 w-80 h-80 bg-gradient-to-br from-orange-200/30 to-pink-200/30 rounded-full blur-3xl animate-pulse"></div>
    <div class="absolute -bottom-40 -left-40 w-80 h-80 bg-gradient-to-br from-rose-200/30 to-orange-200/30 rounded-full blur-3xl animate-pulse" style="animation-delay: 2s;"></div>
  </div>
  
  <div class="relative z-10 max-w-7xl mx-auto">
    <!-- Enhanced header with animation -->
    <div class="text-center mb-12 animate-fade-in-up">
      <h2 class="text-5xl md:text-6xl font-bold bg-gradient-to-r from-orange-600 via-pink-600 to-rose-600 bg-clip-text text-transparent mb-4">
        My Culinary Creations
      </h2>
      <div class="w-24 h-1 bg-gradient-to-r from-orange-500 to-pink-500 mx-auto rounded-full"></div>
    </div>

    <!-- Enhanced Sorting Controls -->
    @if (myRecipes.length > 0) {
      <div class="flex justify-end mb-12 animate-fade-in-up" style="animation-delay: 0.2s;">
        <div class="bg-white/80 backdrop-blur-sm rounded-2xl shadow-xl border border-white/20 p-6 hover:shadow-2xl transition-all duration-300 hover:scale-105">
          <label for="sort-select" class="block text-sm font-semibold text-gray-700 mb-3 flex items-center gap-2">
            <svg class="w-4 h-4 text-orange-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 4h13M3 8h9m-9 4h6m4 0l4-4m0 0l4 4m-4-4v12"></path>
            </svg>
            Sort by:
          </label>
          <select
            id="sort-select"
            [(ngModel)]="sortBy"
            (ngModelChange)="sortRecipes()"
            class="block w-full px-4 py-3 bg-white border-2 border-gray-200 rounded-xl shadow-sm focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-transparent transition-all duration-200 hover:border-orange-300 cursor-pointer"
          >
            <option value="newest">✨ Newly Created First</option>
            <option value="cuisine">🌍 Cuisine (A-Z)</option>
            <option value="title">📝 Title (A-Z)</option>
            <option value="difficulty">⚡ Difficulty</option>
          </select>
        </div>
      </div>
    }

    @if (loading) {
      <!-- Enhanced loading state -->
      <div class="flex flex-col items-center justify-center py-20 animate-fade-in">
        <div class="relative">
          <div class="w-16 h-16 border-4 border-orange-200 border-t-orange-600 rounded-full animate-spin"></div>
          <div class="absolute inset-0 w-16 h-16 border-4 border-transparent border-r-pink-600 rounded-full animate-spin" style="animation-direction: reverse; animation-duration: 1.5s;"></div>
        </div>
        <p class="mt-6 text-lg text-gray-600 font-medium animate-pulse">Loading your delicious recipes...</p>
      </div>
    } @else if (error) {
      <!-- Enhanced error state -->
      <div class="text-center py-20 animate-fade-in">
        <div class="w-16 h-16 bg-red-100 rounded-full flex items-center justify-center mx-auto mb-4">
          <svg class="w-8 h-8 text-red-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
          </svg>
        </div>
        <p class="text-red-600 text-lg font-medium">{{ error }}</p>
      </div>
    } @else if (myRecipes.length > 0) {
      <!-- Enhanced recipe grid -->
      <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-8">
        @for (recipe of myRecipes; track recipe.recipe_id; let i = $index) {
          <div 
            class="group bg-white/90 backdrop-blur-sm rounded-3xl shadow-lg overflow-hidden transform transition-all duration-500 hover:scale-105 hover:shadow-2xl border border-white/20 animate-fade-in-up hover:shadow-orange-200/50"
            [style.animation-delay]="(i * 0.1) + 's'"
          >
            <!-- Enhanced image container -->
            <div class="relative h-56 overflow-hidden">
              <img 
                [src]="recipe.image || '/placeholder.svg?height=224&width=400'" 
                [alt]="recipe.title" 
                class="w-full h-full object-cover transition-transform duration-700 group-hover:scale-110" 
              />
              <div class="absolute inset-0 bg-gradient-to-t from-black/20 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
              <!-- Floating difficulty badge -->
              <div class="absolute top-4 right-4 bg-white/90 backdrop-blur-sm px-3 py-1 rounded-full text-xs font-semibold text-gray-700 shadow-lg">
                {{ recipe.difficulty || 'Medium' }}
              </div>
            </div>
            
            <!-- Enhanced content -->
            <div class="p-6">
              <h3 class="font-bold text-xl mb-3 text-gray-800 group-hover:text-orange-600 transition-colors duration-300 line-clamp-2">
                {{ recipe.title }}
              </h3>
              <p class="text-gray-600 mb-4 line-clamp-2 text-sm leading-relaxed">
                {{ recipe.description }}
              </p>
              
              <!-- Enhanced cuisine tag -->
              @if (recipe.cuisine) {
                <div class="mb-4">
                  <span class="inline-block bg-gradient-to-r from-orange-100 to-pink-100 text-orange-700 px-3 py-1 rounded-full text-xs font-medium">
                    {{ recipe.cuisine }}
                  </span>
                </div>
              }
              
              <!-- Enhanced action buttons -->
              <div class="flex gap-2 mt-6">
                <a 
                  [routerLink]="['/recipe', recipe.recipe_id]" 
                  class="flex-1 text-center bg-gradient-to-r from-orange-600 to-pink-600 text-white py-3 rounded-xl hover:from-orange-700 hover:to-pink-700 transition-all duration-300 font-medium shadow-lg hover:shadow-xl transform hover:-translate-y-0.5"
                >
                  View
                </a>
                <button 
                  (click)="openEditModal(recipe)" 
                  class="flex-1 bg-gradient-to-r from-blue-500 to-cyan-500 text-white py-3 rounded-xl hover:from-blue-600 hover:to-cyan-600 transition-all duration-300 font-medium shadow-lg hover:shadow-xl transform hover:-translate-y-0.5"
                >
                  Edit
                </button>
                <button 
                  (click)="deleteRecipe(recipe.recipe_id)" 
                  class="flex-1 bg-gradient-to-r from-red-500 to-pink-500 text-white py-3 rounded-xl hover:from-red-600 hover:to-pink-600 transition-all duration-300 font-medium shadow-lg hover:shadow-xl transform hover:-translate-y-0.5"
                >
                  Delete
                </button>
              </div>
            </div>
          </div>
        }
      </div>
    } @else {
      <!-- Enhanced empty state -->
      <div class="text-center py-20 animate-fade-in">
        <div class="w-24 h-24 bg-gradient-to-br from-orange-100 to-pink-100 rounded-full flex items-center justify-center mx-auto mb-6">
          <svg class="w-12 h-12 text-orange-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
          </svg>
        </div>
        <h3 class="text-2xl font-bold text-gray-700 mb-4">No recipes yet</h3>
        <p class="text-gray-500 mb-8 max-w-md mx-auto">Start your culinary journey by creating your first delicious recipe!</p>
        <a 
          routerLink="/create-recipe" 
          class="inline-flex items-center gap-2 px-8 py-4 bg-gradient-to-r from-orange-600 to-pink-600 text-white rounded-2xl hover:from-orange-700 hover:to-pink-700 transition-all duration-300 font-semibold shadow-xl hover:shadow-2xl transform hover:-translate-y-1"
        >
          <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
          </svg>
          Create Your First Recipe
        </a>
      </div>
    }
  </div>
</div>

<app-edit-recipe-modal 
  [isOpen]="isEditModalOpen"
  [recipe]="selectedRecipe" 
  (close)="isEditModalOpen = false" 
  (success)="onRecipeUpdated($event)">
</app-edit-recipe-modal>

<style>
@keyframes fade-in-up {
  from {
    opacity: 0;
    transform: translateY(30px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes fade-in {
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}

.animate-fade-in-up {
  animation: fade-in-up 0.6s ease-out forwards;
}

.animate-fade-in {
  animation: fade-in 0.6s ease-out forwards;
}

.line-clamp-2 {
  display: -webkit-box;
  -webkit-line-clamp: 2;
  line-clamp: 2;
  -webkit-box-orient: vertical;
  overflow: hidden;
}
</style>



================================================
FILE: recipe-app/src/app/page/my-recipes/my-recipes.spec.ts
================================================
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { MyRecipesComponent } from './my-recipes';

describe('MyRecipes', () => {
  let component: MyRecipesComponent;
  let fixture: ComponentFixture<MyRecipesComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [MyRecipesComponent]
    })
    .compileComponents();

    fixture = TestBed.createComponent(MyRecipesComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});



================================================
FILE: recipe-app/src/app/page/my-recipes/my-recipes.ts
================================================
// import { Component } from '@angular/core';

// @Component({
//   selector: 'app-my-recipes',
//   imports: [],
//   templateUrl: './my-recipes.html',
//   styleUrl: './my-recipes.css'
// })
// export class MyRecipes {

// }

import { Component, OnInit, OnDestroy } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { RecipeService } from '../../service/recipe-service';
import { AuthService } from '../../service/auth-service';
import { RecipeEventsService } from '../../service/recipe-events.service';
import { Recipe } from '../../models/interface/recipe.interface';
import { RouterModule } from '@angular/router';
import { EditRecipeModalComponent } from '../../components/edit-recipe-modal/edit-recipe-modal';
import { Subscription } from 'rxjs';

@Component({
  selector: 'app-my-recipes',
  standalone: true,
  imports: [CommonModule, RouterModule, EditRecipeModalComponent, FormsModule],
  templateUrl: './my-recipes.html',
})
export class MyRecipesComponent implements OnInit, OnDestroy {
  myRecipes: Recipe[] = [];
  loading = true;
  error: string = '';

  selectedRecipe: Recipe | null = null;
  isEditModalOpen = false;

  sortBy: string = 'newest'; // Default sorting

  private subscriptions: Subscription = new Subscription();

  constructor(
    private recipeService: RecipeService,
    private authService: AuthService,
    private recipeEventsService: RecipeEventsService
  ) {}

  ngOnInit() {
    this.loadRecipes();
    this.subscribeToRecipeEvents();
  }

  ngOnDestroy() {
    this.subscriptions.unsubscribe();
  }

  private subscribeToRecipeEvents() {
    // Subscribe to recipe created events
    this.subscriptions.add(
      this.recipeEventsService.recipeCreated$.subscribe((newRecipe: Recipe) => {
        this.onRecipeCreated(newRecipe);
      })
    );

    // Subscribe to recipe updated events
    this.subscriptions.add(
      this.recipeEventsService.recipeUpdated$.subscribe((updatedRecipe: Recipe) => {
        this.onRecipeUpdated(updatedRecipe);
      })
    );

    // Subscribe to recipe deleted events
    this.subscriptions.add(
      this.recipeEventsService.recipeDeleted$.subscribe((recipeId: number) => {
        this.myRecipes = this.myRecipes.filter(r => r.recipe_id !== recipeId);
      })
    );
  }

  loadRecipes() {
    const userId = this.authService.getUserId();
    if (userId) {
      this.recipeService.getMyRecipes(userId).subscribe({
        next: (recipes) => {
          this.myRecipes = recipes;
          this.sortRecipes();
          this.loading = false;
        },
        error: () => {
          this.error = 'Failed to fetch your recipes.';
          this.loading = false;
        }
      });
    }
  }
  
  openEditModal(recipe: Recipe) {
    this.selectedRecipe = recipe;
    this.isEditModalOpen = true;
  }

  onRecipeUpdated(updatedRecipe: Recipe) {
    console.log('Recipe updated:', updatedRecipe); // Debug log

    const index = this.myRecipes.findIndex(r => r.recipe_id === updatedRecipe.recipe_id);
    if (index > -1) {
        // Update the recipe in the array with the new data
        this.myRecipes[index] = { ...updatedRecipe };

        // Trigger change detection by creating a new array reference
        this.myRecipes = [...this.myRecipes];

        console.log('Updated recipe in array:', this.myRecipes[index]); // Debug log
    }
    this.isEditModalOpen = false;
    this.selectedRecipe = null; // Clear selection
    // Emit event to notify other components
    this.recipeEventsService.emitRecipeUpdated(updatedRecipe);
  }

  onRecipeCreated(newRecipe: Recipe) {
    // If the new recipe has an image URL, ensure it is properly set
    if (!newRecipe.image) {
      newRecipe.image = '/placeholder.svg';
    }
    this.myRecipes = [newRecipe, ...this.myRecipes];
  }

  deleteRecipe(id: number) {
    if (confirm('Are you sure you want to delete this recipe?')) {
      // Don't use optimistic update - wait for server confirmation
      this.recipeService.deleteRecipe(id).subscribe({
        next: (response) => {
          console.log('Delete successful:', response);
          // Only remove from UI after successful server response
          this.myRecipes = this.myRecipes.filter(r => r.recipe_id !== id);
          // Emit event to notify other components
          this.recipeEventsService.emitRecipeDeleted(id);
        },
        error: (err) => {
          console.error('Delete failed:', err);

          // If 404 error, the recipe was already deleted - remove from UI
          if (err.status === 404) {
            console.log('Recipe already deleted, removing from UI');
            this.myRecipes = this.myRecipes.filter(r => r.recipe_id !== id);
            // Emit event even for 404 errors
            this.recipeEventsService.emitRecipeDeleted(id);
          } else {
            alert('Failed to delete recipe. Please try again.');
          }
        }
      });
    }
  }

  refreshRecipes() {
    this.loading = true;
    this.loadRecipes();
  }

  sortRecipes() {
    if (!this.myRecipes || this.myRecipes.length === 0) return;

    switch (this.sortBy) {
      case 'newest':
        this.myRecipes.sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime());
        break;
      case 'cuisine':
        this.myRecipes.sort((a, b) => a.cuisine.localeCompare(b.cuisine));
        break;
      case 'title':
        this.myRecipes.sort((a, b) => a.title.localeCompare(b.title));
        break;
      case 'difficulty':
        const difficultyOrder = { 'Easy': 1, 'Medium': 2, 'Hard': 3 };
        this.myRecipes.sort((a, b) => (difficultyOrder[a.difficulty] || 0) - (difficultyOrder[b.difficulty] || 0));
        break;
      default:
        break;
    }
    // Trigger change detection by creating a new array reference
    this.myRecipes = [...this.myRecipes];
  }
}





================================================
FILE: recipe-app/src/app/page/recipe-detail/recipe-detail.css
================================================



================================================
FILE: recipe-app/src/app/page/recipe-detail/recipe-detail.html
================================================
<div class="min-h-screen w-full bg-gradient-to-br from-orange-50 via-pink-50 to-rose-100 relative overflow-hidden px-4 sm:px-6 lg:px-8 py-12 pt-20">
  <!-- Added animated background elements -->
  <div class="absolute inset-0 overflow-hidden pointer-events-none">
    <div class="absolute -top-40 -right-40 w-80 h-80 bg-gradient-to-br from-orange-200/30 to-pink-200/30 rounded-full blur-3xl animate-pulse"></div>
    <div class="absolute -bottom-40 -left-40 w-80 h-80 bg-gradient-to-br from-rose-200/30 to-orange-200/30 rounded-full blur-3xl animate-pulse" style="animation-delay: 2s;"></div>
  </div>

  <div class="max-w-4xl mx-auto bg-white/90 backdrop-blur-sm rounded-3xl shadow-2xl border border-white/20 relative z-10 animate-fade-in-up overflow-hidden">
    @if (loading) {
      <!-- Enhanced loading state -->
      <div class="flex flex-col items-center justify-center h-64 p-6">
        <div class="relative">
          <div class="w-16 h-16 border-4 border-orange-200 border-t-orange-600 rounded-full animate-spin"></div>
          <div class="absolute inset-0 w-16 h-16 border-4 border-transparent border-r-pink-600 rounded-full animate-spin" style="animation-direction: reverse; animation-duration: 1.5s;"></div>
        </div>
        <p class="mt-6 text-lg text-gray-600 font-medium animate-pulse">Loading recipe...</p>
      </div>
    } @else if (error) {
      <!-- Enhanced error state -->
      <div class="text-center p-12">
        <div class="w-16 h-16 bg-red-100 rounded-full flex items-center justify-center mx-auto mb-4">
          <svg class="w-8 h-8 text-red-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
          </svg>
        </div>
        <p class="text-red-600 text-xl font-medium mb-4">{{ error }}</p>
        <button (click)="ngOnInit()" class="px-6 py-3 bg-gradient-to-r from-orange-600 to-pink-600 text-white rounded-2xl hover:from-orange-700 hover:to-pink-700 transition-all duration-300 font-medium shadow-lg hover:shadow-xl transform hover:-translate-y-0.5">
          Retry
        </button>
      </div>
    } @else if (recipe) {
      <!-- Enhanced recipe image with overlay -->
      <div class="relative h-96 overflow-hidden">
        <img [src]="getImageUrl()" [alt]="recipe.title" class="w-full h-full object-cover">
        <div class="absolute inset-0 bg-gradient-to-t from-black/40 via-transparent to-transparent"></div>
        <div class="absolute bottom-6 left-6 right-6">
          <h1 class="text-4xl md:text-5xl font-bold text-white mb-2 drop-shadow-lg">{{ recipe.title }}</h1>
        </div>
      </div>
      
      <div class="p-8">
        <!-- Enhanced recipe info section -->
        <div class="mb-8">
          <p class="text-xl text-gray-600 mb-6 leading-relaxed">{{ recipe.description }}</p>
          
          <!-- Enhanced recipe meta info with better styling -->
          <div class="flex flex-wrap gap-3 text-sm">
            <span class="bg-gradient-to-r from-orange-100 to-orange-200 text-orange-800 px-4 py-2 rounded-full font-semibold shadow-md">{{ recipe.cuisine }}</span>
            <span class="bg-gradient-to-r from-green-100 to-green-200 text-green-800 px-4 py-2 rounded-full font-semibold shadow-md">{{ recipe.mealType }}</span>
            <span class="bg-gradient-to-r from-yellow-100 to-yellow-200 text-yellow-800 px-4 py-2 rounded-full font-semibold shadow-md">{{ recipe.difficulty }}</span>
            <span class="bg-gradient-to-r from-purple-100 to-purple-200 text-purple-800 px-4 py-2 rounded-full font-semibold shadow-md">{{ recipe.preparationTime }} mins</span>
          </div>
        </div>
        
        <!-- Enhanced ingredients and instructions layout -->
        <div class="grid grid-cols-1 lg:grid-cols-2 gap-8 mb-8">
          <div class="bg-gradient-to-br from-orange-50 to-pink-50 rounded-2xl p-6 shadow-lg">
            <h3 class="text-2xl font-bold bg-gradient-to-r from-orange-600 to-pink-600 bg-clip-text text-transparent mb-4 flex items-center">
              <svg class="w-6 h-6 mr-2 text-orange-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"></path>
              </svg>
              Ingredients
            </h3>
            <ul class="space-y-2 text-gray-700">
              @for (ingredient of getIngredients(); track $index) {
                <li class="flex items-start">
                  <span class="w-2 h-2 bg-gradient-to-r from-orange-400 to-pink-400 rounded-full mt-2 mr-3 flex-shrink-0"></span>
                  <span>{{ ingredient }}</span>
                </li>
              }
            </ul>
          </div>
          
          <div class="bg-gradient-to-br from-blue-50 to-indigo-50 rounded-2xl p-6 shadow-lg">
            <h3 class="text-2xl font-bold bg-gradient-to-r from-blue-600 to-indigo-600 bg-clip-text text-transparent mb-4 flex items-center">
              <svg class="w-6 h-6 mr-2 text-blue-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.746 0 3.332.477 4.5 1.253v13C19.832 18.477 18.246 18 16.5 18c-1.746 0-3.332.477-4.5 1.253"></path>
              </svg>
              Instructions
            </h3>
            <div class="text-gray-700 whitespace-pre-line leading-relaxed">{{ recipe.instructions }}</div>
          </div>
        </div>

        <!-- Enhanced ratings section -->
        <div class="mb-8 bg-gradient-to-br from-yellow-50 to-orange-50 rounded-2xl p-6 shadow-lg">
          <h3 class="text-2xl font-bold bg-gradient-to-r from-yellow-600 to-orange-600 bg-clip-text text-transparent mb-4 flex items-center">
            <svg class="w-6 h-6 mr-2 text-yellow-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11.049 2.927c.3-.921 1.603-.921 1.902 0l1.519 4.674a1 1 0 00.95.69h4.915c.969 0 1.371 1.24.588 1.81l-3.976 2.888a1 1 0 00-.363 1.118l1.518 4.674c.3.922-.755 1.688-1.538 1.118l-3.976-2.888a1 1 0 00-1.176 0l-3.976 2.888c-.783.57-1.838-.197-1.538-1.118l1.518-4.674a1 1 0 00-.363-1.118l-3.976-2.888c-.784-.57-.38-1.81.588-1.81h4.914a1 1 0 00.951-.69l1.519-4.674z"></path>
            </svg>
            Rate this Recipe
          </h3>
          <div class="flex gap-2">
            @for (star of [1,2,3,4,5]; track star) {
              <button
                (click)="addRating(star)"
                class="text-4xl transition-all duration-200 hover:scale-110 transform"
                [class.text-yellow-400]="star <= (recipe?.userRating || 0)"
                [class.text-gray-300]="star > (recipe?.userRating || 0)"
                [class.hover:text-yellow-400]="star > (recipe?.userRating || 0)"
                [disabled]="(recipe?.userRating ?? 0) > 0"
                [class.cursor-not-allowed]="(recipe?.userRating ?? 0) > 0"
              >
                ★
              </button>
            }
          </div>
        </div>
        
        <!-- Enhanced comments section -->
        <div class="bg-gradient-to-br from-gray-50 to-blue-50 rounded-2xl p-6 shadow-lg">
          <h3 class="text-2xl font-bold bg-gradient-to-r from-gray-700 to-blue-600 bg-clip-text text-transparent mb-6 flex items-center">
            <svg class="w-6 h-6 mr-2 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z"></path>
            </svg>
            Comments
          </h3>
          
          @if (currentUser()) {
            <!-- Enhanced comment form -->
            <form [formGroup]="commentForm" (ngSubmit)="addComment()" class="mb-6">
              <div class="relative">
                <textarea 
                  formControlName="content" 
                  class="w-full p-4 bg-white border-2 border-gray-200 rounded-2xl focus:border-orange-500 focus:ring-2 focus:ring-orange-200 focus:outline-none transition-all duration-300 resize-none shadow-lg" 
                  placeholder="Share your thoughts about this recipe..."
                  rows="3"
                ></textarea>
              </div>
              <button 
                type="submit" 
                class="mt-4 px-6 py-3 bg-gradient-to-r from-orange-600 to-pink-600 text-white rounded-2xl hover:from-orange-700 hover:to-pink-700 transition-all duration-300 font-medium shadow-lg hover:shadow-xl transform hover:-translate-y-0.5"
                [disabled]="!commentForm.value.content?.trim()"
              >
                Submit Comment
              </button>
            </form>
          } @else {
            <p class="text-gray-500 mb-6 text-center py-4 bg-white rounded-2xl shadow-md">Please log in to leave a comment.</p>
          }
          
          <!-- Enhanced comments display -->
          <div class="space-y-4">
            @if (comments.length > 0) {
              @for (comment of comments; track comment.comment_id) {
                <div class="bg-white rounded-2xl p-6 shadow-md hover:shadow-lg transition-shadow duration-300">
                  <div class="flex items-center space-x-3 mb-3">
                    <div class="w-10 h-10 bg-gradient-to-r from-orange-500 to-pink-500 rounded-full flex items-center justify-center text-white font-bold text-sm shadow-lg">
                      {{ (comment.username || 'U').charAt(0).toUpperCase() }}
                    </div>
                    <div>
                      <p class="font-semibold text-gray-900">{{ comment.username || 'User' }}</p>
                      <p class="text-xs text-gray-500">{{ comment.createdAt | date:'short' }}</p>
                    </div>
                  </div>
                  <p class="text-gray-800 ml-13 leading-relaxed">{{ comment.content }}</p>
                </div>
              }
            } @else {
              <div class="text-center py-12">
                <div class="w-16 h-16 bg-gradient-to-r from-gray-100 to-blue-100 rounded-full flex items-center justify-center mx-auto mb-4">
                  <svg class="w-8 h-8 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z"></path>
                  </svg>
                </div>
                <p class="text-gray-500 text-lg font-medium">No comments yet</p>
                <p class="text-gray-400 mt-1">Be the first to share your thoughts!</p>
              </div>
            }
          </div>
        </div>
      </div>
    } @else {
      <!-- Enhanced not found state -->
      <div class="text-center p-12">
        <div class="w-24 h-24 bg-gradient-to-br from-gray-100 to-blue-100 rounded-full flex items-center justify-center mx-auto mb-6">
          <svg class="w-12 h-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.172 16.172a4 4 0 015.656 0M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
          </svg>
        </div>
        <h3 class="text-2xl font-bold text-gray-700 mb-4">Recipe not found</h3>
        <p class="text-gray-500">The recipe you're looking for doesn't exist or has been removed.</p>
      </div>
    }
  </div>
</div>

<style>
@keyframes fade-in-up {
  from {
    opacity: 0;
    transform: translateY(30px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

.animate-fade-in-up {
  animation: fade-in-up 0.6s ease-out forwards;
}
</style>



================================================
FILE: recipe-app/src/app/page/recipe-detail/recipe-detail.spec.ts
================================================
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { RecipeDetailComponent } from './recipe-detail';

describe('RecipeDetail', () => {
  let component: RecipeDetailComponent;
  let fixture: ComponentFixture<RecipeDetailComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [RecipeDetailComponent]
    })
    .compileComponents();

    fixture = TestBed.createComponent(RecipeDetailComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});



================================================
FILE: recipe-app/src/app/page/recipe-detail/recipe-detail.ts
================================================
// import { Component } from '@angular/core';

// @Component({
//   selector: 'app-recipe-detail',
//   imports: [],
//   templateUrl: './recipe-detail.html',
//   styleUrl: './recipe-detail.css'
// })
// export class RecipeDetail {

// }

// import { Component, OnInit, computed } from '@angular/core';
// import { CommonModule } from '@angular/common';
// import { ActivatedRoute, Router } from '@angular/router';
// import { RecipeService } from '../../service/recipe-service';
// import { AuthService } from '../../service/auth-service';
// import { Recipe } from '../../models/interface/recipe.interface';
// import {} from '../../models/interface/recipe.interface';
// import { Comment } from '../../models/interface/recipe.interface';
// import { FormBuilder, FormGroup, ReactiveFormsModule } from '@angular/forms';

// @Component({
//   selector: 'app-recipe-detail',
//   standalone: true,
//   imports: [CommonModule, ReactiveFormsModule],
//   templateUrl: './recipe-detail.html',
// })
// export class RecipeDetailComponent implements OnInit {
//   recipe: Recipe | null = null;
//   comments: Comment[] = [];
//   loading = true;
//   error: string = '';

//   currentUser;
//   isOwner;
  
//   commentForm: FormGroup;

//   constructor(
//     private route: ActivatedRoute,
//     private recipeService: RecipeService,
//     private authService: AuthService,
//     private fb: FormBuilder
//   ) {
//     this.currentUser = this.authService.currentUser;
//     this.isOwner = computed(() => this.currentUser()?.id === this.recipe?.user_id);
//     this.commentForm = this.fb.group({
//       content: ['']
//     });
//   }

//   ngOnInit() {
//     const recipeId = this.route.snapshot.paramMap.get('id');
//     if (recipeId) {
//       this.recipeService.getRecipeById(recipeId).subscribe({
//         next: (recipe) => {
//           this.recipe = recipe;
//           this.loading = false;
//           this.loadComments(recipeId);
//         },
//         error: () => {
//           this.error = 'Failed to load recipe.';
//           this.loading = false;
//         }
//       });
//     }
//   }

//   loadComments(recipeId: string) {
//     this.recipeService.getComments(recipeId).subscribe(comments => this.comments = comments);
//   }

//   addComment() {
//     const content = this.commentForm.value.content;
//     const userId = this.authService.getUserId();
//     const recipeId = this.recipe?.recipe_id.toString();

//     if (content && userId && recipeId) {
//       this.recipeService.addComment(recipeId, content, userId).subscribe(newComment => {
//         this.comments.push(newComment);
//         this.commentForm.reset();
//       });
//     }
//   }

//   addRating(rating: number) {
//     const userId = this.authService.getUserId();
//     const recipeId = this.recipe?.recipe_id.toString();
//     if (userId && recipeId) {
//       this.recipeService.addRating(recipeId, rating, userId).subscribe();
//     }
//   }
// }


import { Component, OnInit, computed } from '@angular/core';
import { CommonModule } from '@angular/common';
import { ActivatedRoute, Router } from '@angular/router';
import { RecipeService } from '../../service/recipe-service';
import { AuthService } from '../../service/auth-service'; // Fix import path
import { Recipe, Comment } from '../../models/interface/recipe.interface'; // Fix imports
import { FormBuilder, FormGroup, ReactiveFormsModule } from '@angular/forms';

@Component({
  selector: 'app-recipe-detail',
  standalone: true,
  imports: [CommonModule, ReactiveFormsModule],
  templateUrl: './recipe-detail.html',
})
export class RecipeDetailComponent implements OnInit {
  recipe: Recipe | null = null;
  comments: Comment[] = [];
  loading = true;
  error: string = '';

  currentUser;
  isOwner;
  
  commentForm: FormGroup;

  constructor(
    private route: ActivatedRoute,
    private recipeService: RecipeService,
    private authService: AuthService,
    private fb: FormBuilder
  ) {
    this.currentUser = this.authService.currentUser;
    this.isOwner = computed(() => this.currentUser()?.id === this.recipe?.user_id);
    this.commentForm = this.fb.group({
      content: ['']
    });
  }

  ngOnInit() {
    const recipeId = this.route.snapshot.paramMap.get('id');
    if (recipeId) {
      this.recipeService.getRecipeById(recipeId).subscribe({
        next: (recipe) => {
          console.log('Recipe received:', recipe); // Debug log
          this.recipe = recipe;
          this.loading = false;
          this.loadComments(recipeId);
          this.loadUserRating(recipeId);
        },
        error: (err) => {
          console.error('Error loading recipe:', err); // Debug log
          this.error = 'Failed to load recipe.';
          this.loading = false;
        }
      });
    }
  }

  // Add method to get ingredients as array
  getIngredients(): string[] {
    if (!this.recipe?.ingredients) return [];
    
    try {
      // If ingredients is stored as JSON string, parse it
      if (typeof this.recipe.ingredients === 'string') {
        const parsed = JSON.parse(this.recipe.ingredients);
        return Array.isArray(parsed) ? parsed : [this.recipe.ingredients];
      }
      // If it's already an array
      if (Array.isArray(this.recipe.ingredients)) {
        return this.recipe.ingredients;
      }
      return [];
    } catch (error) {
      console.error('Error parsing ingredients:', error);
      return [];
    }
  }

  // Add method to get image URL
  getImageUrl(): string {
    if (!this.recipe?.image) return 'assets/placeholder.svg';
    
    // If it's already a full URL (Cloudinary), use it directly
    if (this.recipe.image.startsWith('http')) {
      return this.recipe.image;
    }
    
    // If it's a local filename, serve from backend uploads
    return `http://localhost:3000/uploads/${this.recipe.image}`;
  }

  loadComments(recipeId: string) {
    this.recipeService.getComments(recipeId).subscribe({
      next: (comments) => this.comments = comments,
      error: (err) => console.error('Error loading comments:', err)
    });
  }

  addComment() {
    const content = this.commentForm.value.content;
    const userId = this.authService.getUserId();
    const recipeId = this.recipe?.recipe_id.toString();

    if (content && userId && recipeId) {
      this.recipeService.addComment(recipeId, content, userId).subscribe({
        next: (newComment) => {
          this.comments.unshift(newComment); // Add to beginning so it appears at top
          this.commentForm.reset();
        },
        error: (err) => console.error('Error adding comment:', err)
      });
    }
  }

 addRating(rating: number) {
  const userId = this.authService.getUserId();
  const recipeId = this.recipe?.recipe_id.toString();

  console.log('Adding rating:', { recipeId, userId, rating }); // Debug log

  if (userId && recipeId) {
    this.recipeService.addRating(recipeId, rating, userId).subscribe({
      next: (response) => {
        console.log('Rating added successfully:', response);
        // Update the recipe's userRating to reflect the change in UI
        if (this.recipe) {
          this.recipe.userRating = rating;
        }
        // Optionally refresh the average rating
        this.loadAverageRating();
      },
      error: (err) => {
        console.error('Error adding rating:', err);
        alert('Failed to add rating. Please try again.');
      }
    });
  } else {
    alert('Please log in to rate this recipe.');
  }
}

// Add method to load average rating
loadAverageRating() {
  if (this.recipe) {
    this.recipeService.getAverageRating(this.recipe.recipe_id.toString()).subscribe({
      next: (response) => {
        console.log('Average rating:', response.averageRating);
        // Update UI with average rating
      },
      error: (err) => {
        console.error('Error loading average rating:', err);
      }
    });
  }
}

// Add method to load user's rating
loadUserRating(recipeId: string) {
  const userId = this.authService.getUserId();
  if (userId) {
    this.recipeService.getUserRating(recipeId, userId).subscribe({
      next: (response) => {
        console.log('User rating loaded:', response.userRating);
        if (this.recipe) {
          this.recipe.userRating = response.userRating;
        }
      },
      error: (err) => {
        console.error('Error loading user rating:', err);
      }
    });
  }
}
}



================================================
FILE: recipe-app/src/app/page/recipe-list/recipe-list.css
================================================



================================================
FILE: recipe-app/src/app/page/recipe-list/recipe-list.html
================================================
<div class="min-h-screen w-full bg-gradient-to-br from-orange-50 via-pink-50 to-rose-100 relative overflow-hidden px-4 sm:px-6 lg:px-8 py-12 pt-20">
  <!-- Added animated background elements -->
  <div class="absolute inset-0 overflow-hidden pointer-events-none">
    <div class="absolute -top-40 -right-40 w-80 h-80 bg-gradient-to-br from-orange-200/30 to-pink-200/30 rounded-full blur-3xl animate-pulse"></div>
    <div class="absolute -bottom-40 -left-40 w-80 h-80 bg-gradient-to-br from-rose-200/30 to-orange-200/30 rounded-full blur-3xl animate-pulse" style="animation-delay: 2s;"></div>
  </div>

  <div class="max-w-7xl mx-auto relative z-10">
    <!-- Enhanced title with gradient text and animation -->
    <div class="text-center mb-12 animate-fade-in-up">
      <h2 class="text-5xl md:text-6xl font-bold bg-gradient-to-r from-orange-600 via-pink-600 to-rose-600 bg-clip-text text-transparent mb-4">
        @if (mealType) {
          {{ mealType }} Recipes
        } @else {
          All Recipes
        }
      </h2>
      <div class="w-24 h-1 bg-gradient-to-r from-orange-500 to-pink-500 mx-auto rounded-full"></div>
    </div>

    @if (loading) {
      <!-- Enhanced loading state -->
      <div class="flex flex-col items-center justify-center py-20 animate-fade-in">
        <div class="relative">
          <div class="w-16 h-16 border-4 border-orange-200 border-t-orange-600 rounded-full animate-spin"></div>
          <div class="absolute inset-0 w-16 h-16 border-4 border-transparent border-r-pink-600 rounded-full animate-spin" style="animation-direction: reverse; animation-duration: 1.5s;"></div>
        </div>
        <p class="mt-6 text-lg text-gray-600 font-medium animate-pulse">Loading delicious recipes...</p>
      </div>
    } @else if (filteredRecipes.length > 0) {
      <!-- Enhanced recipe grid with glass effects and animations -->
      <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-8">
        @for (recipe of filteredRecipes; track recipe.recipe_id; let i = $index) {
          <a [routerLink]="['/recipes', recipe.recipe_id]"
            class="group bg-white/90 backdrop-blur-sm rounded-3xl shadow-lg overflow-hidden transform transition-all duration-500 hover:scale-105 hover:shadow-2xl border border-white/20 animate-fade-in-up hover:shadow-orange-200/50"
            [style.animation-delay]="(i * 0.1) + 's'">
            <!-- Enhanced image container with overlay effects -->
            <div class="relative h-56 overflow-hidden">
              <img [src]="recipe.image || '/placeholder.svg?height=224&width=400'" [alt]="recipe.title"
                class="w-full h-full object-cover transition-transform duration-700 group-hover:scale-110" />
              <div class="absolute inset-0 bg-gradient-to-t from-black/20 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
              <!-- Added floating difficulty badge -->
              <div class="absolute top-4 right-4 bg-white/90 backdrop-blur-sm px-3 py-1 rounded-full text-xs font-semibold text-gray-700 shadow-lg">
                {{ recipe.difficulty || 'Medium' }}
              </div>
              <!-- Added shimmer effect on hover -->
              <div class="absolute inset-0 bg-gradient-to-r from-transparent via-white/20 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300 transform -skew-x-12 group-hover:animate-shimmer"></div>
            </div>
            
            <!-- Enhanced content styling -->
            <div class="p-6">
              <h3 class="font-bold text-xl mb-3 text-gray-800 group-hover:text-orange-600 transition-colors duration-300 line-clamp-2">
                {{ recipe.title }}
              </h3>
              @if (recipe.description) {
                <p class="text-gray-600 mb-4 line-clamp-2 text-sm leading-relaxed">
                  {{ recipe.description }}
                </p>
              }
              
              <!-- Enhanced cuisine and timing info -->
              <div class="flex justify-between items-center text-sm">
                @if (recipe.cuisine) {
                  <span class="inline-block bg-gradient-to-r from-orange-100 to-pink-100 text-orange-700 px-3 py-1 rounded-full font-medium">
                    {{ recipe.cuisine }}
                  </span>
                }
                @if (recipe.preparationTime) {
                  <span class="text-gray-500 font-medium">{{ recipe.preparationTime }} mins</span>
                }
              </div>
            </div>
          </a>
        }
      </div>
    } @else {
      <!-- Enhanced empty state -->
      <div class="text-center py-20 animate-fade-in">
        <div class="w-24 h-24 bg-gradient-to-br from-orange-100 to-pink-100 rounded-full flex items-center justify-center mx-auto mb-6">
          <svg class="w-12 h-12 text-orange-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"></path>
          </svg>
        </div>
        <h3 class="text-2xl font-bold text-gray-700 mb-4">No recipes found</h3>
        <p class="text-gray-500 mb-8 max-w-md mx-auto">We couldn't find any recipes matching your criteria. Try adjusting your search or explore other categories!</p>
      </div>
    }
  </div>
</div>

<style>
@keyframes fade-in-up {
  from {
    opacity: 0;
    transform: translateY(30px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes fade-in {
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}

@keyframes shimmer {
  0% {
    transform: translateX(-100%) skewX(-12deg);
  }
  100% {
    transform: translateX(200%) skewX(-12deg);
  }
}

.animate-fade-in-up {
  animation: fade-in-up 0.6s ease-out forwards;
}

.animate-fade-in {
  animation: fade-in 0.6s ease-out forwards;
}

.animate-shimmer {
  animation: shimmer 1.5s ease-out;
}

.line-clamp-2 {
  display: -webkit-box;
  -webkit-line-clamp: 2;
  line-clamp: 2;
  -webkit-box-orient: vertical;
  overflow: hidden;
}
</style>



================================================
FILE: recipe-app/src/app/page/recipe-list/recipe-list.spec.ts
================================================
import { ComponentFixture, TestBed } from '@angular/core/testing';

import {  RecipeListComponent } from './recipe-list';

describe('RecipeList', () => {
  let component: RecipeListComponent;
  let fixture: ComponentFixture<RecipeListComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [RecipeListComponent]
    })
    .compileComponents();

    fixture = TestBed.createComponent(RecipeListComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});



================================================
FILE: recipe-app/src/app/page/recipe-list/recipe-list.ts
================================================
// import { Component } from '@angular/core';

// @Component({
//   selector: 'app-recipe-list',
//   imports: [],
//   templateUrl: './recipe-list.html',
//   styleUrl: './recipe-list.css'
// })
// export class RecipeList {

// }

import { Component, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { RecipeService } from '../../service/recipe-service';
import { Recipe } from '../../models/interface/recipe.interface';
import { RouterModule } from '@angular/router';
import { ActivatedRoute } from '@angular/router';

@Component({
  selector: 'app-recipe-list',
  standalone: true,
  imports: [CommonModule, RouterModule],
  templateUrl: './recipe-list.html',
})
export class RecipeListComponent implements OnInit {
  recipes: Recipe[] = [];
  filteredRecipes: Recipe[] = [];
  loading = true;
  mealType: string | null = null;

  constructor(private recipeService: RecipeService, private route: ActivatedRoute) {}

  ngOnInit() {
    this.route.queryParams.subscribe(params => {
      this.mealType = params['mealType'] || null;
      this.loadRecipes();
    });
  }

  loadRecipes() {
    this.recipeService.getAllRecipes().subscribe(data => {
      this.recipes = data;
      this.filterRecipes();
      this.loading = false;
    });
  }

  filterRecipes() {
    if (this.mealType) {
      this.filteredRecipes = this.recipes.filter(recipe =>
        recipe.mealType.toLowerCase() === this.mealType!.toLowerCase()
      );
    } else {
      this.filteredRecipes = this.recipes;
    }
  }
}



================================================
FILE: recipe-app/src/app/page/signup/signup.css
================================================



================================================
FILE: recipe-app/src/app/page/signup/signup.html
================================================
<div class="min-h-screen flex items-center justify-center bg-gradient-to-br from-orange-50 via-pink-50 to-rose-100 py-12 px-4 sm:px-6 lg:px-8 relative overflow-hidden">
  <!-- Added animated background elements -->
  <div class="absolute inset-0 overflow-hidden pointer-events-none">
    <div class="absolute -top-40 -right-40 w-80 h-80 bg-gradient-to-br from-orange-200/30 to-pink-200/30 rounded-full blur-3xl animate-pulse"></div>
    <div class="absolute -bottom-40 -left-40 w-80 h-80 bg-gradient-to-br from-rose-200/30 to-orange-200/30 rounded-full blur-3xl animate-pulse" style="animation-delay: 2s;"></div>
  </div>

  <div class="max-w-md w-full space-y-8 bg-white/90 backdrop-blur-sm p-10 rounded-3xl shadow-2xl border border-white/20 relative z-10 animate-fade-in-up">
    <div class="text-center">
      <!-- Enhanced title with gradient text -->
      <h2 class="mt-6 text-4xl font-bold bg-gradient-to-r from-orange-600 via-pink-600 to-rose-600 bg-clip-text text-transparent mb-4">
        Join Our Culinary Community
      </h2>
      <div class="w-16 h-1 bg-gradient-to-r from-orange-500 to-pink-500 mx-auto rounded-full mb-4"></div>
      <p class="text-gray-600 font-medium">
        Create your account and start sharing recipes
      </p>
    </div>
    
    @if (error) {
      <!-- Enhanced error styling -->
      <div class="bg-red-50 border-l-4 border-red-400 text-red-700 p-4 rounded-xl shadow-md animate-fade-in" role="alert">
        <div class="flex items-center">
          <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
          </svg>
          <p class="font-semibold">{{ error }}</p>
        </div>
      </div>
    }

    <form [formGroup]="signupForm" (ngSubmit)="onSubmit()" class="mt-8 space-y-6">
      <!-- Enhanced form fields with floating labels and better styling -->
      <div class="space-y-4">
        <div class="relative">
          <input formControlName="fullname" id="fullname" type="text" required
            class="peer w-full px-4 py-4 bg-white/80 border-2 border-gray-200 rounded-2xl focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-transparent transition-all duration-300 placeholder-transparent shadow-lg hover:shadow-xl"
            placeholder="Full Name">
          <label for="fullname" class="absolute left-4 -top-2.5 bg-white px-2 text-sm font-medium text-gray-600 transition-all peer-placeholder-shown:text-base peer-placeholder-shown:text-gray-400 peer-placeholder-shown:top-4 peer-focus:-top-2.5 peer-focus:text-sm peer-focus:text-orange-600">
            Full Name
          </label>
        </div>

        <div class="relative">
          <input formControlName="username" id="username" type="text" required
            class="peer w-full px-4 py-4 bg-white/80 border-2 border-gray-200 rounded-2xl focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-transparent transition-all duration-300 placeholder-transparent shadow-lg hover:shadow-xl"
            placeholder="Username">
          <label for="username" class="absolute left-4 -top-2.5 bg-white px-2 text-sm font-medium text-gray-600 transition-all peer-placeholder-shown:text-base peer-placeholder-shown:text-gray-400 peer-placeholder-shown:top-4 peer-focus:-top-2.5 peer-focus:text-sm peer-focus:text-orange-600">
            Username
          </label>
        </div>

        <div class="relative">
          <input formControlName="email" id="email" type="email" required
            class="peer w-full px-4 py-4 bg-white/80 border-2 border-gray-200 rounded-2xl focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-transparent transition-all duration-300 placeholder-transparent shadow-lg hover:shadow-xl"
            placeholder="Email">
          <label for="email" class="absolute left-4 -top-2.5 bg-white px-2 text-sm font-medium text-gray-600 transition-all peer-placeholder-shown:text-base peer-placeholder-shown:text-gray-400 peer-placeholder-shown:top-4 peer-focus:-top-2.5 peer-focus:text-sm peer-focus:text-orange-600">
            Email Address
          </label>
        </div>

        <div class="relative">
          <input formControlName="password" id="password" type="password" required
            class="peer w-full px-4 py-4 bg-white/80 border-2 border-gray-200 rounded-2xl focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-transparent transition-all duration-300 placeholder-transparent shadow-lg hover:shadow-xl"
            placeholder="Password">
          <label for="password" class="absolute left-4 -top-2.5 bg-white px-2 text-sm font-medium text-gray-600 transition-all peer-placeholder-shown:text-base peer-placeholder-shown:text-gray-400 peer-placeholder-shown:top-4 peer-focus:-top-2.5 peer-focus:text-sm peer-focus:text-orange-600">
            Password
          </label>
        </div>

        <div class="relative">
          <select formControlName="role" id="role"
            class="w-full px-4 py-4 bg-white/80 border-2 border-gray-200 rounded-2xl focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-transparent transition-all duration-300 shadow-lg hover:shadow-xl cursor-pointer">
            <option value="user">User</option>
            <option value="admin">Admin</option>
          </select>
          <label for="role" class="absolute left-4 -top-2.5 bg-white px-2 text-sm font-medium text-orange-600">
            Role
          </label>
        </div>
      </div>
      
      <!-- Enhanced button with gradient and animations -->
      <button type="submit" [disabled]="signupForm.invalid || loading" 
        class="group relative w-full flex justify-center items-center py-4 px-6 border border-transparent text-sm font-semibold rounded-2xl text-white bg-gradient-to-r from-orange-600 to-pink-600 hover:from-orange-700 hover:to-pink-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-orange-500 transition-all duration-300 disabled:opacity-50 disabled:cursor-not-allowed shadow-xl hover:shadow-2xl transform hover:-translate-y-0.5">
        @if (loading) {
          <svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-white" fill="none" viewBox="0 0 24 24">
            <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
            <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
          </svg>
          Signing up...
        } @else {
          <svg class="w-5 h-5 mr-2 group-hover:scale-110 transition-transform duration-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M18 9v3m0 0v3m0-3h3m-3 0h-3m-2-5a4 4 0 11-8 0 4 4 0 018 0zM3 20a6 6 0 0112 0v1H3v-1z"></path>
          </svg>
          Sign up
        }
      </button>
    </form>
    
    <div class="text-center">
      <!-- Enhanced link styling -->
      <a routerLink="/login" class="font-medium text-orange-600 hover:text-pink-600 transition-colors duration-300 hover:underline">
        Already have an account? <span class="font-semibold">Log in</span>
      </a>
    </div>
  </div>
</div>

<style>
@keyframes fade-in-up {
  from {
    opacity: 0;
    transform: translateY(30px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes fade-in {
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}

.animate-fade-in-up {
  animation: fade-in-up 0.6s ease-out forwards;
}

.animate-fade-in {
  animation: fade-in 0.6s ease-out forwards;
}
</style>



================================================
FILE: recipe-app/src/app/page/signup/signup.spec.ts
================================================
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { SignUpComponent } from './signup';

describe('Signup', () => {
  let component: SignUpComponent;
  let fixture: ComponentFixture<SignUpComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [SignUpComponent]
    })
    .compileComponents();

    fixture = TestBed.createComponent(SignUpComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});



================================================
FILE: recipe-app/src/app/page/signup/signup.ts
================================================
// import { Component } from '@angular/core';

// @Component({
//   selector: 'app-signup',
//   imports: [],
//   templateUrl: './signup.html',
//   styleUrl: './signup.css'
// })
// export class Signup {

// }

import { Component } from '@angular/core';
import { CommonModule } from '@angular/common';
import { Router, RouterModule } from '@angular/router';
import { FormBuilder, FormGroup, ReactiveFormsModule, Validators } from '@angular/forms';
import { AuthService } from '../../service/auth-service';
import { finalize } from 'rxjs';

@Component({
  selector: 'app-sign-up',
  standalone: true,
  imports: [CommonModule, RouterModule, ReactiveFormsModule],
  templateUrl: './signup.html',
})
export class SignUpComponent {
  signupForm: FormGroup;
  error: string = '';
  loading = false;

  constructor(
    private fb: FormBuilder,
    private authService: AuthService,
    private router: Router
  ) {
    this.signupForm = this.fb.group({
      fullname: ['', Validators.required],
      username: ['', Validators.required],
      email: ['', [Validators.required, Validators.email]],
      password: ['', [Validators.required, Validators.minLength(6)]],
      role: ['user', Validators.required],
    });
  }

  onSubmit() {
    if (this.signupForm.invalid) return;
    
    this.loading = true;
    this.error = '';

    this.authService.signup(this.signupForm.value)
      .pipe(finalize(() => this.loading = false))
      .subscribe({
        next: () => {
          // You might want to show a success message here
          this.router.navigate(['/login']);
        },
        error: (err) => {
          this.error = err.error.message || 'Signup failed. Please try again.';
        }
      });
  }
}


================================================
FILE: recipe-app/src/app/service/auth-service.spec.ts
================================================
import { TestBed } from '@angular/core/testing';

import { AuthService } from './auth-service';

describe('AuthService', () => {
  let service: AuthService;

  beforeEach(() => {
    TestBed.configureTestingModule({});
    service = TestBed.inject(AuthService);
  });

  it('should be created', () => {
    expect(service).toBeTruthy();
  });
});



================================================
FILE: recipe-app/src/app/service/auth-service.ts
================================================
// import { Injectable } from '@angular/core';

// @Injectable({
//   providedIn: 'root'
// })
// export class AuthService {
  
// }

import { Injectable, signal } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Router } from '@angular/router';
import { Observable, tap } from 'rxjs';
import { jwtDecode } from 'jwt-decode';
import { User, AuthResponse, DecodedToken } from '../models/interface/user.interface';

@Injectable({
  providedIn: 'root'
})
export class AuthService {
  private apiUrl = 'http://localhost:3000/api/users';
  
  currentUser = signal<User | null>(this.getInitialUser());

  constructor(private http: HttpClient, private router: Router) {}

  private getInitialUser(): User | null {
    if (typeof sessionStorage !== 'undefined') {
      const user = sessionStorage.getItem('user');
      return user ? JSON.parse(user) : null;
    }
    return null;
  }

  login(credentials: any): Observable<AuthResponse> {
    return this.http.post<AuthResponse>(`${this.apiUrl}/login`, credentials).pipe(
      tap(response => {
        sessionStorage.setItem('token', response.token);
        sessionStorage.setItem('user', JSON.stringify(response.user));
        this.currentUser.set(response.user);
      })
    );
  }

  signup(userInfo: any): Observable<any> {
    return this.http.post(`${this.apiUrl}/register`, userInfo);
  }

  logout(): void {
    sessionStorage.removeItem('token');
    sessionStorage.removeItem('user');
    this.currentUser.set(null);
    this.router.navigate(['/login']);
  }

  isAuthenticated(): boolean {
    if (typeof sessionStorage === 'undefined') return false;
    const token = sessionStorage.getItem('token');
    if (!token) return false;
    
    try {
      const decoded: DecodedToken = jwtDecode(token);
      return decoded.exp * 1000 > Date.now();
    } catch {
      return false;
    }
  }

  getUserId(): number | null {
     if (typeof sessionStorage === 'undefined') return null;
    const userStr = sessionStorage.getItem('user');
    if (!userStr) return null;
    const user: User = JSON.parse(userStr);
    return user.id;
  }
}


================================================
FILE: recipe-app/src/app/service/cloudinary.service.spec.ts
================================================
import { TestBed } from '@angular/core/testing';

import { CloudinaryService } from './cloudinary.service';

describe('CloudinaryService', () => {
  let service: CloudinaryService;

  beforeEach(() => {
    TestBed.configureTestingModule({});
    service = TestBed.inject(CloudinaryService);
  });

  it('should be created', () => {
    expect(service).toBeTruthy();
  });
});



================================================
FILE: recipe-app/src/app/service/cloudinary.service.ts
================================================
// import { Injectable } from '@angular/core';

// @Injectable({
//   providedIn: 'root'
// })
// export class CloudinaryService {
  
// }

import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

@Injectable({
  providedIn: 'root'
})
export class CloudinaryService {
  private cloudinaryUrl = 'https://api.cloudinary.com/v1_1/dmenponou/image/upload';
  private uploadPreset = 'image_upload';

  constructor(private http: HttpClient) {}

  uploadImage(file: File): Observable<string> {
    const formData = new FormData();
    formData.append('file', file);
    formData.append('upload_preset', this.uploadPreset);
    
    return this.http.post<any>(this.cloudinaryUrl, formData).pipe(
      map(response => response.secure_url)
    );
  }
}


================================================
FILE: recipe-app/src/app/service/recipe-events.service.ts
================================================
import { Injectable } from '@angular/core';
import { Subject } from 'rxjs';
import { Recipe } from '../models/interface/recipe.interface';

@Injectable({
  providedIn: 'root'
})
export class RecipeEventsService {
  private recipeCreatedSource = new Subject<Recipe>();
  private recipeUpdatedSource = new Subject<Recipe>();
  private recipeDeletedSource = new Subject<number>();

  recipeCreated$ = this.recipeCreatedSource.asObservable();
  recipeUpdated$ = this.recipeUpdatedSource.asObservable();
  recipeDeleted$ = this.recipeDeletedSource.asObservable();

  emitRecipeCreated(recipe: Recipe) {
    this.recipeCreatedSource.next(recipe);
  }

  emitRecipeUpdated(recipe: Recipe) {
    this.recipeUpdatedSource.next(recipe);
  }

  emitRecipeDeleted(recipeId: number) {
    this.recipeDeletedSource.next(recipeId);
  }
}



================================================
FILE: recipe-app/src/app/service/recipe-service.spec.ts
================================================
import { TestBed } from '@angular/core/testing';

import { RecipeService } from './recipe-service';

describe('RecipeService', () => {
  let service: RecipeService;

  beforeEach(() => {
    TestBed.configureTestingModule({});
    service = TestBed.inject(RecipeService);
  });

  it('should be created', () => {
    expect(service).toBeTruthy();
  });
});



================================================
FILE: recipe-app/src/app/service/recipe-service.ts
================================================
// import { Injectable } from '@angular/core';

// @Injectable({
//   providedIn: 'root'
// })
// export class RecipeService {
  
// }

import { Injectable } from '@angular/core';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { Observable } from 'rxjs';
import { Recipe } from '../models/interface/recipe.interface';

@Injectable({
  providedIn: 'root'
})
export class RecipeService {
  private apiUrl = 'http://localhost:3000/api/recipes';

  constructor(private http: HttpClient) {}

  private getAuthHeaders(): HttpHeaders {
    const token = typeof sessionStorage !== 'undefined' ? sessionStorage.getItem('token') : null;
    return new HttpHeaders({
      'Authorization': `Bearer ${token}`
    });
  }

  // createRecipe(recipeData: any): Observable<any> {
  //   const formData = new FormData();
    
  //   // Add all form fields to FormData
  //   formData.append('title', recipeData.title);
  //   formData.append('user_id', recipeData.user_id.toString());
  //   formData.append('description', recipeData.description);
  //   formData.append('ingredients', recipeData.ingredients);
  //   formData.append('instructions', recipeData.instructions);
  //   formData.append('preparationTime', recipeData.preparationTime.toString());
  //   formData.append('difficulty', recipeData.difficulty);
  //   formData.append('cuisine', recipeData.cuisine);
  //   formData.append('mealType', recipeData.mealType);
    
  //   // Add image if it exists
  //   if (recipeData.image) {
  //     console.log('Appending image to FormData:', recipeData.image);
  //     formData.append('image', recipeData.image);
  //   }
  //   console.log('FormData entries:');
  // for (let pair of formData.entries()) {
  //   console.log(pair[0] + ':', pair[1]);
  // }


  //   return this.http.post(`${this.apiUrl}/create`, formData, { 
  //     headers: this.getAuthHeaders() 
  //   });
  // }

    createRecipe(recipeData: any): Observable<any> {
    // When using Cloudinary, send JSON instead of FormData
    return this.http.post(`${this.apiUrl}/create`, recipeData, {
      headers: this.getAuthHeaders()
    });
  }

  updateRecipe(id: number, recipeData: any): Observable<Recipe> {
  return this.http.put<Recipe>(`${this.apiUrl}/${id}`, recipeData, {
    headers: this.getAuthHeaders()
  });
}

  getAllRecipes(): Observable<Recipe[]> {
    return this.http.get<Recipe[]>(`${this.apiUrl}/getall`);
  }

  getRecipeById(id: string): Observable<Recipe> {
    return this.http.get<Recipe>(`${this.apiUrl}/${id}`);
  }

  getMyRecipes(userId: number): Observable<Recipe[]> {
    return this.http.get<Recipe[]>(`${this.apiUrl}/my-recipes/${userId}`, { headers: this.getAuthHeaders() });
  }
  
  searchRecipes(query: string): Observable<Recipe[]> {
    return this.http.get<Recipe[]>(`${this.apiUrl}/search/${query}`);
  }

  deleteRecipe(id: number): Observable<any> {
    return this.http.delete(`${this.apiUrl}/${id}`, { headers: this.getAuthHeaders() });
  }

  
  
  // Add other methods like create, update, comments, ratings as needed.
  
  // Comments methods
  getComments(recipeId: string): Observable<any[]> {
    return this.http.get<any[]>(`http://localhost:3000/api/comments/${recipeId}`);
  }

  addComment(recipeId: string, content: string, userId: number): Observable<any> {
    return this.http.post(`http://localhost:3000/api/comments/${recipeId}`,
      { content, userId },
      { headers: this.getAuthHeaders() }
    );
  }
  
  // Ratings methods
  addRating(recipeId: string, rating: number, userId: number): Observable<any> {
  return this.http.post('http://localhost:3000/api/ratings/rate', {
    recipeId: parseInt(recipeId),
    userId: userId,
    rating: rating
  }, {
    headers: this.getAuthHeaders()
  });
}

// Add method to get average rating
getAverageRating(recipeId: string): Observable<any> {
  return this.http.get(`http://localhost:3000/api/ratings/rate/${recipeId}`, {
    headers: this.getAuthHeaders()
  });
}

// Add method to get user's rating for a recipe
getUserRating(recipeId: string, userId: number): Observable<any> {
  return this.http.get(`http://localhost:3000/api/ratings/rate/user/${recipeId}/${userId}`, {
    headers: this.getAuthHeaders()
  });
}
}


================================================
FILE: server/package.json
================================================
{
  "name": "node",
  "version": "1.0.0",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1",
    "start": "tsc && node dist/index.js",
    "lint": "eslint \"{src,apps,libs,test}/**/*.ts\"",
    "lint:fix": "eslint \"{src,apps,libs,test}/**/*.ts\" --fix",
    "format": "prettier --write \"src/**/*.ts\""
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "type": "commonjs",
  "description": "",
  "dependencies": {
    "@types/body-parser": "^1.19.5",
    "@types/mysql": "^2.15.26",
    "bcrypt": "^5.1.1",
    "body-parser": "^1.20.3",
    "cors": "^2.8.5",
    "dotenv": "^16.4.7",
    "express": "^4.21.2",
    "jsonwebtoken": "^9.0.2",
    "multer": "^1.4.5-lts.1",
    "mysql2": "^3.12.0",
    "sequelize": "^6.37.5"
  },
  "devDependencies": {
    "@types/bcrypt": "^5.0.2",
    "@types/cors": "^2.8.17",
    "@types/express": "^5.0.0",
    "@types/jsonwebtoken": "^9.0.8",
    "@types/multer": "^1.4.12",
    "@types/node": "^22.13.1",
    "@types/swagger-jsdoc": "^6.0.4",
    "@types/swagger-ui-express": "^4.1.7",
    "@typescript-eslint/eslint-plugin": "^8.42.0",
    "@typescript-eslint/parser": "^8.42.0",
    "eslint": "^9.35.0",
    "eslint-config-prettier": "^10.1.8",
    "eslint-plugin-prettier": "^5.5.4",
    "nodemon": "^3.1.9",
    "prettier": "^3.6.2",
    "swagger-jsdoc": "^6.2.8",
    "swagger-ui-express": "^5.0.1",
    "ts-node": "^10.9.2",
    "typescript": "^5.7.3"
  }
}



================================================
FILE: server/tsconfig.json
================================================
{
  "compilerOptions": {
    /* Visit https://aka.ms/tsconfig to read more about this file */

    /* Projects */
    // "incremental": true,                              /* Save .tsbuildinfo files to allow for incremental compilation of projects. */
    // "composite": true,                                /* Enable constraints that allow a TypeScript project to be used with project references. */
    // "tsBuildInfoFile": "./.tsbuildinfo",              /* Specify the path to .tsbuildinfo incremental compilation file. */
    // "disableSourceOfProjectReferenceRedirect": true,  /* Disable preferring source files instead of declaration files when referencing composite projects. */
    // "disableSolutionSearching": true,                 /* Opt a project out of multi-project reference checking when editing. */
    // "disableReferencedProjectLoad": true,             /* Reduce the number of projects loaded automatically by TypeScript. */

    /* Language and Environment */
    "target": "ES2022",                                  /* Set the JavaScript language version for emitted JavaScript and include compatible library declarations. */
    // "lib": [],                                        /* Specify a set of bundled library declaration files that describe the target runtime environment. */
    // "jsx": "preserve",                                /* Specify what JSX code is generated. */
    // "experimentalDecorators": true,                   /* Enable experimental support for legacy experimental decorators. */
    // "emitDecoratorMetadata": true,                    /* Emit design-type metadata for decorated declarations in source files. */
    // "jsxFactory": "",                                 /* Specify the JSX factory function used when targeting React JSX emit, e.g. 'React.createElement' or 'h'. */
    // "jsxFragmentFactory": "",                         /* Specify the JSX Fragment reference used for fragments when targeting React JSX emit e.g. 'React.Fragment' or 'Fragment'. */
    // "jsxImportSource": "",                            /* Specify module specifier used to import the JSX factory functions when using 'jsx: react-jsx*'. */
    // "reactNamespace": "",                             /* Specify the object invoked for 'createElement'. This only applies when targeting 'react' JSX emit. */
    // "noLib": true,                                    /* Disable including any library files, including the default lib.d.ts. */
    // "useDefineForClassFields": true,                  /* Emit ECMAScript-standard-compliant class fields. */
    // "moduleDetection": "auto",                        /* Control what method is used to detect module-format JS files. */

    /* Modules */
    "module": "commonjs",                                /* Specify what module code is generated. */
    "rootDir": "./src",                                  /* Specify the root folder within your source files. */
    "moduleResolution": "node",                     /* Specify how TypeScript looks up a file from a given module specifier. */
    // "baseUrl": "./",                                  /* Specify the base directory to resolve non-relative module names. */
    // "paths": {},                                      /* Specify a set of entries that re-map imports to additional lookup locations. */
    // "rootDirs": [],                                   /* Allow multiple folders to be treated as one when resolving modules. */
    // "typeRoots": [],                                  /* Specify multiple folders that act like './node_modules/@types'. */
    // "types": [],                                      /* Specify type package names to be included without being referenced in a source file. */
    // "allowUmdGlobalAccess": true,                     /* Allow accessing UMD globals from modules. */
    // "moduleSuffixes": [],                             /* List of file name suffixes to search when resolving a module. */
    // "allowImportingTsExtensions": true,               /* Allow imports to include TypeScript file extensions. Requires '--moduleResolution bundler' and either '--noEmit' or '--emitDeclarationOnly' to be set. */
    // "rewriteRelativeImportExtensions": true,          /* Rewrite '.ts', '.tsx', '.mts', and '.cts' file extensions in relative import paths to their JavaScript equivalent in output files. */
    // "resolvePackageJsonExports": true,                /* Use the package.json 'exports' field when resolving package imports. */
    // "resolvePackageJsonImports": true,                /* Use the package.json 'imports' field when resolving imports. */
    // "customConditions": [],                           /* Conditions to set in addition to the resolver-specific defaults when resolving imports. */
    // "noUncheckedSideEffectImports": true,             /* Check side effect imports. */
    // "resolveJsonModule": true,                        /* Enable importing .json files. */
    // "allowArbitraryExtensions": true,                 /* Enable importing files with any extension, provided a declaration file is present. */
    // "noResolve": true,                                /* Disallow 'import's, 'require's or '<reference>'s from expanding the number of files TypeScript should add to a project. */

    /* JavaScript Support */
    // "allowJs": true,                                  /* Allow JavaScript files to be a part of your program. Use the 'checkJS' option to get errors from these files. */
    // "checkJs": true,                                  /* Enable error reporting in type-checked JavaScript files. */
    // "maxNodeModuleJsDepth": 1,                        /* Specify the maximum folder depth used for checking JavaScript files from 'node_modules'. Only applicable with 'allowJs'. */

    /* Emit */
    // "declaration": true,                              /* Generate .d.ts files from TypeScript and JavaScript files in your project. */
    // "declarationMap": true,                           /* Create sourcemaps for d.ts files. */
    // "emitDeclarationOnly": true,                      /* Only output d.ts files and not JavaScript files. */
    // "sourceMap": true,                                /* Create source map files for emitted JavaScript files. */
    // "inlineSourceMap": true,                          /* Include sourcemap files inside the emitted JavaScript. */
    // "noEmit": true,                                   /* Disable emitting files from a compilation. */
    // "outFile": "./",                                  /* Specify a file that bundles all outputs into one JavaScript file. If 'declaration' is true, also designates a file that bundles all .d.ts output. */
    "outDir": "./dist",                                   /* Specify an output folder for all emitted files. */
    // "removeComments": true,                           /* Disable emitting comments. */
    // "importHelpers": true,                            /* Allow importing helper functions from tslib once per project, instead of including them per-file. */
    // "downlevelIteration": true,                       /* Emit more compliant, but verbose and less performant JavaScript for iteration. */
    // "sourceRoot": "",                                 /* Specify the root path for debuggers to find the reference source code. */
    // "mapRoot": "",                                    /* Specify the location where debugger should locate map files instead of generated locations. */
    // "inlineSources": true,                            /* Include source code in the sourcemaps inside the emitted JavaScript. */
    // "emitBOM": true,                                  /* Emit a UTF-8 Byte Order Mark (BOM) in the beginning of output files. */
    // "newLine": "crlf",                                /* Set the newline character for emitting files. */
    // "stripInternal": true,                            /* Disable emitting declarations that have '@internal' in their JSDoc comments. */
    // "noEmitHelpers": true,                            /* Disable generating custom helper functions like '__extends' in compiled output. */
    // "noEmitOnError": true,                            /* Disable emitting files if any type checking errors are reported. */
    // "preserveConstEnums": true,                       /* Disable erasing 'const enum' declarations in generated code. */
    // "declarationDir": "./",                           /* Specify the output directory for generated declaration files. */

    /* Interop Constraints */
    // "isolatedModules": true,                          /* Ensure that each file can be safely transpiled without relying on other imports. */
    // "verbatimModuleSyntax": true,                     /* Do not transform or elide any imports or exports not marked as type-only, ensuring they are written in the output file's format based on the 'module' setting. */
    // "isolatedDeclarations": true,                     /* Require sufficient annotation on exports so other tools can trivially generate declaration files. */
    // "allowSyntheticDefaultImports": true,             /* Allow 'import x from y' when a module doesn't have a default export. */
    "esModuleInterop": true,                             /* Emit additional JavaScript to ease support for importing CommonJS modules. This enables 'allowSyntheticDefaultImports' for type compatibility. */
    // "preserveSymlinks": true,                         /* Disable resolving symlinks to their realpath. This correlates to the same flag in node. */
    "forceConsistentCasingInFileNames": true,            /* Ensure that casing is correct in imports. */

    /* Type Checking */
    "strict": true,                                      /* Enable all strict type-checking options. */
    // "noImplicitAny": true,                            /* Enable error reporting for expressions and declarations with an implied 'any' type. */
    // "strictNullChecks": true,                         /* When type checking, take into account 'null' and 'undefined'. */
    // "strictFunctionTypes": true,                      /* When assigning functions, check to ensure parameters and the return values are subtype-compatible. */
    // "strictBindCallApply": true,                      /* Check that the arguments for 'bind', 'call', and 'apply' methods match the original function. */
    // "strictPropertyInitialization": true,             /* Check for class properties that are declared but not set in the constructor. */
    // "strictBuiltinIteratorReturn": true,              /* Built-in iterators are instantiated with a 'TReturn' type of 'undefined' instead of 'any'. */
    // "noImplicitThis": true,                           /* Enable error reporting when 'this' is given the type 'any'. */
    // "useUnknownInCatchVariables": true,               /* Default catch clause variables as 'unknown' instead of 'any'. */
    // "alwaysStrict": true,                             /* Ensure 'use strict' is always emitted. */
    // "noUnusedLocals": true,                           /* Enable error reporting when local variables aren't read. */
    // "noUnusedParameters": true,                       /* Raise an error when a function parameter isn't read. */
    // "exactOptionalPropertyTypes": true,               /* Interpret optional property types as written, rather than adding 'undefined'. */
    // "noImplicitReturns": true,                        /* Enable error reporting for codepaths that do not explicitly return in a function. */
    // "noFallthroughCasesInSwitch": true,               /* Enable error reporting for fallthrough cases in switch statements. */
    // "noUncheckedIndexedAccess": true,                 /* Add 'undefined' to a type when accessed using an index. */
    // "noImplicitOverride": true,                       /* Ensure overriding members in derived classes are marked with an override modifier. */
    // "noPropertyAccessFromIndexSignature": true,       /* Enforces using indexed accessors for keys declared using an indexed type. */
    // "allowUnusedLabels": true,                        /* Disable error reporting for unused labels. */
    // "allowUnreachableCode": true,                     /* Disable error reporting for unreachable code. */

    /* Completeness */
    // "skipDefaultLibCheck": true,                      /* Skip type checking .d.ts files that are included with TypeScript. */
    "skipLibCheck": true                                 /* Skip type checking all .d.ts files. */
  }
}



================================================
FILE: server/.eslintrc.json
================================================
{
  "root": true,
  "parser": "@typescript-eslint/parser",
  "plugins": ["@typescript-eslint"],
  "extends": [
    "eslint:recommended",
    "plugin:@typescript-eslint/recommended",
    "prettier"
  ],
  "parserOptions": {
    "ecmaVersion": 2020,
    "sourceType": "module",
    "project": "./tsconfig.json"
  },
  "env": {
    "node": true,
    "jest": true
  },
  "rules": {
    "prettier/prettier": "error",
    "@typescript-eslint/explicit-module-boundary-types": "off",
    "@typescript-eslint/no-explicit-any": "off"
  }
}


================================================
FILE: server/.prettierignore
================================================
/dist
/node_modules


================================================
FILE: server/.prettierrc.json
================================================
{
  "singleQuote": true,
  "semi": true,
  "tabWidth": 2,
  "trailingComma": "all",
  "printWidth": 120
}


================================================
FILE: server/src/index.ts
================================================
import express from 'express';
// import bodyParser from "body-parser";
import cors from 'cors';
import dotenv from 'dotenv';
import { sequelize } from './config/database';
import syncTables from './models/syncmodel';
import userRoutes from './routes/userRoutes';
import recipeRoutes from './routes/recipeRoutes';
import ratingRoutes from './routes/ratingRoutes';
import commentRoutes from './routes/commentRoutes';
import { swaggerDocs } from './swagger';
import { errorHandler } from './middleware/errorHandler';

import { QueryTypes } from 'sequelize';
import path from 'path';

dotenv.config();

const app = express();
const PORT: number = Number(process.env.PORT) || 3000;
// const bodyParser = require('body-parser');
swaggerDocs(app, PORT);

app.use(cors());
app.use(express.json());
// app.use(bodyParser.json());

// Serve static files from the 'uploads' directory
app.use('/uploads', express.static(path.join(__dirname, 'uploads')));

app.use('/api/USERS', userRoutes);
app.use('/api/recipes', recipeRoutes);
app.use('/api/ratings', ratingRoutes);
app.use('/api/comments', commentRoutes);
app.use(errorHandler);

const startServer = async () => {
  try {
    await sequelize.authenticate();
    console.log('Database connected successfully.');

    await syncTables();

    app.listen(PORT, () => {
      console.log(`Server is running on port ${PORT}`);
    });
  } catch (error) {
    console.error('Unable to connect to the database:', error);
  }
};

startServer();



================================================
FILE: server/src/swagger.ts
================================================
import { Express, Request, Response } from 'express';
import swaggerJsdoc from 'swagger-jsdoc';
import swaggerUi from 'swagger-ui-express';

const options: swaggerJsdoc.Options = {
  definition: {
    openapi: '3.0.0',
    info: {
      title: 'Recipe Sharing API',
      version: '1.0.0',
      description: 'API for managing users, recipes, ratings, and comments.',
    },
    servers: [
      {
        url: 'http://localhost:3000/api/USERS',
        description: 'User API Server',
      },
      {
        url: 'http://localhost:3000/api/recipes',
        description: 'Recipe API Server',
      },
      {
        url: 'http://localhost:3000/api/ratings',
        description: 'Ratings API Server',
      },
      {
        url: 'http://localhost:3000/api/comments',
        description: 'Comments API Server',
      },
    ],
    components: {
      securitySchemes: {
        BearerAuth: {
          type: 'http',
          scheme: 'bearer',
          bearerFormat: 'JWT',
        },
      },
    },
  },
  apis: [
    './src/routes/userRoutes.ts',
    './src/routes/recipeRoutes.ts',
    './src/routes/ratingRoutes.ts',
    './src/routes/commentRoutes.ts',
  ],
};

const specs = swaggerJsdoc(options);

export const swaggerDocs = (app: Express, port: number): void => {
  app.use(
    '/docs',
    swaggerUi.serve,
    swaggerUi.setup(specs, {
      customCss: '.swagger-ui .topbar { display: none }',
      customSiteTitle: 'API Documentation',
    }),
  );

  app.get('/docs.json', (req: Request, res: Response) => {
    res.setHeader('Content-Type', 'application/json');
    res.send(specs);
  });

  console.log(`📚 Docs available at http://localhost:${port}/docs`);
};



================================================
FILE: server/src/config/database.ts
================================================
import { Sequelize } from 'sequelize';
import dotenv from 'dotenv';

dotenv.config();

export const sequelize = new Sequelize(
  process.env.DB_NAME || 'recipe_sharing_platform',
  process.env.DB_USER || 'root',
  process.env.DB_PASSWORD || 'localhost',
  {
    host: process.env.DB_HOST || 'localhost',
    dialect: 'mysql',
    logging: false,
  },
);



================================================
FILE: server/src/controllers/commentController.ts
================================================
// import { Request, Response } from "express";
// import { sequelize } from "../config/database";
// import { QueryTypes } from "sequelize";

// const addComment = async (req: Request, res: Response): Promise<void> => {
//     try {
//         const { userId, content } = req.body;
//         const { recipeId } = req.params;

//         const [newComment] = await sequelize.query(
//             `INSERT INTO Comments (recipe_id, user_id, content, createdAt, updatedAt)
//                 VALUES (:recipeId, :userId, :content, NOW(), NOW())`,
//             {
//                 replacements: {
//                     recipeId,
//                     userId,
//                     content,
//                 },
//                 type: QueryTypes.INSERT,
//             }
//         );

//         res.status(201).json({ message: "Comment added successfully" });
//     } catch (error: any) {
//         // Log the detailed error for debugging
//         console.error("Error adding comment:", error);

//         res.status(500).json({ message: "Error adding comment", error: error.message });
//     }
// };

// const getComments = async (req: Request, res: Response): Promise<void> => {
//     try {
//         const { recipeId } = req.params;

//         const comments = await sequelize.query(
//             "SELECT * FROM Comments WHERE recipe_id = :recipeId",
//             {
//                 replacements: { recipeId },
//                 type: QueryTypes.SELECT,
//             }
//         );

//         res.status(200).json(comments);
//     } catch (error) {
//         res.status(500).json({ message: "Error fetching comments", error });
//     }
// };

// const updateComment = async (req: Request, res: Response): Promise<void> => {
//     try {
//         const { commentId, userId, content } = req.body;

//         // Check if the comment exists and belongs to the user
//         const [existingComment] = await sequelize.query(
//             "SELECT * FROM Comments WHERE comment_id = :commentId AND user_id = :userId",
//             {
//                 replacements: { commentId, userId },
//                 type: QueryTypes.SELECT,
//             }
//         );

//         if (!existingComment) {
//             res.status(404).json({ message: "Comment not found or unauthorized" });
//             return;
//         }

//         // Update comment content
//         await sequelize.query(
//             "UPDATE Comments SET content = :content, updatedAt = NOW() WHERE comment_id = :commentId",
//             {
//                 replacements: { content, commentId },
//                 type: QueryTypes.UPDATE,
//             }
//         );

//         res.status(200).json({ message: "Comment updated successfully" });
//     } catch (error) {
//         res.status(500).json({ message: "Error updating comment", error });
//     }
// };

// const deleteComment = async (req: Request, res: Response): Promise<void> => {
//     try {
//         const { commentId, userId } = req.body;

//         // Check if the comment exists and belongs to the user
//         const [existingComment] = await sequelize.query(
//             "SELECT * FROM Comments WHERE comment_id = :commentId AND user_id = :userId",
//             {
//                 replacements: { commentId, userId },
//                 type: QueryTypes.SELECT,
//             }
//         );

//         if (!existingComment) {
//             res.status(404).json({ message: "Comment not found or unauthorized" });
//             return;
//         }

//         // Mark the comment as deleted
//         await sequelize.query(
//             "UPDATE Comments SET is_deleted = 1 WHERE comment_id = :commentId",
//             {
//                 replacements: { commentId },
//                 type: QueryTypes.UPDATE,
//             }
//         );

//         res.status(200).json({ message: "Comment deleted successfully" });
//     } catch (error) {
//         res.status(500).json({ message: "Error deleting comment", error });
//     }
// };

// export default {
//     addComment,
//     getComments,
//     updateComment,
//     deleteComment,
// };

import { Request, Response } from 'express';
import CommentRepository from '../repositories/commentRepository';

const addComment = async (req: Request, res: Response): Promise<void> => {
  try {
    const { userId, content } = req.body;
    const { recipeId } = req.params;

    // Add the comment using the repository and get the new comment
    const newComment = await CommentRepository.addComment(Number(recipeId), userId, content);

    res.status(201).json(newComment);
  } catch (error: any) {
    console.error('Error adding comment:', error);
    res.status(500).json({ message: 'Error adding comment', error: error.message });
  }
};

const getComments = async (req: Request, res: Response): Promise<void> => {
  try {
    const { recipeId } = req.params;

    // Get the comments from the repository
    const comments = await CommentRepository.getCommentsByRecipe(Number(recipeId));

    res.status(200).json(comments);
  } catch (error: any) {
    console.error('Error fetching comments:', error);
    res.status(500).json({ message: 'Error fetching comments', error: error.message });
  }
};

const updateComment = async (req: Request, res: Response): Promise<void> => {
  try {
    const { commentId, userId, content } = req.body;

    // Check if the comment exists and belongs to the user
    const existingComment = await CommentRepository.getCommentByIdAndUser(commentId, userId);

    if (!existingComment) {
      res.status(404).json({ message: 'Comment not found or unauthorized' });
      return;
    }

    // Update the comment using the repository
    await CommentRepository.updateComment(commentId, content);

    res.status(200).json({ message: 'Comment updated successfully' });
  } catch (error) {
    res.status(500).json({ message: 'Error updating comment', error });
  }
};

const deleteComment = async (req: Request, res: Response): Promise<void> => {
  try {
    const { commentId, userId } = req.body;

    // Check if the comment exists and belongs to the user
    const existingComment = await CommentRepository.getCommentByIdAndUser(commentId, userId);

    if (!existingComment) {
      res.status(404).json({ message: 'Comment not found or unauthorized' });
      return;
    }

    // Delete the comment using the repository
    await CommentRepository.deleteComment(commentId);

    res.status(200).json({ message: 'Comment deleted successfully' });
  } catch (error) {
    res.status(500).json({ message: 'Error deleting comment', error });
  }
};

export default {
  addComment,
  getComments,
  updateComment,
  deleteComment,
};



================================================
FILE: server/src/controllers/favoriteController.ts
================================================
// import { Request, Response } from "express";
// import { sequelize } from "../config/db";
// import { QueryTypes } from "sequelize";

// const addFavorite = async (req: Request, res: Response): Promise<void> => {
//     try {
//         const { userId, recipeId } = req.body;

//         // Check if the recipe is already in favorites
//         const [existingFavorite] = await sequelize.query(
//             "SELECT * FROM Favorites WHERE user_id = :userId AND recipe_id = :recipeId",
//             {
//                 replacements: { userId, recipeId },
//                 type: QueryTypes.SELECT,
//             }
//         );

//         if (existingFavorite) {
//             res.status(400).json({ message: "Recipe already in favorites" });
//             return;
//         }

//         // Add recipe to favorites
//         await sequelize.query(
//             "INSERT INTO Favorites (user_id, recipe_id, created_at) VALUES (:userId, :recipeId, NOW())",
//             {
//                 replacements: { userId, recipeId },
//                 type: QueryTypes.INSERT,
//             }
//         );

//         res.status(201).json({ message: "Recipe added to favorites" });
//     } catch (error) {
//         res.status(500).json({ message: "Error adding to favorites", error });
//     }
// };

// const getFavorites = async (req: Request, res: Response): Promise<void> => {
//     try {
//         const { userId } = req.params;

//         const favorites = await sequelize.query(
//             "SELECT * FROM Recipes WHERE recipe_id IN (SELECT recipe_id FROM Favorites WHERE user_id = :userId)",
//             {
//                 replacements: { userId },
//                 type: QueryTypes.SELECT,
//             }
//         );

//         res.status(200).json(favorites);
//     } catch (error) {
//         res.status(500).json({ message: "Error fetching favorites", error });
//     }
// };

// const removeFavorite = async (req: Request, res: Response): Promise<void> => {
//     try {
//         const { userId, recipeId } = req.body;

// // Remove the
//     }



================================================
FILE: server/src/controllers/ratingController.ts
================================================
// import { Request, Response } from "express";
// import { sequelize } from "../config/database";
// import { QueryTypes } from "sequelize";

// const addRating = async (req: Request, res: Response): Promise<void> => {
//     try {
//         const { recipeId, userId, rating } = req.body;

//         // Check if the user has already rated the recipe
//         const [existingRating] = await sequelize.query(
//             "SELECT * FROM Ratings WHERE recipe_id = :recipeId AND user_id = :userId",
//             {
//                 replacements: { recipeId, userId },
//                 type: QueryTypes.SELECT,
//             }
//         );

//         if (existingRating) {
//             // ✅ If rating exists, update it instead of blocking
//             await sequelize.query(
//                 "UPDATE Ratings SET rating = :rating, updatedAt = NOW() WHERE recipe_id = :recipeId AND user_id = :userId",
//                 {
//                     replacements: { recipeId, userId, rating },
//                     type: QueryTypes.UPDATE,
//                 }
//             );

//             res.status(200).json({ message: "Rating updated successfully" });
//             return;
//         }

//         // If no existing rating, insert a new one
//         await sequelize.query(
//             "INSERT INTO Ratings (recipe_id, user_id, rating, createdAt, updatedAt) VALUES (:recipeId, :userId, :rating, NOW(), NOW())",
//             {
//                 replacements: { recipeId, userId, rating },
//                 type: QueryTypes.INSERT,
//             }
//         );

//         res.status(201).json({ message: "Rating added successfully" });
//     } catch (error) {
//         console.error("❌ Error adding/updating rating:", error);
//         res.status(500).json({ message: "Error adding/updating rating", error });
//     }
// };

// const getRating = async (req: Request, res: Response): Promise<void> => {
//     try {
//         console.log("✅ getRating controller called with recipeId:", req.params.recipeId);

//         const { recipeId } = req.params;

//         // Get average rating for the recipe
//         const [averageRating] = await sequelize.query(
//             "SELECT AVG(rating) AS avg_rating FROM Ratings WHERE recipe_id = :recipeId",
//             {
//                 replacements: { recipeId },
//                 type: QueryTypes.SELECT,
//             }
//         );

//         console.log("✅ Retrieved rating:", averageRating);

//         // ✅ Ensure a response is sent
//         res.status(200).json({ averageRating: averageRating });
//     } catch (error) {
//         console.error("❌ Error in getRating:", error);
//         res.status(500).json({ message: "Error fetching rating", error });
//     }
// };
// const updateRating = async (req: Request, res: Response): Promise<void> => {
//     try {
//         const { ratingId, userId, rating } = req.body;

//         // Check if the rating exists and belongs to the user
//         const [existingRating] = await sequelize.query(
//             "SELECT * FROM Ratings WHERE rate_id = :ratingId AND user_id = :userId",
//             {
//                 replacements: { ratingId, userId },
//                 type: QueryTypes.SELECT,
//             }
//         );

//         if (!existingRating) {
//             res.status(404).json({ message: "Rating not found or unauthorized" });
//             return;
//         }

//         // Update the rating
//         await sequelize.query(
//             "UPDATE Ratings SET rating = :rating, updatedAt = NOW() WHERE rate_id = :ratingId",
//             {
//                 replacements: { rating, ratingId },
//                 type: QueryTypes.UPDATE,
//             }
//         );

//         res.status(200).json({ message: "Rating updated successfully" });
//     } catch (error) {
//         res.status(500).json({ message: "Error updating rating", error });
//     }
// };

// const deleteRating = async (req: Request, res: Response): Promise<void> => {
//     try {
//         const { ratingId, userId } = req.body;

//         // Check if the rating exists and belongs to the user
//         const [existingRating] = await sequelize.query(
//             "SELECT * FROM Ratings WHERE rate_id = :ratingId AND user_id = :userId",
//             {
//                 replacements: { ratingId, userId },
//                 type: QueryTypes.SELECT,
//             }
//         );

//         if (!existingRating) {
//             res.status(404).json({ message: "Rating not found or unauthorized" });
//             return;
//         }

//         // Delete the rating
//         await sequelize.query(
//             "DELETE FROM Ratings WHERE rate_id = :ratingId",
//             {
//                 replacements: { ratingId },
//                 type: QueryTypes.DELETE,
//             }
//         );

//         res.status(200).json({ message: "Rating deleted successfully" });
//     } catch (error) {
//         res.status(500).json({ message: "Error deleting rating", error });
//     }
// };

// export default {
//     addRating,
//     getRating,
//     updateRating,
//     deleteRating,
// };

import { Request, Response } from 'express';
import RatingRepository from '../repositories/ratingRepository';

const addRating = async (req: Request, res: Response): Promise<void> => {
  try {
    console.log('Rating request received:', req.body); // Debug log

    const { recipeId, userId, rating } = req.body;

    // Validate input
    if (!recipeId || !userId || !rating) {
      res.status(400).json({ message: 'Missing required fields: recipeId, userId, or rating' });
      return;
    }

    if (rating < 1 || rating > 5) {
      res.status(400).json({ message: 'Rating must be between 1 and 5' });
      return;
    }

    // Check if the user has already rated the recipe
    const existingRating = await RatingRepository.getRatingByUserAndRecipe(recipeId, userId);

    if (existingRating) {
      // Update existing rating
      await RatingRepository.updateRating(recipeId, userId, rating);
      console.log('Rating updated successfully');
      res.status(200).json({
        message: 'Rating updated successfully',
        rating: rating,
        recipeId: recipeId,
      });
    } else {
      // Add new rating
      await RatingRepository.addRating(recipeId, userId, rating);
      console.log('Rating added successfully');
      res.status(201).json({
        message: 'Rating added successfully',
        rating: rating,
        recipeId: recipeId,
      });
    }
  } catch (error) {
    console.error('❌ Error adding/updating rating:', error);
    res.status(500).json({ message: 'Error adding/updating rating', error: error });
  }
};

const getRating = async (req: Request, res: Response): Promise<void> => {
  try {
    const { recipeId } = req.params;
    console.log('Getting rating for recipe:', recipeId);

    if (!recipeId) {
      res.status(400).json({ message: 'Recipe ID is required' });
      return;
    }

    // Get average rating for the recipe
    const averageRating = await RatingRepository.getAverageRating(Number(recipeId));

    console.log('Average rating found:', averageRating);
    res.status(200).json({ averageRating: averageRating || 0 });
  } catch (error) {
    console.error('❌ Error in getRating:', error);
    res.status(500).json({ message: 'Error fetching rating', error: error });
  }
};

const getUserRating = async (req: Request, res: Response): Promise<void> => {
  try {
    const { recipeId, userId } = req.params;
    console.log('Getting user rating for recipe:', recipeId, 'user:', userId);

    if (!recipeId || !userId) {
      res.status(400).json({ message: 'Recipe ID and User ID are required' });
      return;
    }

    // Get user's rating for the recipe
    const userRating = await RatingRepository.getRatingByUserAndRecipe(Number(recipeId), Number(userId));

    if (userRating) {
      console.log('User rating found:', userRating.rating);
      res.status(200).json({ userRating: userRating.rating });
    } else {
      console.log('No rating found for user');
      res.status(200).json({ userRating: 0 });
    }
  } catch (error) {
    console.error('❌ Error in getUserRating:', error);
    res.status(500).json({ message: 'Error fetching user rating', error: error });
  }
};

const updateRating = async (req: Request, res: Response): Promise<void> => {
  try {
    const { ratingId, userId, rating } = req.body;

    // Check if the rating exists and belongs to the user
    const existingRating = await RatingRepository.getRatingByIdAndUser(ratingId, userId);

    if (!existingRating) {
      res.status(404).json({ message: 'Rating not found or unauthorized' });
      return;
    }

    // Update the rating
    await RatingRepository.updateRating(existingRating.recipe_id, userId, rating);
    res.status(200).json({ message: 'Rating updated successfully' });
  } catch (error) {
    res.status(500).json({ message: 'Error updating rating', error });
  }
};

const deleteRating = async (req: Request, res: Response): Promise<void> => {
  try {
    const { ratingId, userId } = req.body;

    // Check if the rating exists and belongs to the user
    const existingRating = await RatingRepository.getRatingByIdAndUser(ratingId, userId);

    if (!existingRating) {
      res.status(404).json({ message: 'Rating not found or unauthorized' });
      return;
    }

    // Delete the rating
    await RatingRepository.deleteRating(ratingId);
    res.status(200).json({ message: 'Rating deleted successfully' });
  } catch (error) {
    res.status(500).json({ message: 'Error deleting rating', error });
  }
};

export default {
  addRating,
  getRating,
  getUserRating,
  updateRating,
  deleteRating,
};



================================================
FILE: server/src/controllers/recipeController.ts
================================================
// import { Request, Response } from "express";
// import { sequelize } from "../config/database";
// import { QueryTypes } from "sequelize";
// import multer from 'multer';
// // import Recipe from "../models/recipe";

// /**
//  * Create a new recipe
//  */

// // Set up multer for file uploads
// const storage = multer.diskStorage({
//     destination: (_req, _file, cb) => {
//         cb(null, 'uploads/'); // Folder where uploaded images will be saved
//     },
//     filename: (_req, file, cb) => {
//         cb(null, Date.now() + '-' + file.originalname); // Filename with timestamp to avoid conflicts
//     },
// });

// const upload = multer({ storage }); // Multer instance for handling image uploads

// // Add recipe with image upload functionality
// const createRecipe = async (req: Request, res: Response): Promise<void> => {
//     try {
//         const {
//             title,
//             user_id,
//             description,
//             ingredients, // Array
//             instructions,
//             preparationTime,
//             difficulty,
//             cuisine,
//             mealType,
//             image,
//         } = req.body;

//         // Handle image upload
//         // const image = req.file ? req.file.filename : null; // Get image filename if uploaded

//         // Convert ingredients array to JSON string
//         const ingredientsJson = JSON.stringify(ingredients);

//         // Insert recipe into database
//         const [newRecipe] = await sequelize.query(
//             `INSERT INTO Recipes (title, user_id, description, ingredients, instructions, preparationTime, difficulty, cuisine, mealType, image, createdAt, updatedAt)
//           VALUES (:title, :user_id, :description, :ingredients, :instructions, :preparationTime, :difficulty, :cuisine, :mealType, :image, NOW(), NOW())`,
//             {
//                 replacements: {
//                     title,
//                     user_id,
//                     description,
//                     ingredients: ingredientsJson,
//                     instructions,
//                     preparationTime,
//                     difficulty,
//                     cuisine,
//                     mealType,
//                     image, // Store image filename in the database
//                 },
//                 type: QueryTypes.INSERT,
//             }
//         );

//         // Retrieve the inserted recipe ID
//         const [idResult] = await sequelize.query("SELECT LAST_INSERT_ID() as id", { type: QueryTypes.SELECT });
//         const recipeId = (idResult as { id: number }).id;

//         if (!recipeId) {
//             res.status(500).json({ message: "Failed to create recipe" });
//             return;
//         }

//         res.status(201).json({ message: "Recipe created successfully", recipeId });
//     } catch (error) {
//         console.error("Error creating recipe:", error);
//         res.status(500).json({ message: "Error creating recipe", error });
//     }
// };

// export { createRecipe, upload };

// /**
//  * Retrieve a specific recipe by ID
//  */
// const getRecipeById = async (req: Request, res: Response): Promise<void> => {
//     try {
//         const { id } = req.params;

//         const [recipe] = await sequelize.query("SELECT * FROM Recipes WHERE recipe_id = :id", {
//             replacements: { id },
//             type: QueryTypes.SELECT,
//         });

//         if (!recipe) {
//             res.status(404).json({ message: "Recipe not found" });
//             return;
//         }

//         res.json(recipe);
//     } catch (error) {
//         res.status(500).json({ message: "Error fetching recipe", error });
//     }
// };

// /**
//  * Search recipes by title, ingredients, or tags
//  */
// const searchRecipes = async (req: Request, res: Response): Promise<void> => {
//     try {

//         const { query } = req.params;

//         const recipes = await sequelize.query(
//             `SELECT * FROM Recipes
//              WHERE title LIKE :query OR ingredients LIKE :query OR cuisine LIKE :query OR mealType LIKE :query`,
//             {
//                 replacements: { query: `%${query}%` },
//                 type: QueryTypes.SELECT,
//             }
//         );

//         res.json(recipes);
//     } catch (error) {
//         console.log("error in fetching", error);
//         res.status(500).json({ message: "Error searching recipes", error });
//     }
// };

// /**
//  * Retrieve all recipes with pagination
//  */
// const getAllRecipes = async (req: Request, res: Response) => {
//     try {
//         console.log("hii");

//         // Get page and limit from query parameters, default to 1 and 10 if not provided
//         const { page = 1, limit = 100 } = req.query;

//         // Ensure page and limit are numbers
//         const offset = (Number(page) - 1) * Number(limit);

//         const recipes = await sequelize.query("SELECT * FROM Recipes LIMIT :limit OFFSET :offset", {
//             replacements: { limit: Number(limit), offset },
//             type: QueryTypes.SELECT,
//         });

//         // console.log("Raw Query Result:", recipes);
//         res.json(recipes);
//     } catch (error) {
//         res.status(500).json({ message: "Error fetching recipes", error });
//     }
// };

// /**
//  * Update a recipe (only creator can update)
//  */
// const updateRecipe = async (req: Request, res: Response): Promise<void> => {
//     try {
//         const { id } = req.params;
//         const { title, user_id, description, ingredients, instructions, preparationTime, difficulty, cuisine, mealType } = req.body;

//         // Check if recipe exists and get its user_id
//         const [recipe]: any = await sequelize.query(
//             "SELECT user_id FROM Recipes WHERE recipe_id = :id",
//             {
//                 replacements: { id },
//                 type: QueryTypes.SELECT,
//             }
//         );

//         if (!recipe) {
//             res.status(404).json({ message: "Recipe not found" });
//             return;
//         }

//         const ingredientsJSON = JSON.stringify(ingredients);
//         // Update the recipe
//         await sequelize.query(
//             `UPDATE Recipes
//              SET title = :title, description = :description, ingredients = :ingredients,
//                  instructions = :instructions, preparationTime = :preparationTime, difficulty = :difficulty,
//                  cuisine = :cuisine, mealType = :mealType, updatedAt = NOW()
//              WHERE recipe_id = :id`,
//             {
//                 replacements: { id, title, description, ingredients: ingredientsJSON, instructions, preparationTime, difficulty, cuisine, mealType },
//                 type: QueryTypes.UPDATE,
//             }
//         );

//         res.json({ message: "Recipe updated successfully" });
//     } catch (error) {
//         res.status(500).json({ message: "Error updating recipe", error });
//     }
// };

// /**
//  * Delete a recipe (only creator can delete)
//  */
// const deleteRecipe = async (req: Request, res: Response): Promise<void> => {
//     try {
//         const { id } = req.params;

//         // Delete the recipe
//         await sequelize.query("DELETE FROM Recipes WHERE recipe_id = :id", {
//             replacements: { id },
//             type: QueryTypes.DELETE,
//         });

//         res.json({ message: "Recipe deleted successfully" });
//     } catch (error) {
//         res.status(500).json({ message: "Error deleting recipe", error });
//     }
// };

// /**
//  * Retrieve recipes filtered by cuisine type
//  */
// const getRecipesByCuisine = async (req: Request, res: Response): Promise<void> => {
//     try {
//         const { cuisine } = req.params;

//         const recipes = await sequelize.query("SELECT * FROM Recipes WHERE cuisine = :cuisine", {
//             replacements: { cuisine },
//             type: QueryTypes.SELECT,
//         });

//         res.json(recipes);
//     } catch (error) {
//         res.status(500).json({ message: "Error fetching recipes by cuisine", error });
//     }
// };

// /**
//  * Retrieve recipes filtered by meal type
//  */
// const getRecipesByMealType = async (req: Request, res: Response): Promise<void> => {
//     try {
//         const { mealType } = req.params;

//         const recipes = await sequelize.query("SELECT * FROM Recipes WHERE mealType = :mealType", {
//             replacements: { mealType },
//             type: QueryTypes.SELECT,
//         });

//         res.json(recipes);
//     } catch (error) {
//         res.status(500).json({ message: "Error fetching recipes by meal type", error });
//     }
// };

// /**
//  * Retrieve all available cuisine types
//  */
// const getAllCuisines = async (_req: Request, res: Response): Promise<void> => {
//     try {
//         const [cuisines] = await sequelize.query("SELECT DISTINCT cuisine FROM Recipes", { type: QueryTypes.SELECT });

//         res.json({ cuisines });
//     } catch (error) {
//         res.status(500).json({ message: "Error fetching cuisines", error });
//     }
// };

// /**
//  * Retrieve all available meal types
//  */

// /**
//  * Retrieve all recipes created by a specific user (by user_id)
//  */
// const getUserRecipes = async (req: Request, res: Response): Promise<void> => {
//     try {
//         console.log("hii user")
//         const { userId } = req.params; // Get userId from query params
//         console.log(userId)

//         if (!userId) {
//             res.status(400).json({ message: 'User ID is required.' });
//             return;
//         }

//         const recipes = await sequelize.query(
//             "SELECT * FROM Recipes WHERE user_id = :userId",
//             {
//                 replacements: { userId },
//                 type: QueryTypes.SELECT,
//             }
//         );

//         if (recipes.length === 0) {
//             res.status(404).json({ message: 'No recipes found for this user.' });
//             return;
//         }

//         res.status(200).json(recipes);
//     } catch (error) {
//         console.error("Error fetching recipes by user:", error);
//         res.status(500).json({ message: "Error fetching recipes by user.", error });
//     }
// };

// const recipeController = {
//     createRecipe: createRecipe,
//     getRecipeById: getRecipeById,
//     searchRecipes: searchRecipes,
//     getAllRecipes: getAllRecipes,
//     updateRecipe: updateRecipe,
//     deleteRecipe: deleteRecipe,
//     getRecipesByCuisine: getRecipesByCuisine,
//     getRecipesByMealType: getRecipesByMealType,
//     getAllCuisines: getAllCuisines,
//     getUserRecipes: getUserRecipes,
// }
// export default recipeController;

import { Request, Response } from 'express';
import recipeRepository from '../repositories/recipeRepository';
import multer from 'multer';

// Set up multer for file uploads
// const storage = multer.diskStorage({
//     destination: (_req, _file, cb) => cb(null, "uploads/"),
//     filename: (_req, file, cb) => cb(null, Date.now() + "-" + file.originalname),
// });

// const upload = multer({ storage });

// const createRecipe = async (req: Request, res: Response): Promise<void> => {
//     try {
//         console.log('=== CREATE RECIPE REQUEST ===');
//         console.log('Request body:', req.body);
//         console.log('Request file:', req.file);
//         console.log('Headers:', req.headers);

//         // Create the recipe data object with all fields including image
//         const recipeData = {
//             title: req.body.title,
//             user_id: parseInt(req.body.user_id),
//             description: req.body.description,
//             ingredients: req.body.ingredients,
//             instructions: req.body.instructions,
//             preparationTime: parseInt(req.body.preparationTime),
//             difficulty: req.body.difficulty,
//             cuisine: req.body.cuisine,
//             mealType: req.body.mealType,
//             image: req.file ? req.file.filename : null // Add the image filename
//         };

//         // Process ingredients if it's a string (convert to array)
//         if (typeof recipeData.ingredients === 'string') {
//             recipeData.ingredients = recipeData.ingredients
//                 .split('\n')
//                 .map((ingredient: string) => ingredient.trim())
//                 .filter((ingredient: string) => ingredient.length > 0);
//         }

//         console.log('Processed recipe data:', recipeData);

//         const recipeId = await recipeRepository.createRecipe(recipeData);

//         if (!recipeId) {
//             res.status(500).json({ message: "Failed to create recipe" });
//             return;
//         }

//         res.status(201).json({
//             message: "Recipe created successfully",
//             recipeId,
//             recipe: recipeData
//         });
//     } catch (error) {
//         console.error('Error creating recipe:', error);
//         res.status(500).json({ message: "Error creating recipe", error });
//     }
// };

const createRecipe = async (req: Request, res: Response): Promise<void> => {
  try {
    console.log('=== CREATE RECIPE REQUEST ===');
    console.log('Request body:', req.body);

    // No more file processing - image comes as Cloudinary URL
    const recipeData = {
      title: req.body.title,
      user_id: parseInt(req.body.user_id),
      description: req.body.description,
      ingredients: req.body.ingredients,
      instructions: req.body.instructions,
      preparationTime: parseInt(req.body.preparationTime),
      difficulty: req.body.difficulty,
      cuisine: req.body.cuisine,
      mealType: req.body.mealType,
      image: req.body.image || null, // This is now a Cloudinary URL
    };

    // Process ingredients if it's a string
    if (typeof recipeData.ingredients === 'string') {
      recipeData.ingredients = recipeData.ingredients
        .split('\n')
        .map((ingredient: string) => ingredient.trim())
        .filter((ingredient: string) => ingredient.length > 0);
    }

    console.log('Processed recipe data:', recipeData);

    const recipeId = await recipeRepository.createRecipe(recipeData);

    if (!recipeId) {
      res.status(500).json({ message: 'Failed to create recipe' });
      return;
    }

    res.status(201).json({
      message: 'Recipe created successfully',
      recipeId,
      recipe: recipeData,
    });
  } catch (error) {
    console.error('Error creating recipe:', error);
    res.status(500).json({ message: 'Error creating recipe', error });
  }
};

const getRecipeById = async (req: Request, res: Response): Promise<void> => {
  try {
    const recipe = await recipeRepository.findById(Number(req.params.id));
    if (!recipe) {
      res.status(404).json({ message: 'Recipe not found' });
      return;
    }
    res.json(recipe);
  } catch (error) {
    res.status(500).json({ message: 'Error fetching recipe', error });
  }
};

const searchRecipes = async (req: Request, res: Response): Promise<void> => {
  try {
    const recipes = await recipeRepository.searchRecipes(req.params.query);
    res.json(recipes);
  } catch (error) {
    res.status(500).json({ message: 'Error searching recipes', error });
  }
};

const getAllRecipes = async (req: Request, res: Response): Promise<void> => {
  try {
    const { page = 1, limit = 100 } = req.query;
    const offset = (Number(page) - 1) * Number(limit);
    const recipes = await recipeRepository.getAllRecipes(Number(limit), offset);
    res.json(recipes);
  } catch (error) {
    res.status(500).json({ message: 'Error fetching recipes', error });
  }
};

// const updateRecipe = async (req: Request, res: Response): Promise<void> => {
//     try {
//         const updated = await recipeRepository.updateRecipe(Number(req.params.id), req.body);
//         if (!updated) {
//             res.status(404).json({ message: "Recipe not found or not updated" });
//             return;
//         }
//         res.json({ message: "Recipe updated successfully" });
//     } catch (error: any) {
//         console.error("Error updating recipe:", error); // Log the error for debugging
//         res.status(500).json({ message: "Error updating recipe", error: error.message || error });
//     }
// };

const updateRecipe = async (req: Request, res: Response): Promise<void> => {
  try {
    const recipeId = parseInt(req.params.id);
    const recipeData = {
      title: req.body.title,
      description: req.body.description,
      ingredients: req.body.ingredients,
      instructions: req.body.instructions,
      preparationTime: parseInt(req.body.preparationTime),
      difficulty: req.body.difficulty,
      cuisine: req.body.cuisine,
      mealType: req.body.mealType,
      image: req.body.image || null,
    };

    // Process ingredients if it's a string
    if (typeof recipeData.ingredients === 'string') {
      recipeData.ingredients = recipeData.ingredients
        .split('\n')
        .map((ingredient: string) => ingredient.trim())
        .filter((ingredient: string) => ingredient.length > 0);
    }

    const updatedRecipe = await recipeRepository.updateRecipe(recipeId, recipeData);

    if (!updatedRecipe) {
      res.status(404).json({ message: 'Recipe not found' });
      return;
    }

    res.status(200).json({
      message: 'Recipe updated successfully',
      recipe: updatedRecipe,
    });
  } catch (error) {
    console.error('Error updating recipe:', error);
    res.status(500).json({ message: 'Error updating recipe', error });
  }
};

// const deleteRecipe = async (req: Request, res: Response): Promise<void> => {
//     try {
//         const deleted = await recipeRepository.deleteRecipe(Number(req.params.id));
//         if (!deleted) {
//             res.status(404).json({ message: "Recipe not found or already deleted" });
//             return;
//         }
//         res.json({ message: "Recipe deleted successfully" });
//     } catch (error) {
//         res.status(500).json({ message: "Error deleting recipe", error });
//     }
// };

// In your recipeController.ts
const deleteRecipe = async (req: Request, res: Response): Promise<void> => {
  try {
    const recipeId = parseInt(req.params.id);

    console.log('Attempting to delete recipe with ID:', recipeId);

    // First check if recipe exists
    const existingRecipe = await recipeRepository.findById(recipeId);

    if (!existingRecipe) {
      console.log('Recipe not found - may have been already deleted');
      res.status(404).json({
        message: 'Recipe not found - may have been already deleted',
        success: false,
        recipeId: recipeId,
      });
      return;
    }

    const deleted = await recipeRepository.deleteRecipe(recipeId);

    if (deleted) {
      res.status(200).json({
        message: 'Recipe deleted successfully',
        success: true,
        recipeId: recipeId,
      });
    } else {
      res.status(500).json({
        message: 'Failed to delete recipe',
        success: false,
      });
    }
  } catch (error) {
    console.error('Error deleting recipe:', error);
    res.status(500).json({
      message: 'Error deleting recipe',
      error: error,
      success: false,
    });
  }
};

const getRecipesByCuisine = async (req: Request, res: Response): Promise<void> => {
  try {
    const recipes = await recipeRepository.getRecipesByCuisine(req.params.cuisine);
    res.json(recipes);
  } catch (error) {
    res.status(500).json({ message: 'Error fetching recipes', error });
  }
};

const getRecipesByMealType = async (req: Request, res: Response): Promise<void> => {
  try {
    const recipes = await recipeRepository.getRecipesByMealType(req.params.mealType);
    res.json(recipes);
  } catch (error) {
    res.status(500).json({ message: 'Error fetching recipes', error });
  }
};

const getUserRecipes = async (req: Request, res: Response): Promise<void> => {
  try {
    const recipes = await recipeRepository.getUserRecipes(Number(req.params.userId));
    res.json(recipes);
  } catch (error) {
    res.status(500).json({ message: 'Error fetching recipes', error });
  }
};

export default {
  createRecipe,
  getRecipeById,
  searchRecipes,
  getAllRecipes,
  updateRecipe,
  deleteRecipe,
  getRecipesByCuisine,
  getRecipesByMealType,
  getUserRecipes,
};



================================================
FILE: server/src/controllers/userController.ts
================================================
// import { Request, Response } from "express";
// import bcrypt from "bcrypt";
// import jwt from "jsonwebtoken";
// import { sequelize } from "../config/database";
// import { QueryTypes } from "sequelize";
// import User from "../models/user";

// const register = async (req: Request, res: Response): Promise<void> => {
//     try {
//         const { username, email, password, fullname, role } = req.body;

//         const [existinguser] = (await sequelize.query(
//             "SELECT * FROM Users WHERE email = :email",
//             {
//                 replacements: { email },
//                 type: QueryTypes.SELECT,
//             }
//         ));
//         if (existinguser) {
//             res.status(400).json({ message: "User already exists" });
//             return;
//         }

//         const hashedPassword = await bcrypt.hash(password, 10);

//         const [newuser] = await sequelize.query(
//             `INSERT INTO Users (username,email,password,fullname, role, createdAt, updatedAt)
//         VALUES (:username, :email, :password, :fullname, :role, NOW(), NOW())`,
//             {
//                 replacements: {
//                     username,
//                     email,
//                     password: hashedPassword,
//                     fullname,
//                     role,
//                 },
//                 type: QueryTypes.INSERT,
//             }

//         );
//         const [idResult] = await sequelize.query("SELECT LAST_INSERT_ID() as id", {
//             type: QueryTypes.SELECT,
//         });

//         const user_id = (idResult as { id: number }).id;

//         if (!user_id) {
//             res.status(500).json({ message: "Failed to create user" });
//             return;
//         }
//         res.json({ message: "Profile created successfully" });
//     } catch (error) {
//         res.status(500).json({ message: "Error in registering", error });
//     }

// };

// const login = async (req: Request, res: Response): Promise<void> => {
//     try {
//         const { email, password } = req.body;

//         const [user]: any[] = await sequelize.query(
//             "SELECT user_id, username, email, password AS password_hash, fullname FROM Users WHERE email = :email",
//             { replacements: { email }, type: QueryTypes.SELECT }
//         );

//         console.log("User fetched:", user); // Debugging

//         if (!user || !user.password_hash) {
//             res.status(400).json({ message: "Invalid credentials" });
//             return;
//         }

//         console.log("Stored hash:", user.password_hash);
//         console.log("Entered password:", password);

//         const isPasswordValid = await bcrypt.compare(password, user.password_hash);

//         if (!isPasswordValid) {
//             res.status(400).json({ message: "Invalid credentials" });
//             return;
//         }

//         const token = jwt.sign({ id: user.user_id }, process.env.JWT_SECRET || "secret", {
//             expiresIn: "1d",
//         });

//         res.json({ user: { id: user.user_id, username: user.username, email: user.email, fullname: user.fullname }, token });
//     } catch (error) {
//         console.error("Login Error:", error);
//         res.status(500).json({ message: "Error logging in", error });
//     }
// };

// const getProfile = async (req: Request, res: Response): Promise<void> => {
//     try {
//         const { id } = req.params;

//         const [user] = await sequelize.query(
//             "SELECT * FROM Users WHERE user_id = :id",
//             {
//                 replacements: { id },
//                 type: QueryTypes.SELECT,
//             }
//         );

//         if (!user) {
//             res.status(404).json({ message: "User not found" });
//             return;
//         }

//         res.json(user);
//     } catch (error) {
//         res.status(500).json({ message: "Error fetching profile", error });
//     }
// };
// const updateProfilePatch = async (req: Request, res: Response): Promise<void> => {
//     try {
//         const { username, email, password, fullname, role } = req.body;
//         const { id } = req.params;

//         // Update only the provided fields
//         const [updatedUser] = await sequelize.query(
//             `UPDATE Users SET username = :username, email = :email,
//              fullname = :fullname, role= :role, createdAt = Now(),updatedAt = NOW() WHERE user_id = :id`,
//             {
//                 replacements: { id, username, email, fullname, role },
//                 type: QueryTypes.UPDATE,
//             }
//         );

//         res.json({ message: "Profile updated successfully" });
//     } catch (error) {
//         res.status(500).json({ message: "Error updating profile", error });
//     }
// };

// // Delete User (DELETE)
// const deleteUser = async (req: Request, res: Response): Promise<void> => {
//     try {
//         const { id } = req.params;

//         const deletedUser = await sequelize.query(
//             "DELETE FROM Users WHERE user_id = :id",
//             {
//                 replacements: { id },
//                 type: QueryTypes.DELETE,
//             }
//         );

//         res.json({ message: "User deleted successfully" });
//     } catch (error) {
//         res.status(500).json({ message: "Error deleting user", error });
//     }
// };

// export default {
//     register,
//     login,
//     getProfile,
//     updateProfilePatch,
//     deleteUser,

// };

import { Request, Response } from 'express';
import jwt from 'jsonwebtoken';
import userRepository from '../repositories/userRepository';
import User from '../models/user';

const register = async (req: Request, res: Response): Promise<void> => {
  try {
    const userExists = await userRepository.findByEmail(req.body.email);
    if (userExists) {
      res.status(400).json({ message: 'User already exists' });
      return;
    }

    const userId = await userRepository.create(req.body);
    if (!userId) {
      res.status(500).json({ message: 'Failed to create user' });
      return;
    }

    res.json({ message: 'Profile created successfully' });
  } catch (error) {
    res.status(500).json({ message: 'Error in registering', error });
  }
};

const login = async (req: Request, res: Response): Promise<void> => {
  try {
    const user = await userRepository.validateCredentials(req.body.email, req.body.password);
    if (!user) {
      res.status(400).json({ message: 'Invalid credentials' });
      return;
    }

    const token = jwt.sign({ id: user.user_id }, process.env.JWT_SECRET || 'secret', { expiresIn: '1d' });

    res.json({
      user: { id: user.user_id, username: user.username, email: user.email, fullname: user.fullname },
      token,
    });
  } catch (error) {
    res.status(500).json({ message: 'Error logging in', error });
  }
};

const getProfile = async (req: Request, res: Response): Promise<void> => {
  try {
    const user = await userRepository.findById(Number(req.params.id));
    if (!user) {
      res.status(404).json({ message: 'User not found' });
      return;
    }
    res.json(user);
  } catch (error) {
    res.status(500).json({ message: 'Error fetching profile', error });
  }
};

const updateProfile = async (req: Request, res: Response): Promise<void> => {
  try {
    const success = await userRepository.update(Number(req.params.id), req.body);
    if (!success) {
      res.status(400).json({ message: 'Failed to update profile' });
      return;
    }
    res.json({ message: 'Profile updated successfully' });
  } catch (error) {
    res.status(500).json({ message: 'Error updating profile', error });
  }
};

const deleteUser = async (req: Request, res: Response): Promise<void> => {
  try {
    const success = await userRepository.delete(Number(req.params.id));
    if (!success) {
      res.status(400).json({ message: 'Failed to delete user' });
      return;
    }
    res.json({ message: 'User deleted successfully' });
  } catch (error) {
    res.status(500).json({ message: 'Error deleting user', error });
  }
};

export default { register, login, getProfile, updateProfile, deleteUser };



================================================
FILE: server/src/middleware/authMiddleware.ts
================================================
import { Request, Response, NextFunction } from 'express';
import jwt from 'jsonwebtoken';

// Define the structure of the decoded JWT payload
interface DecodedUser {
  id: number;
  email: string;
  iat: number;
  exp: number;
}

// Middleware to authenticate user via JWT
export const authenticateUser = (req: Request, res: Response, next: NextFunction): void => {
  try {
    // Get the token from the Authorization header
    const authHeader = req.header('Authorization');
    if (!authHeader || !authHeader.startsWith('Bearer ')) {
      res.status(401).json({ message: 'Access denied. No token provided.' });
      return;
    }

    const token = authHeader.split(' ')[1];

    // Verify token
    const decoded = jwt.verify(token, process.env.JWT_SECRET || 'secret') as DecodedUser;

    // Attach user info to the request object
    (req as any).user = decoded;

    // Proceed to the next middleware or route
    next();
  } catch (error) {
    res.status(401).json({ message: 'Invalid or expired token.' });
  }
};



================================================
FILE: server/src/middleware/errorHandler.ts
================================================
import { Request, Response, NextFunction } from 'express';

// Global error handler middleware
export const errorHandler = (err: Error, req: Request, res: Response, next: NextFunction): void => {
  console.error('Error:', err.message);

  res.status(500).json({
    message: 'Something went wrong. Please try again later.',
    error: process.env.NODE_ENV === 'design' ? err.message : undefined,
  });
};



================================================
FILE: server/src/models/comment.ts
================================================
import { Model, DataTypes } from 'sequelize';
import { sequelize } from '../config/database';
import User from './user';
import Recipe from './recipe';

class Comment extends Model {
  public comment_id!: string;
  public user_id!: string;
  public recipe_id!: string;
  public content!: string;
  public createdAt!: Date;
  public updatedAt!: Date;
}

Comment.init(
  {
    comment_id: {
      type: DataTypes.INTEGER,
      autoIncrement: true,
      primaryKey: true,
    },
    user_id: {
      type: DataTypes.INTEGER,
      allowNull: false,
    },
    recipe_id: {
      type: DataTypes.INTEGER,
      allowNull: false,
    },
    content: {
      type: DataTypes.TEXT,
      allowNull: false,
    },
  },
  {
    sequelize,
    tableName: 'Comments',
    timestamps: true,
  },
);

Comment.belongsTo(User, { foreignKey: 'user_id', onDelete: 'CASCADE' });
Comment.belongsTo(Recipe, { foreignKey: 'recipe_id', onDelete: 'CASCADE' });
User.hasMany(Comment, { foreignKey: 'user_id', onDelete: 'CASCADE' });
Recipe.hasMany(Comment, { foreignKey: 'recipe_id', onDelete: 'CASCADE' });

export default Comment;



================================================
FILE: server/src/models/favorite.ts
================================================
import { Model, DataTypes } from 'sequelize';
import { sequelize } from '../config/database';
import User from './user';
import Recipe from './recipe';

class Favorite extends Model {
  public fav_id!: number;
  public user_id!: number;
  public recipe_id!: number;
  public createdAt!: Date;
}

Favorite.init(
  {
    fav_id: {
      type: DataTypes.INTEGER,
      autoIncrement: true,
      primaryKey: true,
    },
    user_id: {
      type: DataTypes.INTEGER,
      allowNull: false,
    },
    recipe_id: {
      type: DataTypes.INTEGER,
      allowNull: false,
    },
  },
  {
    sequelize,
    tableName: 'Favorites',
    timestamps: true,
  },
);

Favorite.belongsTo(User, { foreignKey: 'user_id' });
Favorite.belongsTo(Recipe, { foreignKey: 'recipe_id' });
User.hasMany(Favorite, { foreignKey: 'user_id' });
Recipe.hasMany(Favorite, { foreignKey: 'recipe_id' });

export default Favorite;



================================================
FILE: server/src/models/rating.ts
================================================
import { Model, DataTypes } from 'sequelize';
import { sequelize } from '../config/database';
import User from './user';
import Recipe from './recipe';

class Rating extends Model {
  public rate_id!: number;
  public user_id!: number;
  public recipe_id!: number;
  public rating!: number;
  public createdAt!: Date;
  public updatedAt!: Date;
}

Rating.init(
  {
    rate_id: {
      type: DataTypes.INTEGER,
      autoIncrement: true,
      primaryKey: true,
    },
    user_id: {
      type: DataTypes.INTEGER,
      allowNull: false,
    },
    recipe_id: {
      type: DataTypes.INTEGER,
      allowNull: false,
    },
    rating: {
      type: DataTypes.INTEGER,
      allowNull: false,
      validate: {
        min: 1,
        max: 5,
      },
    },
  },
  {
    sequelize,
    tableName: 'Ratings',
    timestamps: true,
  },
);

Rating.belongsTo(User, { foreignKey: 'user_id', onDelete: 'CASCADE' });
Rating.belongsTo(Recipe, { foreignKey: 'recipe_id', onDelete: 'CASCADE' });
User.hasMany(Rating, { foreignKey: 'user_id', onDelete: 'CASCADE' });
Recipe.hasMany(Rating, { foreignKey: 'recipe_id', onDelete: 'CASCADE' });

export default Rating;



================================================
FILE: server/src/models/recipe.ts
================================================
import { Model, DataTypes } from 'sequelize';
import { sequelize } from '../config/database';
import User from './user';

class Recipe extends Model {
  public recipe_id!: number;
  public user_id!: string;
  public title!: string;
  public description!: string;
  public ingredients!: object;
  public instructions!: string;
  public preparationTime!: number;
  public dfficulty!: 'Easy' | 'Medium' | 'Hard';
  public image!: string;
  public cuisine!: string;
  public mealType!: string;
  public createdAt!: Date;
  public updatedAt!: Date;
}

Recipe.init(
  {
    recipe_id: {
      type: DataTypes.INTEGER,
      autoIncrement: true,
      primaryKey: true,
    },
    user_id: {
      type: DataTypes.INTEGER,
      allowNull: false,
    },
    title: {
      type: DataTypes.STRING,
      allowNull: false,
    },
    description: {
      type: DataTypes.TEXT,
    },
    ingredients: {
      type: DataTypes.JSON,
      allowNull: false,
    },
    instructions: {
      type: DataTypes.TEXT,
      allowNull: false,
    },
    preparationTime: {
      type: DataTypes.INTEGER,
    },
    difficulty: {
      type: DataTypes.ENUM('Easy', 'Medium', 'Hard'),
    },
    image: {
      type: DataTypes.STRING,
    },
    cuisine: {
      type: DataTypes.STRING,
    },
    mealType: {
      type: DataTypes.STRING,
    },
  },
  {
    sequelize,
    tableName: 'Recipes',
    timestamps: true,
  },
);

Recipe.belongsTo(User, { foreignKey: 'user_id', onDelete: 'CASCADE' });
User.hasMany(Recipe, { foreignKey: 'user_id', onDelete: 'CASCADE' });

export default Recipe;



================================================
FILE: server/src/models/recipetag.ts
================================================
import { Model, DataTypes } from 'sequelize';
import { sequelize } from '../config/database';
import Recipe from './recipe';
import Tag from './tag';

class RecipeTag extends Model {
  public recipetag_id!: number;
  public tag_id!: number;
}

RecipeTag.init(
  {
    recipetag_id: {
      type: DataTypes.INTEGER,
      allowNull: false,
    },
    tag_id: {
      type: DataTypes.INTEGER,
      allowNull: false,
    },
  },
  {
    sequelize,
    tableName: 'RecipeTags',
    timestamps: false,
  },
);

RecipeTag.belongsTo(Recipe, { foreignKey: 'recipe_id' });
RecipeTag.belongsTo(Tag, { foreignKey: 'tag_id' });
Recipe.hasMany(RecipeTag, { foreignKey: 'recipe_id' });
Tag.hasMany(RecipeTag, { foreignKey: 'tag_id' });

export default RecipeTag;



================================================
FILE: server/src/models/syncmodel.ts
================================================
import Recipe from './recipe';

import Tag from './tag';
import User from './user';
import Comment from './comment';
import Rating from './rating';
import Favorite from './favorite';
import RecipeTag from './recipetag';

const syncTables = async () => {
  try {
    await User.sync();
    console.log('User table synced successfully');

    await Tag.sync();
    console.log('Tag table synced successfully');

    await Recipe.sync({ alter: true });
    console.log('Recipe table synced successfully');

    await RecipeTag.sync();
    console.log('Recipe table synced successfully');

    await Comment.sync({ alter: true });
    console.log('Comment table synced successfully');

    await Rating.sync({ alter: true });
    console.log('Rating table synced successfully');

    await Favorite.sync();
    console.log('Favorite table synced successfully');
  } catch (error) {
    console.error('Error in syncing tables:', error);
  }
};

export default syncTables;



================================================
FILE: server/src/models/tag.ts
================================================
import { Model, DataTypes } from 'sequelize';
import { sequelize } from '../config/database';

class Tag extends Model {
  public itag_id!: string;
  public name!: string;
  public createdAt!: Date;
}

Tag.init(
  {
    tag_id: {
      type: DataTypes.INTEGER,
      autoIncrement: true,
      primaryKey: true,
    },
    name: {
      type: DataTypes.STRING,
      unique: true,
      allowNull: false,
    },
  },
  {
    sequelize,
    tableName: 'Tags',
    timestamps: true,
  },
);

export default Tag;



================================================
FILE: server/src/models/user.ts
================================================
import { Model, DataTypes } from 'sequelize';
import { sequelize } from '../config/database';

class User extends Model {
  public user_id!: number;
  public username!: string;
  public email!: string;
  public password!: string;
  public fullname!: string;
  public role!: string;

  public createdAt!: Date;
  public updatedAt!: Date;
}

User.init(
  {
    user_id: {
      type: DataTypes.INTEGER,
      autoIncrement: true,
      primaryKey: true,
    },
    username: {
      type: DataTypes.STRING,
      allowNull: false,
      unique: true,
    },
    email: {
      type: DataTypes.STRING,
      allowNull: false,
      unique: true,
    },
    password: {
      type: DataTypes.STRING,
      allowNull: false,
    },
    fullname: {
      type: DataTypes.STRING,
      allowNull: false,
    },
    role: {
      type: DataTypes.ENUM('user', 'admin'),
      defaultValue: 'user',
    },
  },
  {
    sequelize,
    tableName: 'Users',
    timestamps: true,
  },
);
export default User;



================================================
FILE: server/src/repositories/commentRepository.ts
================================================
import { sequelize } from '../config/database';
import { QueryTypes } from 'sequelize';

interface Comment {
  comment_id: number;
  recipe_id: number;
  user_id: number;
  content: string;
  username?: string;
  createdAt: Date;
  updatedAt: Date;
}

const CommentRepository = {
  async addComment(recipeId: number, userId: number, content: string): Promise<Comment> {
    // Insert the comment and get the inserted ID
    const insertResult = await sequelize.query(
      `INSERT INTO Comments (recipe_id, user_id, content, createdAt, updatedAt)
            VALUES (:recipeId, :userId, :content, NOW(), NOW())`,
      {
        replacements: { recipeId, userId, content },
        type: QueryTypes.INSERT,
      },
    );

    // Get the newly inserted comment with all details
    const [newComment] = await sequelize.query<Comment>(
      `SELECT c.comment_id, c.recipe_id, c.user_id, c.content, c.createdAt, c.updatedAt, u.username
             FROM Comments c
             INNER JOIN Users u ON c.user_id = u.user_id
             WHERE c.comment_id = LAST_INSERT_ID()`,
      {
        type: QueryTypes.SELECT,
      },
    );

    return newComment;
  },

  async getCommentsByRecipe(recipeId: number): Promise<Comment[]> {
    const result = await sequelize.query<Comment>(
      `SELECT c.comment_id, c.recipe_id, c.user_id, c.content, c.createdAt, c.updatedAt, u.username
             FROM Comments c
             INNER JOIN Users u ON c.user_id = u.user_id
             WHERE c.recipe_id = :recipeId
             ORDER BY c.createdAt DESC`,
      {
        replacements: { recipeId },
        type: QueryTypes.SELECT,
      },
    );
    return result;
  },

  async getCommentByIdAndUser(commentId: number, userId: number): Promise<Comment | undefined> {
    const result = await sequelize.query<Comment>(
      'SELECT * FROM Comments WHERE comment_id = :commentId AND user_id = :userId',
      {
        replacements: { commentId, userId },
        type: QueryTypes.SELECT,
      },
    );
    return result[0]; // Return the first result or undefined if not found
  },

  async updateComment(commentId: number, content: string) {
    await sequelize.query('UPDATE Comments SET content = :content, updatedAt = NOW() WHERE comment_id = :commentId', {
      replacements: { content, commentId },
      type: QueryTypes.UPDATE,
    });
  },

  async deleteComment(commentId: number) {
    await sequelize.query('DELETE FROM Comments WHERE comment_id = :commentId', {
      replacements: { commentId },
      type: QueryTypes.DELETE,
    });
  },
};

export default CommentRepository;



================================================
FILE: server/src/repositories/ratingRepository.ts
================================================
import { sequelize } from '../config/database';
import { QueryTypes } from 'sequelize';

interface Rating {
  recipe_id: number;
  user_id: number;
  rating: number;
  rate_id: number;
  createdAt: Date;
  updatedAt: Date;
}

const RatingRepository = {
  async getRatingByUserAndRecipe(recipeId: number, userId: number): Promise<Rating | undefined> {
    const result = await sequelize.query<Rating>(
      'SELECT * FROM Ratings WHERE recipe_id = :recipeId AND user_id = :userId',
      {
        replacements: { recipeId, userId },
        type: QueryTypes.SELECT,
      },
    );
    return result[0]; // Return the first result or undefined if not found
  },

  async addRating(recipeId: number, userId: number, rating: number) {
    await sequelize.query(
      'INSERT INTO Ratings (recipe_id, user_id, rating, createdAt, updatedAt) VALUES (:recipeId, :userId, :rating, NOW(), NOW())',
      {
        replacements: { recipeId, userId, rating },
        type: QueryTypes.INSERT,
      },
    );
  },

  async updateRating(recipeId: number, userId: number, rating: number) {
    await sequelize.query(
      'UPDATE Ratings SET rating = :rating, updatedAt = NOW() WHERE recipe_id = :recipeId AND user_id = :userId',
      {
        replacements: { recipeId, userId, rating },
        type: QueryTypes.UPDATE,
      },
    );
  },

  async getAverageRating(recipeId: number): Promise<number> {
    const result = await sequelize.query<{ avg_rating: number }>(
      'SELECT AVG(rating) AS avg_rating FROM Ratings WHERE recipe_id = :recipeId',
      {
        replacements: { recipeId },
        type: QueryTypes.SELECT,
      },
    );
    return result[0]?.avg_rating ?? 0; // Return avg_rating or 0 if undefined
  },

  async deleteRating(ratingId: number) {
    await sequelize.query('DELETE FROM Ratings WHERE rate_id = :ratingId', {
      replacements: { ratingId },
      type: QueryTypes.DELETE,
    });
  },

  async getRatingByIdAndUser(ratingId: number, userId: number): Promise<Rating | undefined> {
    const result = await sequelize.query<Rating>(
      'SELECT * FROM Ratings WHERE rate_id = :ratingId AND user_id = :userId',
      {
        replacements: { ratingId, userId },
        type: QueryTypes.SELECT,
      },
    );
    return result[0]; // Return the first result or undefined if not found
  },
};

export default RatingRepository;



================================================
FILE: server/src/repositories/recipeRepository.ts
================================================
import { sequelize } from '../config/database';
import { QueryTypes } from 'sequelize';
import Recipe from '../models/recipe';

class RecipeRepository {
  async createRecipe(recipeData: any): Promise<number | null> {
    try {
      console.log('Repository received data:', recipeData);

      const {
        title,
        user_id,
        description,
        ingredients,
        instructions,
        preparationTime,
        difficulty,
        cuisine,
        mealType,
        image,
      } = recipeData;

      const ingredientsJson = JSON.stringify(ingredients);

      const query = `INSERT INTO Recipes 
                (title, user_id, description, ingredients, instructions, preparationTime, difficulty, cuisine, mealType, image, createdAt, updatedAt) 
                VALUES (:title, :user_id, :description, :ingredients, :instructions, :preparationTime, :difficulty, :cuisine, :mealType, :image, NOW(), NOW())`;

      const replacements = {
        title,
        user_id,
        description,
        ingredients: ingredientsJson,
        instructions,
        preparationTime,
        difficulty,
        cuisine,
        mealType,
        image: image || null, // This is the key fix
      };

      console.log('SQL Query:', query);
      console.log('Replacements:', replacements);

      await sequelize.query(query, {
        replacements,
        type: QueryTypes.INSERT,
      });

      const idResult: any = await sequelize.query('SELECT LAST_INSERT_ID() as id', { type: QueryTypes.SELECT });
      const newId = idResult?.[0]?.id ?? null;

      console.log('Created recipe with ID:', newId);
      return newId;
    } catch (error) {
      console.error('Error in createRecipe repository:', error);
      throw error;
    }
  }

  async findById(id: number): Promise<any> {
    const recipe = await sequelize.query('SELECT * FROM Recipes WHERE recipe_id = :id', {
      replacements: { id },
      type: QueryTypes.SELECT,
    });

    return recipe.length > 0 ? recipe[0] : null;
  }

  async searchRecipes(query: string): Promise<any[]> {
    return await sequelize.query(
      `SELECT * FROM Recipes 
            WHERE title LIKE :query OR ingredients LIKE :query OR cuisine LIKE :query OR mealType LIKE :query`,
      {
        replacements: { query: `%${query}%` },
        type: QueryTypes.SELECT,
      },
    );
  }

  async getAllRecipes(limit: number, offset: number): Promise<any[]> {
    return await sequelize.query('SELECT * FROM Recipes LIMIT :limit OFFSET :offset', {
      replacements: { limit, offset },
      type: QueryTypes.SELECT,
    });
  }

  // async updateRecipe(id: number, recipeData: any): Promise<boolean> {
  //     const { title, description, ingredients, instructions, preparationTime, difficulty, cuisine, mealType } = recipeData;
  //     const ingredientsJson = JSON.stringify(ingredients);

  //     const result = await sequelize.query(
  //         `UPDATE Recipes
  //          SET title = :title, description = :description, ingredients = :ingredients,
  //              instructions = :instructions, preparationTime = :preparationTime, difficulty = :difficulty,
  //              cuisine = :cuisine, mealType = :mealType, updatedAt = NOW()
  //          WHERE recipe_id = :id`,
  //         {
  //             replacements: { id, title, description, ingredients: ingredientsJson, instructions, preparationTime, difficulty, cuisine, mealType },
  //             type: QueryTypes.UPDATE,
  //         }
  //     );

  //     // Safely get the affectedRows from the result tuple
  //     const affectedRows = Array.isArray(result) && result[0] !== undefined ? result[0] : 0;
  //     return affectedRows > 0;
  // }

  // async updateRecipe(id: number, recipeData: any): Promise<boolean> {
  //     const { title, description, ingredients, instructions, preparationTime, difficulty, cuisine, mealType } = recipeData;
  //     const ingredientsJson = JSON.stringify(ingredients);

  //     const result = await sequelize.query(
  //         `UPDATE Recipes
  //          SET title = :title, description = :description, ingredients = :ingredients,
  //              instructions = :instructions, preparationTime = :preparationTime, difficulty = :difficulty,
  //              cuisine = :cuisine, mealType = :mealType, updatedAt = NOW()
  //          WHERE recipe_id = :id`,
  //         {
  //             replacements: { id, title, description, ingredients: ingredientsJson, instructions, preparationTime, difficulty, cuisine, mealType },
  //             type: QueryTypes.UPDATE,
  //         }
  //     );

  //     console.log("Query result:", result); // Log the result for debugging

  //     const affectedRows = result && Array.isArray(result) && result[1] > 0 ? result[1] : 0; // Check if the affected rows is greater than 0
  //     return affectedRows > 0;
  // }

  async updateRecipe(id: number, recipeData: any): Promise<Recipe | null> {
    const { title, description, ingredients, instructions, preparationTime, difficulty, cuisine, mealType, image } =
      recipeData;
    const ingredientsJson = JSON.stringify(ingredients);

    const result = await sequelize.query(
      `UPDATE Recipes 
         SET title = :title, description = :description, ingredients = :ingredients, 
             instructions = :instructions, preparationTime = :preparationTime, difficulty = :difficulty, 
             cuisine = :cuisine, mealType = :mealType, image = :image, updatedAt = NOW()
         WHERE recipe_id = :id`,
      {
        replacements: {
          id,
          title,
          description,
          ingredients: ingredientsJson,
          instructions,
          preparationTime,
          difficulty,
          cuisine,
          mealType,
          image,
        },
        type: QueryTypes.UPDATE,
      },
    );

    // After updating, fetch and return the updated recipe
    const updatedRecipe = await this.findById(id);
    return updatedRecipe;
  }

  // async deleteRecipe(id: number): Promise<boolean> {
  //     const result = await sequelize.query("DELETE FROM Recipes WHERE recipe_id = :id", {
  //         replacements: { id },
  //         type: QueryTypes.DELETE,
  //     });

  //     const affectedRows = Array.isArray(result) ? result[0] : 0;
  //     return affectedRows > 0;
  // }

  async deleteRecipe(id: number): Promise<boolean> {
    try {
      console.log('Repository: Deleting recipe with ID:', id);

      await sequelize.query('DELETE FROM Recipes WHERE recipe_id = :id', {
        replacements: { id },
        type: QueryTypes.DELETE,
      });

      // Since the query executed without error, assume deletion was successful
      // The controller already checks if the recipe exists before calling this method
      return true;
    } catch (error) {
      console.error('Repository error deleting recipe:', error);
      throw error;
    }
  }

  async getRecipesByCuisine(cuisine: string): Promise<any[]> {
    return await sequelize.query('SELECT * FROM Recipes WHERE cuisine = :cuisine', {
      replacements: { cuisine },
      type: QueryTypes.SELECT,
    });
  }

  async getRecipesByMealType(mealType: string): Promise<any[]> {
    return await sequelize.query('SELECT * FROM Recipes WHERE mealType = :mealType', {
      replacements: { mealType },
      type: QueryTypes.SELECT,
    });
  }

  async getUserRecipes(userId: number): Promise<any[]> {
    return await sequelize.query('SELECT * FROM Recipes WHERE user_id = :userId', {
      replacements: { userId },
      type: QueryTypes.SELECT,
    });
  }
}

export default new RecipeRepository();



================================================
FILE: server/src/repositories/userRepository.ts
================================================
import { sequelize } from '../config/database';
import { QueryTypes } from 'sequelize';
import bcrypt from 'bcrypt';
import User from '../models/user';

class UserRepository {
  async create(userData: Partial<User>): Promise<User | null> {
    const { username, email, password, fullname, role } = userData;

    // Hash the password if it exists
    const hashedPassword = password ? await bcrypt.hash(password, 10) : null;

    const result = await sequelize.query(
      `INSERT INTO Users (username, email, password, fullname, role, createdAt, updatedAt)
             VALUES (:username, :email, :password, :fullname, :role, NOW(), NOW())`,
      {
        replacements: {
          username,
          email,
          password: hashedPassword,
          fullname,
          role,
        },
        type: QueryTypes.INSERT,
      },
    );

    // Retrieve the last inserted ID
    const [idResult] = await sequelize.query('SELECT LAST_INSERT_ID() as id', {
      type: QueryTypes.SELECT,
    });

    const user_id = (idResult as { id: number }).id;
    if (!user_id) return null;

    return this.findById(user_id);
  }

  async findById(id: number): Promise<User | null> {
    const [user]: any[] = await sequelize.query('SELECT * FROM Users WHERE user_id = :id', {
      replacements: { id },
      type: QueryTypes.SELECT,
    });

    return user ? (user as User) : null;
  }

  async findByEmail(email: string): Promise<User | null> {
    const [user]: any[] = await sequelize.query('SELECT * FROM Users WHERE email = :email', {
      replacements: { email },
      type: QueryTypes.SELECT,
    });

    return user ? (user as User) : null;
  }

  async validateCredentials(email: string, password: string): Promise<User | null> {
    const user = await this.findByEmail(email);
    if (!user || !user.password) return null;

    const isPasswordValid = await bcrypt.compare(password, user.password);
    return isPasswordValid ? user : null;
  }

  async update(id: number, userData: Partial<User>): Promise<boolean> {
    const { username, email, password, fullname, role } = userData;

    let hashedPassword = undefined;
    if (password) {
      hashedPassword = await bcrypt.hash(password, 10);
    }

    const result = await sequelize.query(
      `UPDATE Users SET username = :username, email = :email, 
             password = COALESCE(:password, password), fullname = :fullname, role = :role, updatedAt = NOW() 
             WHERE user_id = :id`,
      {
        replacements: { id, username, email, password: hashedPassword, fullname, role },
        type: QueryTypes.UPDATE,
      },
    );

    const affectedRows = Array.isArray(result) ? result[1] : 0;
    return affectedRows > 0;
  }

  async delete(id: number): Promise<boolean> {
    const result = await sequelize.query('DELETE FROM Users WHERE user_id = :id', {
      replacements: { id },
      type: QueryTypes.DELETE,
    });

    const affectedRows = Array.isArray(result) ? result[1] : 0;
    return affectedRows > 0;
  }
}

export default new UserRepository();



================================================
FILE: server/src/routes/commentRoutes.ts
================================================
// import express from "express";
// import commentController from "../controllers/commentController"; // Adjust the import path as needed

// const router = express.Router();

// // Route to add a comment
// router.post("/newcomment", commentController.addComment);

// // Route to get all comments for a specific recipe
// router.get("/comments/:recipeId", commentController.getComments);

// // Route to update a comment
// router.put("/comments", commentController.updateComment);

// // Route to delete a comment
// router.delete("/comments", commentController.deleteComment);

// export default router;

import express from 'express';
import commentController from '../controllers/commentController'; // Adjust the import path as needed

const router = express.Router();

/**
 * @swagger
 * tags:
 *   name: Comments
 *   description: API endpoints for managing comments on recipes
 */

/**
 * @swagger
 * /newcomment:
 *   post:
 *     summary: Add a new comment to a recipe
 *     tags: [Comments]
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - recipeId
 *               - userId
 *               - content
 *             properties:
 *               recipeId:
 *                 type: integer
 *                 example: 1
 *               userId:
 *                 type: integer
 *                 example: 42
 *               content:
 *                 type: string
 *                 example: "This recipe is amazing!"
 *     responses:
 *       201:
 *         description: Comment added successfully
 *       500:
 *         description: Error adding comment
 */
router.post('/:recipeId', commentController.addComment);

/**
 * @swagger
 * /{recipeId}:
 *   get:
 *     summary: Get all comments for a specific recipe
 *     tags: [Comments]
 *     parameters:
 *       - in: path
 *         name: recipeId
 *         required: true
 *         schema:
 *           type: integer
 *         description: The ID of the recipe
 *     responses:
 *       200:
 *         description: List of comments for the recipe
 *       500:
 *         description: Error fetching comments
 */
router.get('/:recipeId', commentController.getComments);

/**
 * @swagger
 * /:
 *   put:
 *     summary: Update a comment
 *     tags: [Comments]
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - commentId
 *               - userId
 *               - content
 *             properties:
 *               commentId:
 *                 type: integer
 *                 example: 5
 *               userId:
 *                 type: integer
 *                 example: 42
 *               content:
 *                 type: string
 *                 example: "Updated comment text."
 *     responses:
 *       200:
 *         description: Comment updated successfully
 *       404:
 *         description: Comment not found or unauthorized
 *       500:
 *         description: Error updating comment
 */
router.put('/', commentController.updateComment);

/**
 * @swagger
 * /:
 *   delete:
 *     summary: Delete a comment
 *     tags: [Comments]
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - commentId
 *               - userId
 *             properties:
 *               commentId:
 *                 type: integer
 *                 example: 5
 *               userId:
 *                 type: integer
 *                 example: 42
 *     responses:
 *       200:
 *         description: Comment deleted successfully
 *       404:
 *         description: Comment not found or unauthorized
 *       500:
 *         description: Error deleting comment
 */
router.delete('/', commentController.deleteComment);

export default router;



================================================
FILE: server/src/routes/ratingRoutes.ts
================================================
import express from 'express';
import ratingController from '../controllers/ratingController';

const router = express.Router();

/**
 * @swagger
 * /rate:
 *   post:
 *     summary: Add a rating for a recipe
 *     description: Add a rating for a specific recipe by a user. If the user has already rated the recipe, it will be updated.
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               recipeId:
 *                 type: integer
 *               userId:
 *                 type: integer
 *               rating:
 *                 type: integer
 *                 description: Rating value (1-5)
 *     responses:
 *       201:
 *         description: Rating added successfully
 *       200:
 *         description: Rating updated successfully
 *       500:
 *         description: Error adding or updating rating
 */
router.post('/rate', ratingController.addRating);

/**
 * @swagger
 * /rate/{recipeId}:
 *   get:
 *     summary: Get the average rating for a recipe
 *     description: Retrieve the average rating of a specific recipe.
 *     parameters:
 *       - in: path
 *         name: recipeId
 *         required: true
 *         type: integer
 *         description: Recipe ID to get the average rating for
 *     responses:
 *       200:
 *         description: Average rating retrieved successfully
 *       500:
 *         description: Error fetching rating
 */
router.get('/rate/:recipeId', ratingController.getRating);

/**
 * @swagger
 * /rate/user/{recipeId}/{userId}:
 *   get:
 *     summary: Get the user's rating for a specific recipe
 *     description: Retrieve the rating given by a specific user for a specific recipe.
 *     parameters:
 *       - in: path
 *         name: recipeId
 *         required: true
 *         type: integer
 *         description: Recipe ID
 *       - in: path
 *         name: userId
 *         required: true
 *         type: integer
 *         description: User ID
 *     responses:
 *       200:
 *         description: User rating retrieved successfully
 *       404:
 *         description: Rating not found
 *       500:
 *         description: Error fetching user rating
 */
router.get('/rate/user/:recipeId/:userId', ratingController.getUserRating);

/**
 * @swagger
 * /rate/user/{recipeId}/{userId}:
 *   get:
 *     summary: Get a user's rating for a specific recipe
 *     description: Retrieve the rating given by a specific user for a specific recipe.
 *     parameters:
 *       - in: path
 *         name: recipeId
 *         required: true
 *         type: integer
 *         description: Recipe ID
 *       - in: path
 *         name: userId
 *         required: true
 *         type: integer
 *         description: User ID
 *     responses:
 *       200:
 *         description: User rating retrieved successfully
 *       404:
 *         description: Rating not found
 *       500:
 *         description: Error fetching rating
 */
router.get('/rate/user/:recipeId/:userId', ratingController.getUserRating);

/**
 * @swagger
 * /rate:
 *   put:
 *     summary: Update a rating for a recipe
 *     description: Update an existing rating for a specific recipe by a user.
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               ratingId:
 *                 type: integer
 *               userId:
 *                 type: integer
 *               rating:
 *                 type: integer
 *     responses:
 *       200:
 *         description: Rating updated successfully
 *       404:
 *         description: Rating not found or unauthorized
 *       500:
 *         description: Error updating rating
 */
router.put('/rate', ratingController.updateRating);

/**
 * @swagger
 * /rate:
 *   delete:
 *     summary: Delete a rating for a recipe
 *     description: Delete a specific rating for a recipe based on the rating ID and user ID.
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               ratingId:
 *                 type: integer
 *               userId:
 *                 type: integer
 *     responses:
 *       200:
 *         description: Rating deleted successfully
 *       404:
 *         description: Rating not found or unauthorized
 *       500:
 *         description: Error deleting rating
 */
router.delete('/rate', ratingController.deleteRating);

export default router;



================================================
FILE: server/src/routes/recipeRoutes.ts
================================================
// import express from "express";
// import recipeController, { createRecipe, upload } from "../controllers/recipeController";

// const router = express.Router();

// // Create a new recipe (protected route)
// router.post('/create', upload.single('image'), createRecipe); // 'image' is the field name in the form

// // Retrieve all recipes with pagination
// router.get("/getall", recipeController.getAllRecipes);

// // Retrieve a specific recipe by ID
// router.get("/:id", recipeController.getRecipeById);

// // Search recipes by title, ingredients, or tags
// router.get("/search/:query", recipeController.searchRecipes);

// // Update a specific recipe (only the creator can update)
// router.put("/:id", recipeController.updateRecipe);

// // Delete a specific recipe (only the creator can delete)
// router.delete("/:id", recipeController.deleteRecipe);

// // Retrieve recipes filtered by cuisine type
// router.get("/cuisine/:cuisine", recipeController.getRecipesByCuisine);

// // Retrieve recipes filtered by meal type
// router.get("/mealtype/:mealType", recipeController.getRecipesByMealType);

// // Retrieve a list of all available cuisine types
// router.get("/allcuisine", recipeController.getAllCuisines);

// // Retrieve user-specific recipes (using user_id)
// router.get("/my-recipes/:userId", recipeController.getUserRecipes); // Changed route to use query param instead of route param

// // router.get("/xyz/:userId", (req, res) => {
// //     console.log("Received request for '/my-recipes' route.");
// //     recipeController.getUserRecipes(req, res);
// // });

// export default router;

// import express from "express";
// import recipeController, { createRecipe, upload } from "../controllers/recipeController";

// const router = express.Router();

// /**
//  * @swagger
//  * /create:
//  *   post:
//  *     summary: Create a new recipe
//  *     description: Uploads an image and creates a new recipe.
//  *     consumes:
//  *       - multipart/form-data
//  *     parameters:
//  *       - in: formData
//  *         name: image
//  *         type: file
//  *         description: The image of the recipe
//  *       - in: body
//  *         name: recipe
//  *         description: Recipe data
//  *         schema:
//  *           type: object
//  *           required:
//  *             - title
//  *             - user_id
//  *             - description
//  *             - ingredients
//  *             - instructions
//  *             - preparationTime
//  *             - difficulty
//  *             - cuisine
//  *             - mealType
//  *           properties:
//  *             title:
//  *               type: string
//  *             user_id:
//  *               type: integer
//  *             description:
//  *               type: string
//  *             ingredients:
//  *               type: array
//  *               items:
//  *                 type: string
//  *             instructions:
//  *               type: string
//  *             preparationTime:
//  *               type: integer
//  *             difficulty:
//  *               type: string
//  *             cuisine:
//  *               type: string
//  *             mealType:
//  *               type: string
//  *     responses:
//  *       201:
//  *         description: Recipe created successfully
//  *       500:
//  *         description: Error creating recipe
//  */
// router.post('/create', upload.single('image'), createRecipe);

// /**
//  * @swagger
//  * /getall:
//  *   get:
//  *     summary: Retrieve all recipes with pagination
//  *     parameters:
//  *       - in: query
//  *         name: page
//  *         type: integer
//  *         required: false
//  *         description: Page number
//  *       - in: query
//  *         name: limit
//  *         type: integer
//  *         required: false
//  *         description: Number of recipes per page
//  *     responses:
//  *       200:
//  *         description: List of recipes
//  */
// router.get("/getall", recipeController.getAllRecipes);

// /**
//  * @swagger
//  * /{id}:
//  *   get:
//  *     summary: Retrieve a specific recipe by ID
//  *     parameters:
//  *       - in: path
//  *         name: id
//  *         required: true
//  *         type: integer
//  *         description: ID of the recipe
//  *     responses:
//  *       200:
//  *         description: Recipe details
//  *       404:
//  *         description: Recipe not found
//  */
// router.get("/:id", recipeController.getRecipeById);

// /**
//  * @swagger
//  * /search/{query}:
//  *   get:
//  *     summary: Search recipes by title, ingredients, or tags
//  *     parameters:
//  *       - in: path
//  *         name: query
//  *         required: true
//  *         type: string
//  *         description: Search query
//  *     responses:
//  *       200:
//  *         description: List of matching recipes
//  */
// router.get("/search/:query", recipeController.searchRecipes);

// /**
//  * @swagger
//  * /{id}:
//  *   put:
//  *     summary: Update a specific recipe
//  *     parameters:
//  *       - in: path
//  *         name: id
//  *         required: true
//  *         type: integer
//  *         description: ID of the recipe to update
//  *       - in: body
//  *         name: recipe
//  *         description: Updated recipe data
//  *         schema:
//  *           type: object
//  *           properties:
//  *             title:
//  *               type: string
//  *             description:
//  *               type: string
//  *     responses:
//  *       200:
//  *         description: Recipe updated successfully
//  *       403:
//  *         description: Unauthorized
//  */
// router.put("/:id", recipeController.updateRecipe);

// /**
//  * @swagger
//  * /{id}:
//  *   delete:
//  *     summary: Delete a specific recipe
//  *     parameters:
//  *       - in: path
//  *         name: id
//  *         required: true
//  *         type: integer
//  *         description: ID of the recipe to delete
//  *     responses:
//  *       200:
//  *         description: Recipe deleted successfully
//  *       403:
//  *         description: Unauthorized
//  */
// router.delete("/:id", recipeController.deleteRecipe);

// /**
//  * @swagger
//  * /cuisine/{cuisine}:
//  *   get:
//  *     summary: Retrieve recipes filtered by cuisine type
//  *     parameters:
//  *       - in: path
//  *         name: cuisine
//  *         required: true
//  *         type: string
//  *         description: Cuisine type
//  *     responses:
//  *       200:
//  *         description: List of recipes
//  */
// router.get("/cuisine/:cuisine", recipeController.getRecipesByCuisine);

// /**
//  * @swagger
//  * /mealtype/{mealType}:
//  *   get:
//  *     summary: Retrieve recipes filtered by meal type
//  *     parameters:
//  *       - in: path
//  *         name: mealType
//  *         required: true
//  *         type: string
//  *         description: Meal type
//  *     responses:
//  *       200:
//  *         description: List of recipes
//  */
// router.get("/mealtype/:mealType", recipeController.getRecipesByMealType);

// /**
//  * @swagger
//  * /my-recipes/{userId}:
//  *   get:
//  *     summary: Retrieve user-specific recipes
//  *     parameters:
//  *       - in: path
//  *         name: userId
//  *         required: true
//  *         type: integer
//  *         description: User ID
//  *     responses:
//  *       200:
//  *         description: List of user recipes
//  */
// router.get("/my-recipes/:userId", recipeController.getUserRecipes);

// export default router;

// recipeRoutes.ts
import express from 'express';
import recipeController from '../controllers/recipeController'; // Default import

const router = express.Router();

/**
 * @swagger
 * /create:
 *   post:
 *     summary: Create a new recipe
 *     description: Uploads an image and creates a new recipe.
 *     consumes:
 *       - multipart/form-data
 *     parameters:
 *       - in: formData
 *         name: image
 *         type: file
 *         description: The image of the recipe
 *       - in: body
 *         name: recipe
 *         description: Recipe data
 *         schema:
 *           type: object
 *           required:
 *             - title
 *             - user_id
 *             - description
 *             - ingredients
 *             - instructions
 *             - preparationTime
 *             - difficulty
 *             - cuisine
 *             - mealType
 *           properties:
 *             title:
 *               type: string
 *             user_id:
 *               type: integer
 *             description:
 *               type: string
 *             ingredients:
 *               type: array
 *               items:
 *                 type: string
 *             instructions:
 *               type: string
 *             preparationTime:
 *               type: integer
 *             difficulty:
 *               type: string
 *             cuisine:
 *               type: string
 *             mealType:
 *               type: string
 *     responses:
 *       201:
 *         description: Recipe created successfully
 *       500:
 *         description: Error creating recipe
 */
// router.post('/create', recipeController.upload.single('image'), recipeController.createRecipe);
router.post('/create', recipeController.createRecipe);

/**
 * @swagger
 * /getall:
 *   get:
 *     summary: Retrieve all recipes with pagination
 *     parameters:
 *       - in: query
 *         name: page
 *         type: integer
 *         required: false
 *         description: Page number
 *       - in: query
 *         name: limit
 *         type: integer
 *         required: false
 *         description: Number of recipes per page
 *     responses:
 *       200:
 *         description: List of recipes
 */
router.get('/getall', recipeController.getAllRecipes);

/**
 * @swagger
 * /{id}:
 *   get:
 *     summary: Retrieve a specific recipe by ID
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         type: integer
 *         description: ID of the recipe
 *     responses:
 *       200:
 *         description: Recipe details
 *       404:
 *         description: Recipe not found
 */
router.get('/:id', recipeController.getRecipeById);

/**
 * @swagger
 * /search/{query}:
 *   get:
 *     summary: Search recipes by title, ingredients, or tags
 *     parameters:
 *       - in: path
 *         name: query
 *         required: true
 *         type: string
 *         description: Search query
 *     responses:
 *       200:
 *         description: List of matching recipes
 */
router.get('/search/:query', recipeController.searchRecipes);

/**
 * @swagger
 * /{id}:
 *   put:
 *     summary: Update a specific recipe
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         type: integer
 *         description: ID of the recipe to update
 *       - in: body
 *         name: recipe
 *         description: Updated recipe data
 *         schema:
 *           type: object
 *           properties:
 *             title:
 *               type: string
 *             description:
 *               type: string
 *     responses:
 *       200:
 *         description: Recipe updated successfully
 *       403:
 *         description: Unauthorized
 */
router.put('/:id', recipeController.updateRecipe);

/**
 * @swagger
 * /{id}:
 *   delete:
 *     summary: Delete a specific recipe
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         type: integer
 *         description: ID of the recipe to delete
 *     responses:
 *       200:
 *         description: Recipe deleted successfully
 *       403:
 *         description: Unauthorized
 */
router.delete('/:id', recipeController.deleteRecipe);

/**
 * @swagger
 * /cuisine/{cuisine}:
 *   get:
 *     summary: Retrieve recipes filtered by cuisine type
 *     parameters:
 *       - in: path
 *         name: cuisine
 *         required: true
 *         type: string
 *         description: Cuisine type
 *     responses:
 *       200:
 *         description: List of recipes
 */
router.get('/cuisine/:cuisine', recipeController.getRecipesByCuisine);

/**
 * @swagger
 * /mealtype/{mealType}:
 *   get:
 *     summary: Retrieve recipes filtered by meal type
 *     parameters:
 *       - in: path
 *         name: mealType
 *         required: true
 *         type: string
 *         description: Meal type
 *     responses:
 *       200:
 *         description: List of recipes
 */
router.get('/mealtype/:mealType', recipeController.getRecipesByMealType);

/**
 * @swagger
 * /my-recipes/{userId}:
 *   get:
 *     summary: Retrieve user-specific recipes
 *     parameters:
 *       - in: path
 *         name: userId
 *         required: true
 *         type: integer
 *         description: User ID
 *     responses:
 *       200:
 *         description: List of user recipes
 */
router.get('/my-recipes/:userId', recipeController.getUserRecipes);

export default router;



================================================
FILE: server/src/routes/userRoutes.ts
================================================
import express from 'express';
import userController from '../controllers/userController';

const router = express.Router();

/**
 * @swagger
 * /register:
 *   post:
 *     summary: Register a new user
 *     tags: [Users]
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               username:
 *                 type: string
 *               email:
 *                 type: string
 *               password:
 *                 type: string
 *               fullname:
 *                 type: string
 *               role:
 *                 type: string
 *     responses:
 *       200:
 *         description: User registered successfully
 *       400:
 *         description: User already exists
 */
router.post('/register', userController.register);

/**
 * @swagger
 * /login:
 *   post:
 *     summary: Login a user
 *     tags: [Users]
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               email:
 *                 type: string
 *               password:
 *                 type: string
 *     responses:
 *       200:
 *         description: Login successful, returns token
 *       400:
 *         description: Invalid credentials
 */
router.post('/login', userController.login);

/**
 * @swagger
 * /profile/{id}:
 *   get:
 *     summary: Get user profile by ID
 *     tags: [Users]
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: integer
 *     responses:
 *       200:
 *         description: User profile retrieved successfully
 *       404:
 *         description: User not found
 */
router.get('/profile/:id', userController.getProfile);

/**
 * @swagger
 * /profile/{id}:
 *   patch:
 *     summary: Update user profile
 *     tags: [Users]
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: integer
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               username:
 *                 type: string
 *               email:
 *                 type: string
 *               fullname:
 *                 type: string
 *               role:
 *                 type: string
 *     responses:
 *       200:
 *         description: Profile updated successfully
 *       500:
 *         description: Error updating profile
 */
router.patch('/profile/:id', userController.updateProfile);

/**
 * @swagger
 * /user/{id}:
 *   delete:
 *     summary: Delete a user
 *     tags: [Users]
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: integer
 *     responses:
 *       200:
 *         description: User deleted successfully
 *       500:
 *         description: Error deleting user
 */
router.delete('/user/:id', userController.deleteUser);

export default router;



================================================
FILE: .husky/commit-msg
================================================
npx --no-install commitlint --edit $1



================================================
FILE: .husky/pre-commit
================================================
npx lint-staged


